//==================================================================================================
//  $Id: common.ai,v 1.68 2003/05/12 02:34:18 bfitch Exp $
//==================================================================================================
native DebugS               takes string str                            returns nothing
native DebugFI              takes string str, integer val               returns nothing
native DebugUnitID          takes string str, integer val               returns nothing
native DisplayText          takes integer p, string str                 returns nothing
native DisplayTextI         takes integer p, string str, integer val    returns nothing
native DisplayTextII        takes integer p, string str, integer v1, integer v2 returns nothing
native DisplayTextIII       takes integer p, string str, integer v1, integer v2, integer v3 returns nothing
native DoAiScriptDebug      takes nothing                               returns boolean

native GetAiPlayer          takes nothing                               returns integer
native GetHeroId            takes nothing                               returns integer
native GetHeroLevelAI       takes nothing                               returns integer

native GetUnitCount         takes integer unitid                        returns integer
native GetPlayerUnitTypeCount takes player p, integer unitid            returns integer
native GetUnitCountDone     takes integer unitid                        returns integer
native GetTownUnitCount     takes integer id, integer tn, boolean dn    returns integer
native GetUnitGoldCost      takes integer unitid                        returns integer
native GetUnitWoodCost      takes integer unitid                        returns integer
native GetUnitBuildTime     takes integer unitid                        returns integer

native GetMinesOwned        takes nothing                               returns integer
native GetGoldOwned         takes nothing                               returns integer
native TownWithMine         takes nothing                               returns integer
native TownHasMine          takes integer townid                        returns boolean
native TownHasHall          takes integer townid                        returns boolean

native GetUpgradeLevel      takes integer id                            returns integer
native GetUpgradeGoldCost   takes integer id                            returns integer
native GetUpgradeWoodCost   takes integer id                            returns integer
native GetNextExpansion     takes nothing                               returns integer
native GetMegaTarget        takes nothing                               returns unit
native GetBuilding          takes player p                              returns unit
native GetEnemyPower        takes nothing                               returns integer
native SetAllianceTarget    takes unit id                               returns nothing
native GetAllianceTarget    takes nothing                               returns unit

native SetProduce           takes integer qty, integer id, integer town returns boolean
native Unsummon             takes unit unitid                           returns nothing
native SetExpansion         takes unit peon, integer id                 returns boolean
native SetUpgrade           takes integer id                            returns boolean
native SetHeroLevels        takes code func                             returns nothing
native SetNewHeroes         takes boolean state                         returns nothing
native PurchaseZeppelin     takes nothing                               returns nothing

native MergeUnits           takes integer qty, integer a, integer b, integer make returns boolean
native ConvertUnits         takes integer qty, integer id               returns boolean

native SetCampaignAI        takes nothing                               returns nothing
native SetMeleeAI           takes nothing                               returns nothing
native SetTargetHeroes      takes boolean state                         returns nothing
native SetPeonsRepair       takes boolean state                         returns nothing
native SetRandomPaths       takes boolean state                         returns nothing
native SetDefendPlayer      takes boolean state                         returns nothing
native SetHeroesFlee        takes boolean state                         returns nothing
native SetHeroesBuyItems    takes boolean state                         returns nothing
native SetWatchMegaTargets  takes boolean state                         returns nothing
native SetIgnoreInjured     takes boolean state                         returns nothing
native SetHeroesTakeItems   takes boolean state                         returns nothing
native SetUnitsFlee         takes boolean state                         returns nothing
native SetGroupsFlee        takes boolean state                         returns nothing
native SetSlowChopping      takes boolean state                         returns nothing
native SetCaptainChanges    takes boolean allow                         returns nothing
native SetSmartArtillery    takes boolean state                         returns nothing
native SetReplacementCount  takes integer qty                           returns nothing
native GroupTimedLife       takes boolean allow                         returns nothing
native RemoveInjuries       takes nothing                               returns nothing
native RemoveSiege          takes nothing                               returns nothing

native InitAssault          takes nothing                               returns nothing
native AddAssault           takes integer qty, integer id               returns boolean
native AddDefenders         takes integer qty, integer id               returns boolean

native GetCreepCamp         takes integer min, integer max, boolean flyers_ok returns unit

native StartGetEnemyBase    takes nothing                               returns nothing
native WaitGetEnemyBase     takes nothing                               returns boolean
native GetEnemyBase         takes nothing                               returns unit
native GetExpansionFoe      takes nothing                               returns unit
native GetEnemyExpansion    takes nothing                               returns unit
native GetExpansionX        takes nothing                               returns integer
native GetExpansionY        takes nothing                               returns integer
native SetStagePoint        takes real x, real y                        returns nothing
native AttackMoveKill       takes unit target                           returns nothing
native AttackMoveXY         takes integer x, integer y                  returns nothing
native LoadZepWave          takes integer x, integer y                  returns nothing
native SuicidePlayer        takes player id, boolean check_full         returns boolean
native SuicidePlayerUnits   takes player id, boolean check_full         returns boolean
native CaptainInCombat      takes boolean attack_captain                returns boolean
native IsTowered            takes unit target                           returns boolean

native ClearHarvestAI       takes nothing                               returns nothing
native HarvestGold          takes integer town, integer peons           returns nothing
native HarvestWood          takes integer town, integer peons           returns nothing
native GetExpansionPeon     takes nothing                               returns unit

native StopGathering        takes nothing                               returns nothing
native AddGuardPost         takes integer id, real x, real y            returns nothing
native FillGuardPosts       takes nothing                               returns nothing
native ReturnGuardPosts     takes nothing                               returns nothing
native CreateCaptains       takes nothing                               returns nothing
native SetCaptainHome       takes integer which, real x, real y         returns nothing
native ResetCaptainLocs     takes nothing                               returns nothing
native ShiftTownSpot        takes real x, real y                        returns nothing
native TeleportCaptain      takes real x, real y                        returns nothing
native ClearCaptainTargets  takes nothing                               returns nothing
native CaptainAttack        takes real x, real y                        returns nothing
native CaptainVsUnits       takes player id                             returns nothing
native CaptainVsPlayer      takes player id                             returns nothing
native CaptainGoHome        takes nothing                               returns nothing
native CaptainIsHome        takes nothing                               returns boolean
native CaptainIsFull        takes nothing                               returns boolean
native CaptainIsEmpty       takes nothing                               returns boolean
native CaptainGroupSize     takes nothing                               returns integer
native CaptainReadiness     takes nothing                               returns integer
native CaptainRetreating    takes nothing                               returns boolean
native CaptainReadinessHP   takes nothing                               returns integer
native CaptainReadinessMa   takes nothing                               returns integer
native CaptainAtGoal        takes nothing                               returns boolean
native CreepsOnMap          takes nothing                               returns boolean
native SuicideUnit          takes integer count, integer unitid         returns nothing
native SuicideUnitEx        takes integer ct, integer uid, integer pid  returns nothing
native StartThread          takes code func                             returns nothing
native Sleep                takes real seconds                          returns nothing
native UnitAlive            takes unit id                               returns boolean
native UnitInvis            takes unit id                               returns boolean
native IgnoredUnits         takes integer unitid                        returns integer
native TownThreatened       takes nothing                               returns boolean
native DisablePathing       takes nothing                               returns nothing
native SetAmphibious        takes nothing                               returns nothing

native CommandsWaiting      takes nothing                               returns integer
native GetLastCommand       takes nothing                               returns integer
native GetLastData          takes nothing                               returns integer
native PopLastCommand       takes nothing                               returns nothing
native MeleeDifficulty      takes nothing                               returns integer

//============================================================================
//  Globals for all AI scripts
//============================================================================
globals

    //--------------------------------------------------------------------
    //  HUMANS
    //--------------------------------------------------------------------

    // human heroes
    constant integer ARCHMAGE           = 'Hamg'
    constant integer PALADIN            = 'Hpal'
    constant integer MTN_KING           = 'Hmkg'
    constant integer BLOOD_MAGE         = 'Hblm'

    // human hero abilities
    constant integer AVATAR             = 'AHav'
    constant integer BASH               = 'AHbh'
    constant integer THUNDER_BOLT       = 'AHtb'
    constant integer THUNDER_CLAP       = 'AHtc'

    constant integer DEVOTION_AURA      = 'AHad'
    constant integer DIVINE_SHIELD      = 'AHds'
    constant integer HOLY_BOLT          = 'AHhb'
    constant integer RESURRECTION       = 'AHre'

    constant integer BLIZZARD           = 'AHbz'
    constant integer BRILLIANCE_AURA    = 'AHab'
    constant integer MASS_TELEPORT      = 'AHmt'
    constant integer WATER_ELEMENTAL    = 'AHwe'

    constant integer BANISH             = 'AHbn'
    constant integer FLAME_STRIKE       = 'AHfs'
    constant integer SUMMON_PHOENIX     = 'AHpx'
    constant integer SIPHON_MANA        = 'AHdr'

    // special human heroes
    constant integer JAINA              = 'Hjai'
    constant integer MURADIN            = 'Hmbr'
    constant integer GARITHOS           = 'Hlgr'
    constant integer KAEL               = 'Hkal'

    // human units
    constant integer COPTER             = 'hgyr'
    constant integer GYRO               =  COPTER
    constant integer ELEMENTAL          = 'hwat'
    constant integer FOOTMAN            = 'hfoo'
    constant integer FOOTMEN            =  FOOTMAN
    constant integer GRYPHON            = 'hgry'
    constant integer KNIGHT             = 'hkni'
    constant integer MORTAR             = 'hmtm'
    constant integer PEASANT            = 'hpea'
    constant integer PRIEST             = 'hmpr'
    constant integer RIFLEMAN           = 'hrif'
    constant integer RIFLEMEN           =  RIFLEMAN
    constant integer SORCERESS          = 'hsor'
    constant integer TANK               = 'hmtt'
    constant integer STEAM_TANK         =  TANK
    constant integer ROCKET_TANK        = 'hrtt'
    constant integer MILITIA            = 'hmil'
    constant integer SPELL_BREAKER      = 'hspt'
    constant integer HUMAN_DRAGON_HAWK  = 'hdhw'

    // special human units
    constant integer BLOOD_PRIEST       = 'hbep'
    constant integer BLOOD_SORCERESS    = 'hbes'
    constant integer BLOOD_PEASANT      = 'nhew'

    // human buildings
    constant integer AVIARY             = 'hgra'
    constant integer BARRACKS           = 'hbar'
    constant integer BLACKSMITH         = 'hbla'
    constant integer CANNON_TOWER       = 'hctw'
    constant integer CASTLE             = 'hcas'
    constant integer CHURCH             = 'htws'
    constant integer MAGE_TOWER         =  CHURCH
    constant integer GUARD_TOWER        = 'hgtw'
    constant integer HOUSE              = 'hhou'
    constant integer HUMAN_ALTAR        = 'halt'
    constant integer KEEP               = 'hkee'
    constant integer LUMBER_MILL        = 'hlum'
    constant integer SANCTUM            = 'hars'
    constant integer ARCANE_SANCTUM     =  SANCTUM
    constant integer TOWN_HALL          = 'htow'
    constant integer WATCH_TOWER        = 'hwtw'
    constant integer WORKSHOP           = 'harm'
    constant integer ARCANE_VAULT       = 'hvlt'
    constant integer ARCANE_TOWER       = 'hatw'

    // human upgrades
    constant integer UPG_MELEE          = 'Rhme'
    constant integer UPG_RANGED         = 'Rhra'
    constant integer UPG_ARTILLERY      = 'Rhaa'
    constant integer UPG_ARMOR          = 'Rhar'
    constant integer UPG_GOLD           = 'Rhmi'
    constant integer UPG_MASONRY        = 'Rhac'
    constant integer UPG_SIGHT          = 'Rhss'
    constant integer UPG_DEFEND         = 'Rhde'
    constant integer UPG_BREEDING       = 'Rhan'
    constant integer UPG_PRAYING        = 'Rhpt'
    constant integer UPG_SORCERY        = 'Rhst'
    constant integer UPG_LEATHER        = 'Rhla'
    constant integer UPG_GUN_RANGE      = 'Rhri'
    constant integer UPG_WOOD           = 'Rhlh'
    constant integer UPG_SENTINEL       = 'Rhse'
    constant integer UPG_SCATTER        = 'Rhsr'
    constant integer UPG_BOMBS          = 'Rhgb'
    constant integer UPG_HAMMERS        = 'Rhhb'
    constant integer UPG_CONT_MAGIC     = 'Rhss'
    constant integer UPG_FRAGS          = 'Rhfs'
    constant integer UPG_TANK           = 'Rhrt'
    constant integer UPG_FLAK           = 'Rhfc'
    constant integer UPG_CLOUD          = 'Rhcd'

    //--------------------------------------------------------------------
    //  ORCS
    //--------------------------------------------------------------------

    // orc heroes
    constant integer BLADE_MASTER       = 'Obla'
    constant integer FAR_SEER           = 'Ofar'
    constant integer TAUREN_CHIEF       = 'Otch'
    constant integer SHADOW_HUNTER      = 'Oshd'

    // special orc heroes
    constant integer GROM               = 'Ogrh'
    constant integer THRALL             = 'Othr'

    // orc hero abilities
    constant integer CRITICAL_STRIKE    = 'AOcr'
    constant integer MIRROR_IMAGE       = 'AOmi'
    constant integer BLADE_STORM        = 'AOww'
    constant integer WIND_WALK          = 'AOwk'

    constant integer CHAIN_LIGHTNING    = 'AOcl'
    constant integer EARTHQUAKE         = 'AOeq'
    constant integer FAR_SIGHT          = 'AOfs'
    constant integer SPIRIT_WOLF        = 'AOsf'

    constant integer ENDURANE_AURA      = 'AOae'
    constant integer REINCARNATION      = 'AOre'
    constant integer SHOCKWAVE          = 'AOsh'
    constant integer WAR_STOMP          = 'AOws'

    constant integer HEALING_WAVE       = 'AOhw'
    constant integer HEX                = 'AOhx'
    constant integer SERPENT_WARD       = 'AOsw'
    constant integer VOODOO             = 'AOvd'

    // orc units
    constant integer GUARDIAN           = 'oang'
    constant integer CATAPULT           = 'ocat'
    constant integer WITCH_DOCTOR       = 'odoc'
    constant integer GRUNT              = 'ogru'
    constant integer HEAD_HUNTER        = 'ohun'
    constant integer BERSERKER          = 'otbk'
    constant integer KODO_BEAST         = 'okod'
    constant integer PEON               = 'opeo'
    constant integer RAIDER             = 'orai'
    constant integer SHAMAN             = 'oshm'
    constant integer TAUREN             = 'otau'
    constant integer WYVERN             = 'owyv'
    constant integer BATRIDER           = 'otbr'
    constant integer SPIRIT_WALKER      = 'ospw'
    constant integer SPIRIT_WALKER_M    = 'ospm'

    // orc buildings
    constant integer ORC_ALTAR          = 'oalt'
    constant integer ORC_BARRACKS       = 'obar'
    constant integer BESTIARY           = 'obea'
    constant integer FORGE              = 'ofor'
    constant integer FORTRESS           = 'ofrt'
    constant integer GREAT_HALL         = 'ogre'
    constant integer LODGE              = 'osld'
    constant integer STRONGHOLD         = 'ostr'
    constant integer BURROW             = 'otrb'
    constant integer TOTEM              = 'otto'
    constant integer ORC_WATCH_TOWER    = 'owtw'
    constant integer VOODOO_LOUNGE      = 'ovln'

    // orc upgrades
    constant integer UPG_ORC_MELEE      = 'Rome'
    constant integer UPG_ORC_RANGED     = 'Rora'
    constant integer UPG_ORC_ARTILLERY  = 'Roaa'
    constant integer UPG_ORC_ARMOR      = 'Roar'
    constant integer UPG_ORC_WAR_DRUMS  = 'Rwdm'
    constant integer UPG_ORC_PILLAGE    = 'Ropg'
    constant integer UPG_ORC_BERSERK    = 'Robs'
    constant integer UPG_ORC_PULVERIZE  = 'Rows'
    constant integer UPG_ORC_ENSNARE    = 'Roen'
    constant integer UPG_ORC_VENOM      = 'Rovs'
    constant integer UPG_ORC_DOCS       = 'Rowd'
    constant integer UPG_ORC_SHAMAN     = 'Rost'
    constant integer UPG_ORC_SPIKES     = 'Rosp'
    constant integer UPG_ORC_BURROWS    = 'Rorb'
    constant integer UPG_ORC_REGEN      = 'Rotr'
    constant integer UPG_ORC_FIRE       = 'Rolf'
    constant integer UPG_ORC_SWALKER    = 'Rowt'
    constant integer UPG_ORC_BERSERKER  = 'Robk'
    constant integer UPG_ORC_NAPTHA     = 'Robf'
    constant integer UPG_ORC_CHAOS      = 'Roch'

    // Warcraft 2 orc units
    constant integer OGRE_MAGI          = 'nomg'
    constant integer ORC_DRAGON         = 'nrwm'
    constant integer SAPPER             = 'ngsp'
    constant integer ZEPPLIN            = 'nzep'
    constant integer ZEPPELIN           =  ZEPPLIN
    constant integer W2_WARLOCK         = 'nw2w'
    constant integer PIG_FARM           = 'npgf'
    constant integer FOREST_TROLL       = 'nftr'

    // special orc units
    constant integer CHAOS_GRUNT        = 'nchg'
    constant integer CHAOS_WARLOCK      = 'nchw'
    constant integer CHAOS_RAIDER       = 'nchr'
    constant integer CHAOS_PEON         = 'ncpn'
    constant integer CHAOS_KODO         = 'nckb'
    constant integer CHAOS_GROM         = 'Opgh'
    constant integer CHAOS_BLADEMASTER  = 'Nbbc'
    constant integer CHAOS_BURROW       = 'ocbw'

    //--------------------------------------------------------------------
    //  UNDEAD
    //--------------------------------------------------------------------

    // undead heroes
    constant integer DEATH_KNIGHT       = 'Udea'
    constant integer DREAD_LORD         = 'Udre'
    constant integer LICH               = 'Ulic'
    constant integer CRYPT_LORD         = 'Ucrl'

    // special undead heroes
    constant integer MALGANIS           = 'Umal'
    constant integer TICHONDRIUS        = 'Utic'
    constant integer PIT_LORD           = 'Npld'
    constant integer DETHEROC           = 'Udth'

    // undead hero abilities
    constant integer SLEEP              = 'AUsl'
    constant integer VAMP_AURA          = 'AUav'
    constant integer CARRION_SWARM      = 'AUcs'
    constant integer INFERNO            = 'AUin'

    constant integer DARK_RITUAL        = 'AUdr'
    constant integer DEATH_DECAY        = 'AUdd'
    constant integer FROST_ARMOR        = 'AUfu'
    constant integer FROST_NOVA         = 'AUfn'

    constant integer ANIM_DEAD          = 'AUan'
    constant integer DEATH_COIL         = 'AUdc'
    constant integer DEATH_PACT         = 'AUdp'
    constant integer UNHOLY_AURA        = 'AUau'

    constant integer CARRION_SCARAB     = 'AUcb'
    constant integer IMPALE             = 'AUim'
    constant integer LOCUST_SWARM       = 'AUls'
    constant integer THORNY_SHIELD      = 'AUts'

    // undead units
    constant integer ABOMINATION        = 'uabo'
    constant integer ACOLYTE            = 'uaco'
    constant integer BANSHEE            = 'uban'
    constant integer PIT_FIEND          = 'ucry'
    constant integer CRYPT_FIEND        =  PIT_FIEND
    constant integer FROST_WYRM         = 'ufro'
    constant integer GARGOYLE           = 'ugar'
    constant integer GARGOYLE_MORPH     = 'ugrm'
    constant integer GHOUL              = 'ugho'
    constant integer MEAT_WAGON         = 'umtw'
    constant integer NECRO              = 'unec'
    constant integer SKEL_WARRIOR       = 'uske'
    constant integer SHADE              = 'ushd'
    constant integer UNDEAD_BARGE       = 'uarb'
    constant integer OBSIDIAN_STATUE    = 'uobs'
    constant integer OBS_STATUE         =  OBSIDIAN_STATUE
    constant integer BLK_SPHINX         = 'ubsp'

    // undead buildings
    constant integer UNDEAD_MINE        = 'ugol'
    constant integer UNDEAD_ALTAR       = 'uaod'
    constant integer BONEYARD           = 'ubon'
    constant integer GARG_SPIRE         = 'ugsp'
    constant integer NECROPOLIS_1       = 'unpl'    // normal
    constant integer NECROPOLIS_2       = 'unp1'    // upgraded once
    constant integer NECROPOLIS_3       = 'unp2'    // full upgrade
    constant integer SAC_PIT            = 'usap'
    constant integer CRYPT              = 'usep'
    constant integer SLAUGHTERHOUSE     = 'uslh'
    constant integer DAMNED_TEMPLE      = 'utod'
    constant integer ZIGGURAT_1         = 'uzig'    // normal
    constant integer ZIGGURAT_2         = 'uzg1'    // upgraded
    constant integer ZIGGURAT_FROST     = 'uzg2'    // frost tower
    constant integer GRAVEYARD          = 'ugrv'
    constant integer TOMB_OF_RELICS     = 'utom'

    // undead upgrades
    constant integer UPG_UNHOLY_STR     = 'Rume'
    constant integer UPG_CR_ATTACK      = 'Rura'
    constant integer UPG_UNHOLY_ARMOR   = 'Ruar'
    constant integer UPG_CANNIBALIZE    = 'Ruac'
    constant integer UPG_GHOUL_FRENZY   = 'Rugf'
    constant integer UPG_FIEND_WEB      = 'Ruwb'
    constant integer UPG_ABOM           = 'Ruab'
    constant integer UPG_STONE_FORM     = 'Rusf'
    constant integer UPG_NECROS         = 'Rune'
    constant integer UPG_BANSHEE        = 'Ruba'
    constant integer UPG_MEAT_WAGON     = 'Rump'
    constant integer UPG_WYRM_BREATH    = 'Rufb'
    constant integer UPG_SKEL_LIFE      = 'Rusl'
    constant integer UPG_SKEL_MASTERY   = 'Rusm'
    constant integer UPG_EXHUME         = 'Ruex'
    constant integer UPG_SACRIFICE      = 'Rurs'
    constant integer UPG_ABOM_EXPL      = 'Ruax'
    constant integer UPG_CR_ARMOR       = 'Rucr'
    constant integer UPG_PLAGUE         = 'Rupc'
    constant integer UPG_BLK_SPHINX     = 'Rusp'
    constant integer UPG_BURROWING      = 'Rubu'

    //--------------------------------------------------------------------
    //  ELVES
    //--------------------------------------------------------------------

    // elf heroes
    constant integer DEMON_HUNTER       = 'Edem'
    constant integer DEMON_HUNTER_M     = 'Edmm'
    constant integer KEEPER             = 'Ekee'
    constant integer MOON_CHICK         = 'Emoo'
    constant integer MOON_BABE          =  MOON_CHICK
    constant integer MOON_HONEY         =  MOON_CHICK
    constant integer WARDEN             = 'Ewar'

    // special elf heroes
    constant integer SYLVANUS           = 'Hvwd'
    constant integer CENARIUS           = 'Ecen'
    constant integer ILLIDAN            = 'Eevi'
    constant integer ILLIDAN_DEMON      = 'Eevm'
    constant integer MAIEV              = 'Ewrd'

    // elf hero abilities
    constant integer FORCE_NATURE       = 'AEfn'
    constant integer ENT_ROOTS          = 'AEer'
    constant integer THORNS_AURA        = 'AEah'
    constant integer TRANQUILITY        = 'AEtq'

    constant integer EVASION            = 'AEev'
    constant integer IMMOLATION         = 'AEim'
    constant integer MANA_BURN          = 'AEmb'
    constant integer METAMORPHOSIS      = 'AEme'

    constant integer SEARING_ARROWS     = 'AHfa'
    constant integer SCOUT              = 'AEst'
    constant integer STARFALL           = 'AEsf'
    constant integer TRUESHOT           = 'AEar'

    constant integer BLINK              = 'AEbl'
    constant integer FAN_KNIVES         = 'AEfk'
    constant integer SHADOW_TOUCH       = 'AEsh'
    constant integer VENGEANCE          = 'AEsv'

    // elf units
    constant integer WISP               = 'ewsp'
    constant integer ARCHER             = 'earc'
    constant integer DRUID_TALON        = 'edot'
    constant integer DRUID_TALON_M      = 'edtm'
    constant integer BALLISTA           = 'ebal'
    constant integer DRUID_CLAW         = 'edoc'
    constant integer DRUID_CLAW_M       = 'edcm'
    constant integer DRYAD              = 'edry'
    constant integer HIPPO              = 'ehip'
    constant integer HIPPO_RIDER        = 'ehpr'
    constant integer HUNTRESS           = 'esen'
    constant integer CHIMAERA           = 'echm'
    constant integer ENT                = 'efon'
    constant integer MOUNTAIN_GIANT     = 'emtg'
    constant integer FAERIE_DRAGON      = 'efdr'

    // special elf units
    constant integer HIGH_ARCHER        = 'nhea'
    constant integer HIGH_FOOTMAN       = 'hcth'
    constant integer HIGH_FOOTMEN       =  HIGH_FOOTMAN
    constant integer HIGH_SWORDMAN      = 'hhes'
    constant integer DRAGON_HAWK        = 'nws1'
    constant integer CORRUPT_TREANT     = 'nenc'
    constant integer POISON_TREANT      = 'nenp'
    constant integer PLAGUE_TREANT      = 'nepl'
    constant integer SHANDRIS           = 'eshd'

    // elf buildings
    constant integer ANCIENT_LORE       = 'eaoe'
    constant integer ANCIENT_WAR        = 'eaom'
    constant integer ANCIENT_WIND       = 'eaow'
    constant integer TREE_AGES          = 'etoa'
    constant integer TREE_ETERNITY      = 'etoe'
    constant integer TREE_LIFE          = 'etol'
    constant integer ANCIENT_PROTECT    = 'etrp'
    constant integer ELF_ALTAR          = 'eate'
    constant integer BEAR_DEN           = 'edol'
    constant integer CHIMAERA_ROOST     = 'edos'
    constant integer HUNTERS_HALL       = 'edob'
    constant integer MOON_WELL          = 'emow'
    constant integer ELF_MINE           = 'egol'
    constant integer DEN_OF_WONDERS     = 'eden'

    // special elf buildings
    constant integer ELF_FARM           = 'nefm'
    constant integer ELF_GUARD_TOWER    = 'negt'
    constant integer HIGH_SKY           = 'negm'
    constant integer HIGH_EARTH         = 'negf'
    constant integer HIGH_TOWER         = 'negt'
    constant integer ELF_HIGH_BARRACKS  = 'nheb'
    constant integer CORRUPT_LIFE       = 'nctl'
    constant integer CORRUPT_WELL       = 'ncmw'
    constant integer CORRUPT_PROTECTOR  = 'ncap'
    constant integer CORRUPT_WAR        = 'ncaw'

    // elf upgrades
    constant integer UPG_STR_MOON       = 'Resm'
    constant integer UPG_STR_WILD       = 'Resw'
    constant integer UPG_MOON_ARMOR     = 'Rema'
    constant integer UPG_HIDES          = 'Rerh'
    constant integer UPG_ULTRAVISION    = 'Reuv'
    constant integer UPG_BLESSING       = 'Renb'
    constant integer UPG_SCOUT          = 'Resc'
    constant integer UPG_GLAIVE         = 'Remg'
    constant integer UPG_BOWS           = 'Reib'
    constant integer UPG_MARKSMAN       = 'Remk'
    constant integer UPG_DRUID_TALON    = 'Redt'
    constant integer UPG_DRUID_CLAW     = 'Redc'
    constant integer UPG_ABOLISH        = 'Resi'
    constant integer UPG_CHIM_ACID      = 'Recb'
    constant integer UPG_HIPPO_TAME     = 'Reht'
    constant integer UPG_BOLT           = 'Repd'
    constant integer UPG_MARK_CLAW      = 'Reeb'
    constant integer UPG_MARK_TALON     = 'Reec'
    constant integer UPG_HARD_SKIN      = 'Rehs'
    constant integer UPG_RESIST_SKIN    = 'Rers'
    constant integer UPG_WELL_SPRING    = 'Rews'

    //--------------------------------------------------------------------
    // Neutral
    //--------------------------------------------------------------------
    constant integer DEMON_GATE         = 'ndmg'
    constant integer FELLHOUND          = 'nfel'
    constant integer INFERNAL           = 'ninf'
    constant integer DOOMGUARD          = 'nbal'
    constant integer SATYR              = 'nsty'
    constant integer TRICKSTER          = 'nsat'
    constant integer SHADOWDANCER       = 'nsts'
    constant integer SOULSTEALER        = 'nstl'
    constant integer HELLCALLER         = 'nsth'
    constant integer SKEL_ARCHER        = 'nska'
    constant integer SKEL_MARKSMAN      = 'nskm'
    constant integer SKEL_BURNING       = 'nskf'
    constant integer SKEL_GIANT         = 'nskg'
    constant integer FURBOLG            = 'nfrl'
    constant integer FURBOLG_TRACKER    = 'nfrb'
    constant integer FURBOLG_SHAMAN     = 'nfrs'
    constant integer FURBOLG_CHAMP      = 'nfrg'
    constant integer FURBOLG_ELDER      = 'nfre'

    //--------------------------------------------------------------------
    // NAGA
    //--------------------------------------------------------------------

    // naga heroes
    constant integer NAGA_SORCERESS     = 'Nngs'
    constant integer NAGA_VASHJ         = 'Hvsh'

    // naga units
    constant integer NAGA_DRAGON        = 'nsnp'        // old names
    constant integer NAGA_WITCH         = 'nnsw'
    constant integer NAGA_SERPENT       = 'nwgs'
    constant integer NAGA_HYDRA         = 'nhyc'

    constant integer NAGA_SLAVE         = 'nmpe'        // peon
    constant integer NAGA_SNAP_DRAGON   =  NAGA_DRAGON  // weak ranged
    constant integer NAGA_COUATL        =  NAGA_SERPENT // weak air
    constant integer NAGA_SIREN         =  NAGA_WITCH   // caster
    constant integer NAGA_MYRMIDON      = 'nmyr'        // knight
    constant integer NAGA_REAVER        = 'nnmg'        // footman
    constant integer NAGA_TURTLE        =  NAGA_HYDRA   // siege
    constant integer NAGA_ROYAL         = 'nnrg'        // royal guard

    // naga buildings
    constant integer NAGA_TEMPLE        = 'nntt'        // town hall
    constant integer NAGA_CORAL         = 'nnfm'        // farm
    constant integer NAGA_SHRINE        = 'nnsa'        // sirens & couatls
    constant integer NAGA_SPAWNING      = 'nnsg'        // myrm, snap dragon, hydra
    constant integer NAGA_GUARDIAN      = 'nntg'        // tower
    constant integer NAGA_ALTAR         = 'nnad'        // altar

    // naga upgrades
    constant integer UPG_NAGA_ARMOR     = 'Rnam'
    constant integer UPG_NAGA_ATTACK    = 'Rnat'
    constant integer UPG_NAGA_ABOLISH   = 'Rnsi'
    constant integer UPG_SIREN          = 'Rnsw'
    constant integer UPG_NAGA_ENSNARE   = 'Rnen'


    //--------------------------------------------------------------------
    constant integer M1                 =    60
    constant integer M2                 =  2*60
    constant integer M3                 =  3*60
    constant integer M4                 =  4*60
    constant integer M5                 =  5*60
    constant integer M6                 =  6*60
    constant integer M7                 =  7*60
    constant integer M8                 =  8*60
    constant integer M9                 =  9*60
    constant integer M10                = 10*60
    constant integer M11                = 11*60
    constant integer M12                = 12*60
    constant integer M13                = 13*60
    constant integer M14                = 14*60
    constant integer M15                = 15*60

    constant integer EASY               = 1
    constant integer NORMAL             = 2
    constant integer HARD               = 3
    constant integer INSANE             = 4 // not used

    constant integer MELEE_NEWBIE       = 1
    constant integer MELEE_NORMAL       = 2
    constant integer MELEE_INSANE       = 3

    constant integer ATTACK_CAPTAIN     = 1
    constant integer DEFENSE_CAPTAIN    = 2
    constant integer BOTH_CAPTAINS      = 3

    constant integer BUILD_UNIT         = 1
    constant integer BUILD_UPGRADE      = 2
    constant integer BUILD_EXPAND       = 3

    constant integer UPKEEP_TIER1       = 50
    constant integer UPKEEP_TIER2       = 80

    //--------------------------------------------------------------------

    player  ai_player

    integer sleep_seconds
    integer total_gold              = 0
    integer total_wood              = 0
    integer gold_buffer             = 0 // usually for potion money
    integer difficulty              = NORMAL
    integer exp_seen                = 0
    integer racial_farm             = 'hhou'
    integer hero_id                 = 'Hamg'
    integer hero_id2                = 'Hmkg'
    integer hero_id3                = 'Hpal'
    integer array skill
    integer array skills1
    integer array skills2
    integer array skills3
    integer max_hero_level          = 0

    integer array harass_qty
    integer array harass_max
    integer array harass_units
    integer harass_length           = 0

    integer array defense_qty
    integer array defense_units
    integer defense_length          = 0

    integer array build_qty
    integer array build_type
    integer array build_item
    integer array build_town
    integer build_length            = 0

    integer campaign_gold_peons     = 5
    integer campaign_wood_peons     = 3
    integer campaign_basics_speed   = 5

    integer min_creeps              = -1
    integer max_creeps              = -1

    boolean harvest_town1           = true
    boolean harvest_town2           = true
    boolean harvest_town3           = true
    boolean do_campaign_farms       = true
    boolean two_heroes              = false
    boolean allow_air_creeps        = false
    boolean take_exp                = false
    boolean allow_signal_abort      = false
    boolean ready_for_zeppelin      = true
    boolean get_zeppelin            = false

    boolean build_campaign_attackers = true

    boolean do_debug_cheats         = false
    boolean trace_on                = true
    boolean zep_next_wave           = false
    boolean form_group_timeouts     = true
    
    // World of Warcraft Reforged

    // Human
    constant integer HUMAN_CITIZEN_MALE                              = 'n00E'
    constant integer HUMAN_CITIZEN_FEMALE                            = 'n00F'
    constant integer HUMAN_HOUSING                                   = 'h00R'

    constant integer HUMAN_SHIPYARD                                  = 'h010'
    constant integer HUMAN_TRANSPORT_SHIP                            = 'hbot'
    constant integer HUMAN_BATTLESHIP                                = 'hbsh'
    constant integer HUMAN_FRIGATE                                   = 'hdes'

    constant integer UPG_HUMAN_BACKPACK                              = 'Rhpm'
    constant integer UPG_HUMAN_SUNDERING_BLADES                      = 'Rhsb'
    constant integer UPG_HUMAN_FLARE                                 = 'Rhfl'
    constant integer UPG_HUMAN_ARCANE_OBSERVATORY                    = 'R022' // special building

    constant integer HUMAN_ARCANE_OBSERVATORY                        = 'h01Q' // special building

    // Orc
    constant integer UPG_FEL                                         = 'R01Y' // special building

    constant integer ORC_CITIZEN_MALE                                = 'n00I'
    constant integer ORC_CITIZEN_FEMALE                              = 'n00J'
    constant integer ORC_HOUSING                                     = 'h00V'

    constant integer ORC_SHIPYARD                                    = 'o009'
    constant integer ORC_TRANSPORT_SHIP                              = 'obot'
    constant integer ORC_JUGGERNAUGHT                                = 'ojgn'
    constant integer ORC_FRIGATE                                     = 'odes'

    constant integer FOUNTAIN_OF_BLOOD                               = 'o00F' // special building
    constant integer FEL_DRAGON_ROOST                                = 'ndrb'

    // Undead
    constant integer UNDEAD_CITIZEN_MALE                             = 'n00G'
    constant integer UNDEAD_CITIZEN_FEMALE                           = 'n00H'
    constant integer UNDEAD_HOUSING                                  = 'h00U'

    constant integer UNDEAD_SHIPYARD                                 = 'u00K'
    constant integer UNDEAD_TRANSPORT_SHIP                           = 'ubot'
    constant integer UNDEAD_BATTLESHIP                               = 'uubs'
    constant integer UNDEAD_FRIGATE                                  = 'udes'

    constant integer UPG_UNDEAD_LICH_KING                            = 'R020' // special building

    constant integer UNDEAD_LICH_KING                                = 'n037' // special building

    // Night ELF
    constant integer ELF_CITIZEN_MALE                                = 'n00O'
    constant integer ELF_CITIZEN_FEMALE                              = 'n00P'
    constant integer ELF_HOUSING                                     = 'e016'

    constant integer ELF_SHIPYARD                                    = 'e009'
    constant integer ELF_TRANSPORT_SHIP                              = 'etrs'
    constant integer ELF_BATTLESHIP                                  = 'ebsh'
    constant integer ELF_FRIGATE                                     = 'edes'

    constant integer UPG_ELF_WORLD_TREE                              = 'R01Z'

    constant integer ELF_WORLD_TREE                                  = 'o00G' // special building

    // Blood Elf
    constant integer BLOOD_ELF_TOWN_HALL                             = 'h009' // town hall    
    constant integer BLOOD_ELF_KEEP                                  = 'h00A' // keep
    constant integer BLOOD_ELF_CASTLE                                = 'h00B' // castle
    constant integer BLOOD_ELF_SCOUT_TOWER                           = 'h00I' // tower
    constant integer BLOOD_ELF_ARCANE_SACNTUM                        = 'h00E' // arcane
    constant integer BLOOD_ELF_ALTAR                                 = 'h0GH' // altar
    constant integer BLOOD_ELF_FARM                                  = 'h0GI' // farm
    constant integer BLOOD_ELF_ARCANE_VAULT                          = 'h00H' // shop
    constant integer BLOOD_ELF_BARRACKS                              = 'h00C' // barracks
    constant integer BLOOD_ELF_BLACK_SMITH                           = 'h00D' // blacksmith
    constant integer BLOOD_ELF_LUMBER_MILL                           = 'h00F' // lumber mill
    constant integer BLOOD_ELF_WORKSHOP                              = 'h013' // workshop
    constant integer BLOOD_ELF_PHOENIX_EGG                           = 'h04P' // aviary
    constant integer BLOOD_ELF_MAGIC_VAULT                           = 'n038' // special building

    constant integer UPG_BLOOD_ELF_BACKPACK                          = 'R0DY'
    constant integer UPG_BLOOD_ELF_BREEDING                          = 'R000'
    constant integer UPG_BLOOD_ELF_BOWS                              = 'R009'
    constant integer UPG_BLOOD_ELF_WOOD                              = 'R006'
    constant integer UPG_BLOOD_ELF_MASONRY                           = 'R003'
    constant integer UPG_BLOOD_ELF_MELEE                             = 'R001'
    constant integer UPG_BLOOD_ELF_ARMOR                             = 'R002'
    constant integer UPG_BLOOD_ELF_MARKSMAN                          = 'R00A'
    constant integer UPG_BLOOD_ELF_MOON_ARMOR                        = 'R004'
    constant integer UPG_BLOOD_ELF_PRAYING                           = 'R007'
    constant integer UPG_BLOOD_ELF_STR_MOON                          = 'R008'
    constant integer UPG_BLOOD_ELF_LEATHER                           = 'R005'
    constant integer UPG_BLOOD_ELF_BURNING_OIL                       = 'R00Y'
    constant integer UPG_BLOOD_ELF_IMPROVED_SIEGE                    = 'R00Z'
    constant integer UPG_BLOOD_ELF_CONT_MAGIC                        = 'R04A'
    constant integer UPG_BLOOD_ELF_CLOUD                             = 'R04B'
    constant integer UPG_BLOOD_ELF_SIPHON_MANA                       = 'R09M'
    constant integer UPG_BLOOD_ELF_MAGIC_VAULT                       = 'R021' // special building

    constant integer BLOOD_ELF_SORCERESS                             = 'h0QL'
    constant integer BLOOD_ELF_PRIEST                                = 'h00G'
    constant integer BLOOD_ELF_LIEUTENANT                            = 'nbel'
    constant integer BLOOD_ELF_WAGON                                 = 'h012'
    constant integer BLOOD_ELF_BALLISTA                              = 'e00C'
    constant integer BLOOD_ELF_CAGE                                  = 'e00D'
    constant integer BLOOD_ELF_DRAGON_HAWK                           = 'h04M'
    constant integer BLOOD_ELF_SPELL_BREAKER                         = 'h04N'
    constant integer BLOOD_ELF_PHOENIX                               = 'h04O'
    constant integer BLOOD_ELF_DECIMATOR                             = 'h0KI'

    constant integer BLOOD_ELF_CITIZEN_MALE                          = 'n00K'
    constant integer BLOOD_ELF_CITIZEN_FEMALE                        = 'n00L'
    constant integer BLOOD_ELF_HOUSING                               = 'h00T'

    // Naga
    constant integer NAGA_TEMPLE_1                                   = 'n05M'
    constant integer NAGA_TEMPLE_3                                   = 'n05N'
    constant integer NAGA_MURLOC_HUT                                 = 'o008' // lumber mill and blacksmith
    constant integer NAGA_FISH_MARKET                                = 'h00X' // shop
    constant integer NAGA_TREASURY_OF_THE_TIDES                      = NAGA_FISH_MARKET
    constant integer NAGA_SERPENT_PYRAMID                            = 'n05P'
    constant integer NAGA_STATUE_OF_ASZHARA                          = 'o00I' // special building

    constant integer UPG_NAGA_SUBMERGE                               = 'Rnsb'
    constant integer UPG_NAGA_BACKPACK                               = 'R01E'
    constant integer UPG_STATUE_OF_AZSHARA                           = 'R02B' // special building

    constant integer NAGA_CITIZEN_MALE                               = 'n00M'
    constant integer NAGA_CITIZEN_FEMALE                             = 'n00N'
    constant integer NAGA_HOUSING                                    = 'h00Q'

    // Demon
    constant integer DEMON_GATE_1                                    = 'u005' // tier 1
    constant integer DEMON_GATE_2                                    = 'u00E' // tier 2
    constant integer DEMON_GATE_3                                    = 'u00F' // tier 3
    constant integer DEMON_FORTIFIED_INFERNAL_JUGGERNAUT             = 'u00H' // watch tower and farm
    constant integer DEMON_FORTIFIED_INFERNAL_MACHINE                = 'u007' // farm
    constant integer DEMON_ALTAR                                     = 'u008'
    constant integer DEMON_DIMENSIONAL_GATE                          = 'u00A' // barracks
    constant integer DEMON_DUNGEON_OF_PAIN                           = 'u00C' // sanctum/damned temple
    constant integer DEMON_FLOATING_ROCKS                            = 'u009' // lumber will and blacksmith
    constant integer DEMON_OBELISK                                   = 'u00G' // shop
    constant integer DEMON_PORTAL                                    = 'u00B' // slaughterhouse/barracks for stronger units at tier 2
    constant integer DEMON_SHRINE                                    = 'u00D' // totem/strong units at tier 3
    constant integer DEMON_LEGION_TRANSPORTER                        = 'u019'
    constant integer DEMON_SACRIFICAL_PIT                            = 'u01A'
    constant integer DEMON_BOOK_OF_SUMMONING                         = 'n039' // special building
    constant integer DEMON_OUTLAND_DIMENSIONAL_GATE                  = 'o00H' // special building

    constant integer DEMON_IMP                                       = 'u006' // worker
    constant integer DEMON_OVERLORD                                  = 'n01A' // ghoul
    constant integer DEMON_FEL_STALKER                               = 'n019' // pit fiend
    constant integer DEMON_NETHER_DRAKE                              = 'n01B' // gargoyle
    constant integer DEMON_INFERNAL_MACHINE                          = 'n01C' // meat wagon
    constant integer DEMON_GREATER_VOID_WALKER                       = 'n01E' // obsidian statue
    constant integer DEMON_EREDAR_SORCERER                           = 'n014' // necromancer
    constant integer DEMON_SUCCUBUS                                  = 'n015' // banshee
    constant integer DEMON_INFERNAL                                  = 'n012' // frost wyrm/tauren
    constant integer DEMON_INFERNAL_REAVER                           = 'n07R'
    constant integer DEMON_VOID_REAVER                               = 'n07S'
    constant integer DEMON_FEL_REAVER                                = 'n07Q'
    constant integer DEMON_JAILER                                    = 'n08O'
    constant integer DEMON_INQUISITOR                                = 'n08P'
    constant integer DEMON_LEGION_SHIP                               = 'u01M'

    constant integer UPG_DEMON_UNHOLY_STR                            = 'R00H'
    constant integer UPG_DEMON_UNHOLY_ARMOR                          = 'R00R'
    constant integer UPG_DEMON_CR_ATTACK                             = 'R00S'
    constant integer UPG_DEMON_CR_ARMOR                              = 'R00T'
    constant integer UPG_DEMON_WEB                                   = 'R00I'
    constant integer UPG_DEMON_CLEAVING_ATTACK                       = 'R00L'
    constant integer UPG_DEMON_DEVOUR_MAGIC                          = 'R00J'
    constant integer UPG_DEMON_FIRE                                  = 'R00M'
    constant integer UPG_DEMON_RAIN_OF_FIRE                          = 'R00P'
    constant integer UPG_DEMON_DEFEND                                = 'R00N'
    constant integer UPG_DEMON_CRIPPLE                               = 'R00O'
    constant integer UPG_DEMON_SLOW                                  = 'R00Q'
    constant integer UPG_DEMON_SUCCUBUS                              = 'R00F'
    constant integer UPG_DEMON_EREDAR_SORCERER                       = 'R00E'
    constant integer UPG_DEMON_RESISTANT_SKIN                        = 'R00D'
    constant integer UPG_DEMON_PERMANENT_IMMOLATION                  = 'R00C'
    constant integer UPG_DEMON_HARDENED_SKIN                         = 'R00K'
    constant integer UPG_DEMON_WAR_STOMP                             = 'R06D'
    constant integer UPG_DEMON_IMPROVED_DEVOUR                       = 'R06F'
    constant integer UPG_DEMON_ANTI_MAGIC_SHELL                      = 'R06G'
    constant integer UPG_DEMON_SOUL_THEFT                            = 'R08Y'
    constant integer UPG_DEMON_SPACE_TRAVEL                          = 'R093'
    constant integer UPG_DEMON_FEL_TRANSPORTING                      = 'R06E'
    constant integer UPG_DEMON_BACKPACK                              = 'R00G'
    constant integer UPG_DEMON_BOOK_OF_SUMMONING                     = 'R023' // special building
    constant integer UPG_DEMON_OUTLAND_DIMENSIONAL_GATE              = 'R02A' // special building

    constant integer DEMON_CITIZEN_MALE                              = 'n016'
    constant integer DEMON_CITIZEN_FEMALE                            = 'n017'
    constant integer DEMON_HOUSING                                   = 'h00Y'

    // Draenei
    constant integer DRAENEI_HAVEN                                   = 'ndh2' // tier 1 - 3
    constant integer DRAENEI_BARRACKS                                = 'ndh3'
    constant integer DRAENEI_SEERS_DEN                               = 'ndh4'
    constant integer DRAENEI_ALTAR_OF_SEERS                          = 'o052'
    constant integer DRAENEI_HUT                                     = 'o053'
    constant integer DRAENEI_SHOP                                    = 'n01N'
    constant integer DRAENEI_BOULDER_TOWER                           = 'nbt1'
    constant integer DRAENEI_ADVANCED_BOULDER_TOWER                  = 'nbt2'
    constant integer DRAENEI_PRISON                                  = 'o00K'

    constant integer DRAENEI_LABORER                                 = 'ndrl' // worker
    constant integer DRAENEI_VINDICATOR                              = 'ndrn' // footman
    constant integer DRAENEI_STALKER                                 = 'ndrt' // knight
    constant integer DRAENEI_SALAMANDER                              = 'n01W' // pit fiend
    constant integer DRAENEI_SEER                                    = 'n01U' // priest
    constant integer DRAENEI_HARBINGER                               = 'n01V' // sorceress
    constant integer DRAENEI_DEMOLISHER                              = 'ncat' // mortar
    constant integer DRAENEI_NETHER_DRAKE                            = 'n01Q' // gryphon

    constant integer UPG_DRAENEI_DEVOUR                              = 'R018'
    constant integer UPG_DRAENEI_DEMON_FIRE                          = 'R017'
    constant integer UPG_DRAENEI_HARBRINGER_ADEPT                    = 'R015'
    constant integer UPG_DRAENEI_SEER_ADEPT                          = 'R014'
    constant integer UPG_DRAENEI_IMPROVED_MASONRY                    = 'R016'
    constant integer UPG_DRAENEI_STEEL_ARMOR                         = 'R013'
    constant integer UPG_DRAENEI_STEEL_MELEE_WEAPONS                 = 'R011'
    constant integer UPG_DRAENEI_STEEL_RANGED_WEAPONS                = 'R012'
    constant integer UPG_DRAENEI_PRISON                              = 'R0D2'

    constant integer DRAENEI_CITIZEN_MALE                            = 'n01L'
    constant integer DRAENEI_CITIZEN_FEMALE                          = 'n01M'
    constant integer DRAENEI_HOUSING                                 = 'h011'

    // Furbolg
    constant integer FURBOLG_TRIBAL_CENTER                           = 'n026' // tier 1-3
    constant integer FURBOLG_BARRACKS                                = 'n027' // barracks
    constant integer FURBOLG_DEFILED_FOUNTAIN                        = 'n02B' // sanctum/damned temple
    constant integer FURBOLG_LUMBER_CAMP                             = 'h017' // lumber will and blacksmith
    constant integer FURBOLG_MARKETPLACE                             = 'u00Q' // shop
    constant integer FURBOLG_WOLVES_CAGE                             = 'n02C' // slaughterhouse/barracks for stronger units at tier 2
    constant integer FURBOLG_POLAR_HUT                               = 'n02D' // totem/strong units at tier 3
    constant integer FURBOLG_GREEN_DRAGON_ROOST                      = 'n02R' // totem/strong units at tier 3
    constant integer FURBOLG_HUT                                     = 'n028' // farm
    constant integer GUARDING_FURBOLG                                = 'h016' // tower
    constant integer RESURRECTION_STONE                              = 'h01R' // altar
    constant integer FURBOLG_CORRUPTED_ANCIENT_PROTECTOR             = 'o00J' // special building

    constant integer YOUNG_FURBOLG                                   = 'h01M' // worker
    constant integer FURBOLG_EX                                      = 'n02E'
    constant integer FURBOLG_CHAMPION_EX                             = 'n02F'
    constant integer FURBOLG_ELDER_SHAMAN                            = 'n02G'
    constant integer FURBOLG_SHAMAN_EX                               = 'n02H'
    constant integer FURBOLG_TRACKER_EX                              = 'n02I'
    constant integer FURBOLG_URSA_WARRIOR                            = 'n02J' // tauren
    constant integer GREEN_DRAKE                                     = 'n02S' // frost wyrm
    constant integer POLAR_FURBOLG                                   = 'n02K'
    constant integer POLAR_FURBOLG_CHAMPION                          = 'n02L'
    constant integer TIMBER_WOLF                                     = 'n02O'
    constant integer GIANT_WOLF                                      = 'n02M'
    constant integer DIRE_WOLF                                       = 'n02N'

    constant integer CORRUPTED_FURBOLG                               = 'n02P'

    constant integer UPG_FURBOLG_WEB                                 = 'R01Q'
    constant integer UPG_FURBOLG_STEEL_RWEAPONS                      = 'R01G'
    constant integer UPG_FURBOLG_STEEL_WEAPONS                       = 'R01F'
    constant integer UPG_FURBOLG_STEEL_ARMOR                         = 'R01H'
    constant integer UPG_FURBOLG_LUMBER                              = 'R01S'
    constant integer UPG_FURBOLG_SHAMAN                              = 'R01K'
    constant integer UPG_FURBOLG_ELDER_SHAMAN                        = 'R01L'
    constant integer UPG_FURBOLG_FAERIE_FIRE                         = 'R01N'
    constant integer UPG_FURBOLG_ENSNARE                             = 'R01M'
    constant integer UPG_FURBOLG_CR_ARMOR                            = 'R01J'
    constant integer UPG_FURBOLG_CR_ATTACK                           = 'R01I'
    constant integer UPG_FURBOLG_CORRUPTION                          = 'R01R'
    constant integer UPG_FURBOLG_BLOOD_LUST                          = 'R01O'
    constant integer UPG_FURBOLG_BASH                                = 'R01P'
    constant integer UPG_FURBOLG_BACKPACK                            = 'R01D'
    constant integer UPG_FURBOLG_CORRUPTED_ANCIENT_PROTECTOR         = 'R02C'

    constant integer FURBOLG_CITIZEN_MALE                            = 'n029'
    constant integer FURBOLG_CITIZEN_FEMALE                          = 'n02A'
    constant integer FURBOLG_HOUSING                                 = 'h015'

    // Goblin
    constant integer GOBLIN_TIER_1                                   = 'o00O' // tier 1
    constant integer GOBLIN_TIER_2                                   = 'o022' // tier 2
    constant integer GOBLIN_TIER_3                                   = 'o023' // tier 3
    constant integer GOBLIN_BARRACKS                                 = 'o011' // barracks
    constant integer GOBLIN_ARCANE_LABORATORY                        = 'o014' // sanctum/damned temple
    constant integer GOBLIN_FUEL_PUMP                                = 'o00S' // lumber will and blacksmith
    constant integer GOBLIN_SHOP                                     = 'o01A' // shop
    constant integer GOBLIN_TANK_FACTORY                             = 'o00Z' // slaughterhouse/barracks for stronger units at tier 2
    constant integer GOBLIN_AIR_FIELD                                = 'o00R' // totem/strong units at tier 3
    constant integer GOBLIN_HUT                                      = 'o019' // farm
    constant integer GOBLIN_TOWER                                    = 'o00U' // tower
    constant integer GOBLIN_ROCKET_TOWER_1                           = 'o00W' // tower 1
    constant integer GOBLIN_ROCKET_TOWER_2                           = 'o00X' // tower 2
    constant integer GOBLIN_ROCKET_TOWER_3                           = 'o00Y' // tower 3
    constant integer GOBLIN_ALTAR                                    = 'o00T' // altar
    constant integer GOBLIN_HEAVY_TANK                               = 'o01G' // special building

    constant integer GOBLIN_LABORER                                  = 'h02L' // worker
    constant integer GOBLIN_SHREDDER                                 = 'n03W' // lumber worker
    constant integer GOBLIN_FLAMETHROWER                             = 'o013'
    constant integer GOBLIN_FLAME_TANK                               = 'h02D'
    constant integer GOBLIN_MAGE                                     = 'o010'
    constant integer GOBLIN_SORCERESS                                = 'o012'
    constant integer GOBLIN_FLAME_SHREDDER                           = 'o00V'
    constant integer GOBLIN_ASSAULT_TANK                             = 'h02F'
    constant integer GOBLIN_WAR_ZEPPELIN                             = 'n03T' // frost wyrm
    constant integer GOBLIN_AIR_DRONE                                = 'h02G'
    constant integer GOBLIN_SAPPER                                   = 'n03V'
    constant integer OGRE_GOBLIN_SQUAD                               = 'o01C'
    constant integer GOBLIN_EMPEROR                                  = 'h02E' // tauren
    constant integer GOBLIN_STEAM_ROLLER                             = 'h02K' // Obsidian Statue

    constant integer UPG_GOBLIN_STEEL_RWEAPONS                       = 'R033'
    constant integer UPG_GOBLIN_STEEL_WEAPONS                        = 'R02M'
    constant integer UPG_GOBLIN_STEEL_ARMOR                          = 'R031'
    constant integer UPG_GOBLIN_ALCHEMIST_ADEPT                      = 'R036'
    constant integer UPG_GOBLIN_MAGE_ADEPT                           = 'R037'
    constant integer UPG_GOBLIN_SORCERESS_ADEPT                      = 'R038'
    constant integer UPG_GOBLIN_AIR_SUPPLIES                         = 'R02H'
    constant integer UPG_GOBLIN_BARRAGE                              = 'R02N'
    constant integer UPG_GOBLIN_CHEMISTRY                            = 'R02L'
    constant integer UPG_GOBLIN_CLUSTER_ROCKETS                      = 'R02Y'
    constant integer UPG_GOBLIN_CUT_DOWN_TREES                       = 'R039'
    constant integer UPG_GOBLIN_DEMOLISH                             = 'R02R'
    constant integer UPG_GOBLIN_ENGINEERING                          = 'R02S'
    constant integer UPG_GOBLIN_EXPLOSIVE_BARREL                     = 'R02W'
    constant integer UPG_GOBLIN_EXPLOSIVES                           = 'R02J'
    constant integer UPG_GOBLIN_FLAME_GRENADES                       = 'R02T'
    constant integer UPG_GOBLIN_BURNING_OIL                          = 'R04P'
    constant integer UPG_GOBLIN_FUEL                                 = 'R02Q'
    constant integer UPG_GOBLIN_WAR_ZEPPELIN_BOMBS                   = 'R034'
    constant integer UPG_GOBLIN_IMPROVED_CONSTRUCTION                = 'R030'
    constant integer UPG_GOBLIN_MOBILE_TURRET                        = 'R02U'
    constant integer UPG_GOBLIN_OBSERVATORY                          = 'R02I'
    constant integer UPG_GOBLIN_OIL_DRILLING                         = 'R02V'
    constant integer UPG_GOBLIN_REPAIR                               = 'R02K'
    constant integer UPG_GOBLIN_BANKING                              = 'R02P'
    constant integer UPG_GOBLIN_LUMBER                               = 'R02O'
    constant integer UPG_GOBLIN_BACKPACK                             = 'R02G'

    constant integer GOBLIN_CITIZEN_MALE                             = 'n03Y'
    constant integer GOBLIN_CITIZEN_FEMALE                           = 'n03Z'
    constant integer GOBLIN_HOUSING                                  = 'h02H'

    // Dwarf
    constant integer DWARF_TIER_1                                    = 'h02R' // tier 1
    constant integer DWARF_TIER_2                                    = 'h030' // tier 2
    constant integer DWARF_TIER_3                                    = 'h031' // tier 3
    constant integer DWARF_BARRACKS                                  = 'h02V' // barracks
    constant integer DWARF_MYSTICAL_HALL                             = 'h037' // sanctum/damned temple
    constant integer DWARF_BLACKSMITH                                = 'h02X' // lumber will and blacksmith
    constant integer DWARF_TAVERN                                    = 'h03E' // shop
    constant integer DWARF_WORKSHOP                                  = 'h032' // slaughterhouse/barracks for stronger units at tier 2
    constant integer DWARF_BEASTIARY                                 = 'h02Z' // totem/strong units at tier 3
    constant integer DWARF_HOUSE                                     = 'h036' // farm
    constant integer DWARF_TOWER                                     = 'h039' // tower
    constant integer DWARF_TOWER_GUN                                 = 'h03B' // tower 1
    constant integer DWARF_TOWER_GUARD                               = 'h03C' // tower 2
    constant integer DWARF_TOWER_CANNON                              = 'h03D' // tower 3
    constant integer DWARF_ALTAR                                     = 'h033' // altar
    constant integer DWARF_LUMBER_MILL                               = 'n04Z' // special building
    constant integer DWARF_MINE                                      = 'u011'

    constant integer DWARF_MINER                                     = 'h02Q' // worker
    constant integer DWARF_TROLL_SLAYER                              = 'h02U'
    constant integer DWARF_RIFLEMAN                                  = 'h02W'
    constant integer DWARF_BATTLEPRIEST                              = 'h03A'
    constant integer DWARF_RUNECASTER                                = 'o01L'
    constant integer DWARF_RIDER                                     = 'h02Y' // knight
    constant integer DWARF_MORTAR                                    = 'h03H'
    constant integer DWARF_POLAR_BEAR                                = 'n04T' // tauren
    constant integer DWARF_GRYPHON_RIDER                             = 'h035'
    constant integer DWARF_GRYPHON                                   = 'n04U'
    constant integer DWARF_FLYING_MACHINE                            = 'h03I'
    constant integer DWARF_SIEGE_ENGINE                              = 'h03G'
    constant integer DWARF_STEAM_FORTRESS                            = 'h03F'

    constant integer UPG_DWARF_RANGED                                = 'R043'
    constant integer UPG_DWARF_MELEE                                 = 'R040'
    constant integer UPG_DWARF_ARMOR                                 = 'R041'
    constant integer UPG_DWARF_LEATHER                               = 'R042'
    constant integer UPG_DWARF_BATTLEPRIEST_ADEPT                    = 'R03U'
    constant integer UPG_DWARF_RUNECASTER_ADEPT                      = 'R03T'
    constant integer UPG_DWARF_BERSERK                               = 'R03N'
    constant integer UPG_DWARF_SLAM                                  = 'R03K'
    constant integer UPG_DWARF_SLEEP_FORM                            = 'R03V'
    constant integer UPG_DWARF_ANIMAL_WAR_TRAINING                   = 'R044'
    constant integer UPG_DWARF_BARRAGE                               = 'R03P'
    constant integer UPG_DWARF_BREEDING                              = 'R03I'
    constant integer UPG_DWARF_DEVOUR                                = 'R03L'
    constant integer UPG_DWARF_ELITE_SIEGE_TANK                      = 'R03Q'
    constant integer UPG_DWARF_FLAK_CANNONS                          = 'R03W'
    constant integer UPG_DWARF_FLARE                                 = 'R03Z'
    constant integer UPG_DWARF_MITHRIL                               = 'R03O'
    constant integer UPG_DWARF_POLAR_BEAR_BOMBS                      = 'R034'
    constant integer UPG_DWARF_FLYING_MACHINE_BOMBS                  = 'R03X'
    constant integer UPG_DWARF_FRAGMENTATION_SHARDS                  = 'R03Y'
    constant integer UPG_DWARF_LONG_RIFLES                           = 'R03M'
    constant integer UPG_DWARF_STORM_HAMMERS                         = 'R045'
    constant integer UPG_DWARF_MASONRY                               = 'R03R'
    constant integer UPG_DWARF_LUMBER_MILL                           = 'R03J'
    constant integer UPG_DWARF_LUMBER                                = 'R03S'
    constant integer UPG_DWARF_BACKPACK                              = 'R03H'

    constant integer DWARF_CITIZEN_MALE                              = 'n04S'
    constant integer DWARF_CITIZEN_FEMALE                            = 'n050'
    constant integer DWARF_HOUSING                                   = 'h02S'

    // High Elf
    constant integer HIGH_ELF_TIER_1                                 = 'h040' // tier 1
    constant integer HIGH_ELF_TIER_2                                 = 'h03Z' // tier 2
    constant integer HIGH_ELF_TIER_3                                 = 'h041' // tier 3
    constant integer HIGH_ELF_OUTPOST                                = 'h04G' // scout tower
    constant integer HIGH_ELF_GUARD_TOWER                            = 'n05I' // guard tower
    constant integer HIGH_ELF_FARM                                   = 'h04B' // farm
    constant integer HIGH_ELF_MAGE_TOWER                             = 'h043' // arcane
    constant integer HIGH_ELF_ALTAR                                  = 'h042' // altar
    constant integer HIGH_ELF_BAZAAR                                 = 'h04D' // shop
    constant integer HIGH_ELF_BARRACKS                               = 'h044' // barracks
    constant integer HIGH_ELF_ENCHANTER_TOWER                        = 'h04I' // blacksmith/lumber mill
    constant integer HIGH_ELF_STABLES                                = 'h04F' // barracks 2/workshop
    constant integer HIGH_ELF_AVIARY                                 = 'h045' // aviary
    constant integer HIGH_ELF_DRAGON_NEXUS                           = 'h04J' // boneyard
    constant integer HIGH_ELF_SUNWELL                                = 'n05F' // special building

    constant integer UPG_HIGH_ELF_BOWS                               = 'R04G'
    constant integer UPG_HIGH_ELF_WOOD                               = 'R04H'
    constant integer UPG_HIGH_ELF_MASONRY                            = 'R04K'
    constant integer UPG_HIGH_ELF_MELEE                              = 'R04M'
    constant integer UPG_HIGH_ELF_ARMOR                              = 'R04N'
    constant integer UPG_HIGH_ELF_STR_MOON                           = 'R04Q'
    constant integer UPG_HIGH_ELF_LEATHER                            = 'R04O'
    constant integer UPG_HIGH_ELF_MARKSMAN                           = 'R04D'
    constant integer UPG_HIGH_ELF_PRAYING                            = 'R04J'
    constant integer UPG_HIGH_ELF_PRAYING_CLERIC                     = 'R04L'
    constant integer UPG_HIGH_ELF_ANIMAL                             = 'R04F'
    constant integer UPG_HIGH_ELF_ANTIMAGIC                          = 'R04C'
    constant integer UPG_HIGH_ELF_CLOUD                              = 'R04E'
    constant integer UPG_HIGH_ELF_TAMING                             = 'R04I'
    constant integer UPG_HIGH_ELF_BACKPACK                           = 'R048'
    constant integer UPG_HIGH_ELF_MAGIC_SENTRY                       = 'R049'
    constant integer UPG_HIGH_ELF_DRAGONHAWL_TAMING                  = 'R04R'
    constant integer UPG_HIGH_ELF_DIURNAL                            = 'R0D2'
    constant integer UPG_HIGH_ELF_SUNWELL                            = 'R047' // special building

    constant integer HIGH_ELF_ENGINEER                               = 'n05D' // worker
    constant integer HIGH_ELF_ARCHER                                 = 'n05G'
    constant integer HIGH_ELF_RANGER                                 = 'n05H'
    constant integer HIGH_ELF_SWORDMAN                               = 'h04A'
    constant integer HIGH_ELF_LIEUTENANT                             = 'h049'
    constant integer HIGH_ELF_PRIEST                                 = 'h047'
    constant integer HIGH_ELF_SORCERESS                              = 'h048'
    constant integer HIGH_ELF_BIRDIEPULT                             = 'e00N'
    constant integer HIGH_ELF_KNIGHT                                 = 'h04E'
    constant integer HIGH_ELF_EAGLE                                  = 'e00M'
    constant integer HIGH_ELF_DRAGON_HAWK                            = 'h046'
    constant integer HIGH_ELF_ARCH_CLERIC                            = 'h04C'
    constant integer HIGH_ELF_DRAGON                                 = 'n05L'

    constant integer HIGH_ELF_CITIZEN_MALE                           = 'n05E'
    constant integer HIGH_ELF_CITIZEN_FEMALE                         = 'n05J'
    constant integer HIGH_ELF_HOUSING                                = 'h04H'

    // Gnome
    constant integer GNOME_TIER_1                                    = 'h0JX'
    constant integer GNOME_TIER_2                                    = 'h0KB'
    constant integer GNOME_TIER_3                                    = 'h0KE'
    constant integer GNOME_GEAR                                      = 'h0KL' // farm
    constant integer GNOME_BRASSMAN                                  = 'e01G' // barracks
    constant integer GNOME_FACTORY                                   = 'h0KK' // forge/lumber mill
    constant integer GNOME_TURRET                                    = 'h0KH' // watch tower
    constant integer GNOME_AVIARY                                    = 'h0KN' // aviary
    constant integer GNOME_LABORATORY                                = 'h0NI' // sanctuary
    constant integer GNOME_WORKSHOP                                  = 'h0KS' // workshop
    constant integer GNOME_TELEPORTER                                = 'h0KT' // sacrifical pit
    constant integer GNOME_ALTAR_OF_TECHNOLOGY                       = 'h0QM' // altar
    constant integer GNOME_TECHNOLOGY_FAIR                           = 'h0QN' // shop

    constant integer UPG_GNOME_BACKPACK                              = 'R09O'
    constant integer UPG_GNOME_INVENTIONS                            = 'R09N'
    constant integer UPG_GNOME_ARCANIST                              = 'R0DH'
    constant integer UPG_GNOME_DAMAGE                                = 'R0E0'
    constant integer UPG_GNOME_ARMOR                                 = 'R0E1'
    constant integer UPG_GNOME_ENGINEERING                           = 'R0E2'
    constant integer UPG_GNOME_RESISTANT_SKIN                        = 'R0E3'

    constant integer GNOME_ENGINEER                                  = 'h0JY' // worker
    constant integer GNOME_RIFLEMAN                                  = 'h0KC' // rifleman
    constant integer GNOME_FIELD_ENGINEER                            = 'h0K8' // knight
    constant integer GNOME_ARTILLERY_TANK                            = 'h0KD' // demolisher
    constant integer GNOME_FLYING_MACHINE                            = 'h0KO'
    constant integer GNOME_GRYPHON_RIDER                             = 'h0KP'
    constant integer GNOME_HOVER_COPTER                              = 'h0KQ'
    constant integer GNOME_MORTAR_TEAM                               = 'h0KR'

    constant integer GNOME_CITIZEN_MALE                              = 'n0D0'
    constant integer GNOME_CITIZEN_FEMALE                            = 'n0D4'
    constant integer GNOME_HOUSING                                   = 'h04H'

    // Dalaran
    constant integer DALARAN_TIER_1                                  = 'h051' // tier 1
    constant integer DALARAN_TIER_2                                  = 'h099' // tier 2
    constant integer DALARAN_TIER_3                                  = 'h09A' // tier 3
    constant integer DALARAN_GUARD_TOWER_1                           = 'n085' // guard tower 1
    constant integer DALARAN_GUARD_TOWER_2                           = 'n08E' // guard tower 2
    constant integer DALARAN_POWER_GENERATOR                         = 'h053' // farm
    constant integer DALARAN_ARCANE_SANCTUM                          = 'h09N' // arcane
    constant integer DALARAN_ALTAR                                   = 'h09L' // altar
    constant integer DALARAN_SHOP                                    = 'h09M' // shop
    constant integer DALARAN_BARRACKS                                = 'h055' // barracks
    constant integer DALARAN_BLACKSMITH                              = 'h09P' // blacksmith/lumber mill
    constant integer DALARAN_ZOO                                     = 'h09O' // barracks 2/workshop
    constant integer DALARAN_AVIARY                                  = 'h0A0' // aviary
    constant integer DALARAN_ELEMENTAL_SANCTUARY_1                   = 'h09F' // boneyard 1
    constant integer DALARAN_ELEMENTAL_SANCTUARY_2                   = 'h09X' // boneyard 2
    constant integer DALARAN_VIOLET_CITADEL                          = 'h09J' // special building
    constant integer DALARAN_MINE                                    = 'u018' // goldmine

    constant integer UPG_DALARAN_GOLD                                = 'R063'
    constant integer UPG_DALARAN_MELEE                               = 'R069'
    constant integer UPG_DALARAN_ARMOR                               = 'R06A'
    constant integer UPG_DALARAN_CR_ATTACK                           = 'R06H'
    constant integer UPG_DALARAN_CR_ARMOR                            = 'R068'
    constant integer UPG_DALARAN_DEFEND                              = 'R05U'
    constant integer UPG_DALARAN_WIZARD                              = 'R05X'
    constant integer UPG_DALARAN_FIRE_MAGE                           = 'R065'
    constant integer UPG_DALARAN_GOLEM                               = 'R06N'
    constant integer UPG_DALARAN_ANIMAL                              = 'R066'
    constant integer UPG_DALARAN_CLOUD                               = 'R067'
    constant integer UPG_DALARAN_BACKPACK                            = 'R05T'
    constant integer UPG_DALARAN_MAGIC_SENTRY                        = 'R05W'
    constant integer UPG_DALARAN_BLINK                               = 'R05Y'
    constant integer UPG_DALARAN_MANA_SHIELD                         = 'R061'
    constant integer UPG_DALARAN_SPAWN_FIRE_ELEMENTALS               = 'R05Z'
    constant integer UPG_DALARAN_SHIELD                              = 'R05R'
    constant integer UPG_DALARAN_ELEMENTAL                           = 'R060'
    constant integer UPG_DALARAN_FEEDBACK                            = 'R05V'
    constant integer UPG_DALARAN_FLYING_CITY                         = 'R062'
    constant integer UPG_DALARAN_VIOLET_CITADEL                      = 'R05S' // special building

    constant integer DALARAN_WORKER                                  = 'h052' // worker
    constant integer DALARAN_PIKEMAN                                 = 'h09Q'
    constant integer DALARAN_APPRENTICE_WIZARD                       = 'n087'
    constant integer DALARAN_SUPPLY_CART                             = 'h09S'
    constant integer DALARAN_WIZARD                                  = 'n086'
    constant integer DALARAN_SORCERESS                               = 'h0A2'
    constant integer DALARAN_FIRE_MAGE                               = 'h09R'
    constant integer DALARAN_MUTANT                                  = 'n08D'
    constant integer DALARAN_REJECT                                  = 'n089'
    constant integer DALARAN_GUARDIAN_GOLEM                          = 'n08A'
    constant integer DALARAN_FLESH_GOLEM                             = 'n088'
    constant integer DALARAN_DRAGON_HAWK                             = 'h0A1'
    constant integer DALARAN_AIR_ELEMENTAL                           = 'h09U'
    constant integer DALARAN_FIRE_ELEMENTAL                          = 'h09I'
    constant integer DALARAN_FROST_ELEMENTAL                         = 'h09V'
    constant integer DALARAN_LIGHTNING_ELEMENTAL                     = 'h09K'
    constant integer DALARAN_POISON_ELEMENTAL                        = 'h09W'
    constant integer DALARAN_VOID_ELEMENTAL                          = 'h09Z'
    constant integer DALARAN_SAND_ELEMENTAL                          = 'h09G'
    constant integer DALARAN_WATER_ELEMENTAL                         = 'h09H'
    constant integer DALARAN_SEA_ELEMENTAL                           = 'n084'

    constant integer DALARAN_CITIZEN_MALE                            = 'n082'
    constant integer DALARAN_CITIZEN_FEMALE                          = 'n08B'
    constant integer DALARAN_HOUSING                                 = 'h09E'

    // Kul Tiras
    constant integer KULTIRAS_TIER_1                                 = 'h057' // tier 1
    constant integer KULTIRAS_TIER_2                                 = 'h05I' // tier 2
    constant integer KULTIRAS_TIER_3                                 = 'h05J' // tier 3
    constant integer KULTIRAS_WATCH_TOWER                            = 'h06H' // scout tower
    constant integer KULTIRAS_GUARD_TOWER                            = 'h06L' // guard tower
    constant integer KULTIRAS_CANNON_TOWER                           = 'h06M' // cannon tower
    constant integer KULTIRAS_ARCANE_TOWER                           = 'h06N' // arcane tower
    constant integer KULTIRAS_HOUSE                                  = 'h05B' // farm
    constant integer KULTIRAS_ARCANE_SANCTUM                         = 'h06G' // arcane
    constant integer KULTIRAS_ALTAR                                  = 'h05A' // altar
    constant integer KULTIRAS_SHOP                                   = 'h05Q' // shop
    constant integer KULTIRAS_BARRACKS_1                             = 'h05C' // barracks 1
    constant integer KULTIRAS_BARRACKS_2                             = 'h0BQ' // barracks 2
    constant integer KULTIRAS_LUMBER_MILL                            = 'h05P' // lumber mill
    constant integer KULTIRAS_BLACKSMITH                             = 'h05O' // blacksmith
    constant integer KULTIRAS_WORKSHOP                               = 'h05H' // workshop
    constant integer KULTIRAS_AVIARY                                 = 'h06I' // aviary
    constant integer KULTIRAS_CRANE                                  = 'o021' // citizens building on shallow water for extra resources
    constant integer KULTIRAS_PROUDMOORE_KEEP                        = 'h08Z' // special building

    constant integer UPG_KULTIRAS_LUMBER                             = 'R05M'
    constant integer UPG_KULTIRAS_MASONRY                            = 'R05N'
    constant integer UPG_KULTIRAS_MELEE                              = 'R06T'
    constant integer UPG_KULTIRAS_ARMOR                              = 'R06U'
    constant integer UPG_KULTIRAS_RANGED                             = 'R058'
    constant integer UPG_KULTIRAS_LEATHER                            = 'R06V'
    constant integer UPG_KULTIRAS_DEFEND                             = 'R06P'
    constant integer UPG_KULTIRAS_LONG_RIFLES                        = 'R058'
    constant integer UPG_KULTIRAS_BACKPACK                           = 'R06Z'
    constant integer UPG_KULTIRAS_TRUE_SIGHT                         = 'R06Y'
    constant integer UPG_KULTIRAS_SHIP_DOCTOR                        = 'R05K'
    constant integer UPG_KULTIRAS_SORCERER                           = 'R05J'
    constant integer UPG_KULTIRAS_HYDROMANCER                        = 'R05L'
    constant integer UPG_KULTIRAS_CLEAVING_ATTACK                    = 'R06R'
    constant integer UPG_KULTIRAS_SUNDERING_BLADES                   = 'R070'
    constant integer UPG_KULTIRAS_ANIMAL                             = 'R05O'
    constant integer UPG_KULTIRAS_DEVOUR                             = 'R06X'
    constant integer UPG_KULTIRAS_ENSNARE                            = 'R06Q'
    constant integer UPG_KULTIRAS_GHOSTS                             = 'R06O'
    constant integer UPG_KULTIRAS_MAGIC_SENTRY                       = 'R06S'
    constant integer UPG_KULTIRAS_LAND_CANNONS                       = 'R056'
    constant integer UPG_KULTIRAS_SHIP_CANNONS                       = 'R055'
    constant integer UPG_KULTIRAS_SHIPYARD_REPAIR                    = 'R059'
    constant integer UPG_KULTIRAS_TRANSPORTERS                       = 'R057'
    constant integer UPG_KULTIRAS_FRAGS                              = 'R071'
    constant integer UPG_KULTIRAS_FLARE                              = 'R072'
    constant integer UPG_KULTIRAS_PROUDMOORE_KEEP                    = 'R05I' // special building

    constant integer KULTIRAS_WORKER                                 = 'h058' // worker
    constant integer KULTIRAS_FOOTMAN                                = 'h054'
    constant integer KULTIRAS_RIFLEMAN                               = 'h05E'
    constant integer KULTIRAS_KNIGHT                                 = 'h05F'
    constant integer KULTIRAS_GUARDSMAN                              = 'h05D'
    constant integer KULTIRAS_FLIBUSTIER                             = 'h05L'
    constant integer KULTIRAS_FLIBUSTIER_GUN                         = 'h05M'
    constant integer KULTIRAS_ROYAL_GUARD                            = 'h0BP'
    constant integer KULTIRAS_CANONEER_TEAM                          = 'h00Z'
    constant integer KULTIRAS_STORM_SORCERER                         = 'h06K'
    constant integer KULTIRAS_SHIP_DOCTOR                            = 'h06J'
    constant integer KULTIRAS_HYDROMANCER                            = 'n06X'
    constant integer KULTIRAS_LAND_SHIP                              = 'h0BT'
    constant integer KULTIRAS_GUNSHIP                                = 'h0BR'
    constant integer KULTIRAS_WATER_DRAGON                           = 'n09O'
    constant integer KULTIRAS_PEREGRIN_FALCON                        = 'n09P'
    constant integer KULTIRAS_FLYING_DREADNOUGHT                     = 'h0BW'

    constant integer KULTIRAS_CITIZEN_MALE                           = 'n066'
    constant integer KULTIRAS_CITIZEN_FEMALE                         = 'n0BL'
    constant integer KULTIRAS_HOUSING                                = 'h090'

    // Lordaeron
    constant integer LORDAERON_TIER_1                                = 'h0LX'
    constant integer LORDAERON_TIER_2                                = 'h0MC'
    constant integer LORDAERON_TIER_3                                = 'h0MD'
    constant integer LORDAERON_ALTAR                                 = 'h0ME'
    constant integer LORDAERON_ARCANE_TOWER                          = 'h0NE'
    constant integer LORDAERON_BARRACKS                              = 'h0MH'
    constant integer LORDAERON_BLACKSMITH                            = 'h0MJ'
    constant integer LORDAERON_CANNON_TOWER                          = 'h0NC'
    constant integer LORDAERON_FARM                                  = 'h0MF'
    constant integer LORDAERON_AVIARY                                = 'h0MM'
    constant integer LORDAERON_GUARD_TOWER                           = 'h0ND'
    constant integer LORDAERON_LUMBER_MILL                           = 'h0MK'
    constant integer LORDAERON_SCOUT_TOWER                           = 'h0MN'
    constant integer LORDAERON_MAGE_TOWER                            = 'h0MP'
    constant integer LORDAERON_SCARLET_MONASTERY                     = 'h0N6'
    constant integer LORDAERON_TRADE_HOUSE                           = 'h0ML'
    constant integer LORDAERON_WORKSHOP                              = 'h0MO'

    constant integer UPG_LORDAERON_LUMBER                            = 'R0AH'
    constant integer UPG_LORDAERON_MASONRY                           = 'R0AI'
    constant integer UPG_LORDAERON_MELEE                             = 'R0AL'
    constant integer UPG_LORDAERON_ARMOR                             = 'R0AO'
    constant integer UPG_LORDAERON_RANGED                            = 'R0AP'
    constant integer UPG_LORDAERON_LEATHER                           = 'R0AQ'
    constant integer UPG_LORDAERON_DEFEND                            = 'R0AN'
    constant integer UPG_LORDAERON_LONG_RIFLES                       = 'R0AS'
    constant integer UPG_LORDAERON_BACKPACK                          = 'R0AG'
    constant integer UPG_LORDAERON_SORCERY                           = 'R0AX'
    constant integer UPG_LORDAERON_MAGE                              = 'R0AW'
    constant integer UPG_LORDAERON_RAIN_OF_FIRE                      = 'R0AY'
    constant integer UPG_LORDAERON_ANIMAL                            = 'R0AT'
    constant integer UPG_LORDAERON_CROSSBOWMEN                       = 'R0A6'
    constant integer UPG_LORDAERON_HUMAN_COURAGE                     = 'R0AZ'
    constant integer UPG_LORDAERON_ARCHERY                           = 'R0AM'
    constant integer UPG_LORDAERON_ENGINEERING                       = 'R0AR'
    constant integer UPG_LORDAERON_SCARLET_CRUSADE                   = 'R0AF'
    constant integer UPG_LORDAERON_SPEARMEN                          = 'R0A5'
    constant integer UPG_LORDAERON_SCARLET_MONASTERY                 = 'R0AD' // special building

    constant integer LORDAERON_WORKER                                = 'h0LY' // worker
    constant integer LORDAERON_AIR_SHIP                              = 'n0E2'
    constant integer LORDAERON_ALLIANCE_SIEGE_TOWER                  = 'h0OE'
    constant integer LORDAERON_ARCHER                                = 'n0DE'
    constant integer LORDAERON_BANNER_CARRIER                        = 'h0NA'
    constant integer LORDAERON_BATTLE_MAGE                           = 'h0N9'
    constant integer LORDAERON_CROSSBOWMAN                           = 'n0DI'
    constant integer LORDAERON_FOOTMAN                               = 'h0MV'
    constant integer LORDAERON_GRYPHON_RIDER                         = 'h0MS'
    constant integer LORDAERON_KNIGHT                                = 'h0MI'
    constant integer LORDAERON_MAGE                                  = 'h0MT'
    constant integer LORDAERON_PEGASUS_KNIGHT                        = 'h0MQ'
    constant integer LORDAERON_RIFLEMAN                              = 'h0N8'
    constant integer LORDAERON_SORCERESS                             = 'h0MU'
    constant integer LORDAERON_SPEARMAN                              = 'h0MR'
    constant integer LORDAERON_SCARLET_CRUSADE_PALADIN               = 'h0OK'

    constant integer LORDAERON_CITIZEN_MALE                          = 'n0DY'
    constant integer LORDAERON_CITIZEN_FEMALE                        = 'n0E0'
    constant integer LORDAERON_HOUSING                               = 'h0N7'

    // Pandaren
    constant integer PANDAREN_TIER_1                                 = 'h06D' // tier 1
    constant integer PANDAREN_TIER_2                                 = 'h0AC' // tier 2
    constant integer PANDAREN_TIER_3                                 = 'h0AD' // tier 3
    constant integer PANDAREN_SHELTER                                = 'h06R' // farm
    constant integer PANDAREN_ELEMENTAL_SANCTUARY                    = 'h0AB' // arcane
    constant integer PANDAREN_ALTAR                                  = 'h0A7' // altar
    constant integer PANDAREN_WAR_ACADEMY                            = 'h0AH' // barracks
    constant integer PANDAREN_LUMBER_MILL                            = 'h0AE' // lumber mill
    constant integer PANDAREN_WORKSHOP                               = 'h0A9' // workshop
    constant integer PANDAREN_STORM_SPIRE                            = 'h0AF' // aviary
    constant integer PANDAREN_BREWERY                                = 'h0QH' // shop
    constant integer PANDAREN_LANTERN                                = 'h06Q' // scout tower
    constant integer PANDAREN_ARCANE_LANTERN                         = 'h0QI' // arcane tower
    constant integer PANDAREN_JADE_FOREST                            = 'n0GQ' // special building
    constant integer PANDAREN_SHIPYARD                               = 'e01V'

    constant integer UPG_PANDAREN_MELEE                              = 'R0DJ'
    constant integer UPG_PANDAREN_ARMOR                              = 'R0DK'
    constant integer UPG_PANDAREN_DRINK                              = 'R0DM'
    constant integer UPG_PANDAREN_DEFEND                             = 'R06I'
    constant integer UPG_PANDAREN_IMPROVED_BOWS                      = 'R090'
    constant integer UPG_PANDAREN_BACKPACK                           = 'R08Z'
    constant integer UPG_PANDAREN_DRUNK_PANDA                        = 'R091'
    constant integer UPG_PANDAREN_DRUID                              = 'R092'
    constant integer UPG_PANDAREN_MONK                               = 'R0DL'
    constant integer UPG_PANDAREN_SAGE                               = 'R0DS'
    constant integer UPG_PANDAREN_BERSERK                            = 'R0DU'
    constant integer UPG_PANDAREN_CHAIN_LIGHTNING                    = 'R0DO'
    constant integer UPG_PANDAREN_CLOUD                              = 'R0DP'
    constant integer UPG_PANDAREN_COMMAND_AURA                       = 'R0DR'
    constant integer UPG_PANDAREN_FIREWORK                           = 'R0DN'
    constant integer UPG_PANDAREN_FRAGMENTATION_SHARDS               = 'R0DT'
    constant integer UPG_PANDAREN_HARDENED_SKIN                      = 'R0DV'
    constant integer UPG_PANDAREN_JADE_FOREST                        = 'R0DQ' // special building
    constant integer UPG_PANDAREN_MAGIC_SENTRY                       = 'R0DI'
    constant integer UPG_PANDAREN_SPIKED_SHELL                       = 'R0DW'

    constant integer PANDAREN_WOODCUTTER                             = 'h067' // worker
    constant integer PANDAREN_ARCHER                                 = 'h0B0'
    constant integer PANDAREN_HONORGUARD                             = 'h0B1'
    constant integer PANDAREN_WARLORD                                = 'h0AG'
    constant integer PANDAREN_SHAMAN                                 = 'o04N' // monk
    constant integer PANDAREN_SAGE                                   = 'h0AA'
    constant integer PANDAREN_DRUID                                  = 'e01E'
    constant integer PANDAREN_DRAGON_TURTLE                          = 'n0GO'
    constant integer PANDAREN_FIREWORK_TEAM                          = 'h0A8'
    constant integer PANDAREN_PRIMAL_PANDAREN                        = 'n0GR'
    constant integer PANDAREN_CLOUD_SERPENT                          = 'e01D'
    constant integer PANDAREN_GIANT_SEA_TURTLE                       = 'n0GS'

    constant integer PANDAREN_TRANSPORT_SHIP                         = 'e01W'
    constant integer PANDAREN_BATTLESHIP                             = 'e01X'

    constant integer PANDAREN_CITIZEN_MALE                           = 'n08M'
    constant integer PANDAREN_CITIZEN_FEMALE                         = 'n08N'
    constant integer PANDAREN_PET                                    = 'n0GP'
    constant integer PANDAREN_HOUSING                                = 'h0JU'

    // Troll
    constant integer TROLL_TIER_1                                    = 'o029'
    constant integer TROLL_TIER_2                                    = 'o02A'
    constant integer TROLL_TIER_3                                    = 'o02B'
    constant integer TROLL_HUT                                       = 'o02E' // farm
    constant integer TROLL_WAR_MILL                                  = 'o04V' // lumber mill
    constant integer TROLL_ALTAR_OF_BLOOD                            = 'o02P' // altar
    constant integer TROLL_SPIRIT_LODGE                              = 'o02F' // spirit lodge
    constant integer TROLL_ICE_TROLL_HUT                             = 'o04R' // tauren totem
    constant integer TROLL_BESTIARY                                  = 'o02I' // beastiary
    constant integer TROLL_WATCH_TOWER                               = 'o04X'
    constant integer TROLL_BARRACKS                                  = 'o02D' // barracks
    constant integer TROLL_VOODOO_LOUNGE                             = 'o04U' // shop
    constant integer TROLL_TEMPLE_OF_SACRIFICE                       = 'o050' // special building

    constant integer UPG_TROLL_SPEARS                                = 'R09E'
    constant integer UPG_TROLL_ARMOR                                 = 'R09H'
    constant integer UPG_TROLL_CREATURE_ATTACK                       = 'R09F'
    constant integer UPG_TROLL_CREATURE_ARMOR                        = 'R09G'
    constant integer UPG_TROLL_TROLL_REGENEARTION                    = 'R096'
    constant integer UPG_TROLL_ICE_TROLL_HIGH_PRIEST                 = 'R09A'
    constant integer UPG_TROLL_TRUESHOT_AURA                         = 'R098'
    constant integer UPG_TROLL_WAR_DRUMS                             = 'R09K'
    constant integer UPG_TROLL_TROLL_HEXER                           = 'R09I'
    constant integer UPG_TROLL_SHAMAN                                = 'R09J'
    constant integer UPG_TROLL_TROLL_WITCH_DOCTOR                    = 'R09B'
    constant integer UPG_TROLL_TROLL_BLOODMAGE                       = 'R09L'
    constant integer UPG_TROLL_TROLL_TRIBES                          = 'R094'
    constant integer UPG_TROLL_BERSERKER                             = 'R097'
    constant integer UPG_TROLL_LIQUID_FIRE                           = 'R095'
    constant integer UPG_TROLL_BACKPACK                              = 'R099'
    constant integer UPG_TROLL_TEMPLE_OF_SACRIFICE                   = 'R09C'

    constant integer TROLL_GATHERER                                  = 'o02C' // worker
    constant integer TROLL_MAN_HUNTER                                = 'o02H'
    constant integer TROLL_HEAD_HUNTER                               = 'o04T'
    constant integer TROLL_RIDER                                     = 'o04Q'
    constant integer TROLL_VOODOO_CANNONEER                          = 'o04Z' // demolisher
    constant integer TROLL_WITCH_DOCTOR                              = 'o04W'
    constant integer TROLL_SHAMAN                                    = 'o02G'
    constant integer TROLL_BATRIDER                                  = 'o04O'
    constant integer TROLL_BAT                                       = 'o02J'
    constant integer TROLL_THRONE_OF_WAR                             = 'o04S'
    constant integer TROLL_ICE_TROLL_HIGH_PRIEST                     = 'n07Z'
    constant integer TROLL_ICE_TROLL_WARLORD                         = 'n0CO'
    constant integer TROLL_BLOOD_MAGE                                = 'o02L'
    constant integer TROLL_HEXER                                     = 'o02K'

    constant integer TROLL_CITIZEN_MALE                              = 'n07X'
    constant integer TROLL_CITIZEN_FEMALE                            = 'n081'
    constant integer TROLL_HOUSING                                   = 'h098'

    // Tauren
    constant integer TAUREN_TIER_1                                    = 'o02M'
    constant integer TAUREN_TIER_2                                    = 'o037'
    constant integer TAUREN_TIER_3                                    = 'o038'
    constant integer TAUREN_TAUREN_BARRACKS                           = 'o03A'
    constant integer TAUREN_ALTAR                                     = 'o06D'
    constant integer TAUREN_LUMBER_MILL                               = 'o03B'
    constant integer TAUREN_SPIRIT_LODGE                              = 'o03H'
    constant integer TAUREN_SPIRIT_LOUNGE                             = 'o03F'
    constant integer TAUREN_TAUREN_TOTEM                              = 'o06K'
    constant integer TAUREN_TENT                                      = 'o039'
    constant integer TAUREN_TOTEM_POLE                                = 'o06P'
    constant integer TAUREN_WYVERN_ROOST                              = 'o03C'
    constant integer TAUREN_WATCH_TOWER                               = 'o03G'

    constant integer UPG_TAUREN_ARMOR                                 = 'R0DE'
    constant integer UPG_TAUREN_MELEE                                 = 'R0DF'
    constant integer UPG_TAUREN_RANGED                                = 'R0DG'
    constant integer UPG_TAUREN_BACKPACK                              = 'R0D5'
    constant integer UPG_TAUREN_EARTH_MOTHER                          = 'R0D6'
    constant integer UPG_TAUREN_INVISIBILITY                          = 'R0DD'
    constant integer UPG_TAUREN_PULVERIZE                             = 'R0DC'
    constant integer UPG_TAUREN_SPIRIT_WALKER                         = 'R0D7'
    constant integer UPG_TAUREN_DRUID                                 = 'R0D8'
    constant integer UPG_TAUREN_WAR_DRUMS                             = 'R0DB'
    constant integer UPG_TAUREN_ELITE_TAUREN                          = 'R0D9'
    constant integer UPG_TAUREN_TOTEM_POLE                            = 'R0DA'

    constant integer TAUREN_ELITE_TAUREN                              = 'o06M'
    constant integer TAUREN_KODO_BEAST_RIDERLESS                      = 'o06G'
    constant integer TAUREN_KODO_BEAST_RIDER                          = 'o06Q'
    constant integer TAUREN_SPIRIT_WALKER                             = 'o06J'
    constant integer TAUREN_SPIRIT_WALKER_ETHERAL                     = 'o06O'
    constant integer TAUREN_SPIRIT_WYVERN                             = 'o03E'
    constant integer TAUREN_TAUREN                                    = 'o06L'
    constant integer TAUREN_TAUREN_AXE_FIGHTER                        = 'o06E'
    constant integer TAUREN_TAUREN_CATAPULT                           = 'o06F'
    constant integer TAUREN_TAUREN_DRUID                              = 'o06H'
    constant integer TAUREN_TAUREN_DRUID_CAT                          = 'o06I'
    constant integer TAUREN_TAUREN_SPEAR_THROWER                      = 'o06N'
    constant integer TAUREN_TAUREN_WORKER                             = 'o02N'
    constant integer TAUREN_WYVERN                                    = 'o03D'

    constant integer TAUREN_CITIZEN_MALE                              = 'n09Z'
    constant integer TAUREN_CITIZEN_FEMALE                            = 'n0BM'
    constant integer TAUREN_PET                                       = 'n0BN'
    constant integer TAUREN_HOUSING                                   = 'h0H1'

    // Worgen
    constant integer WORGEN_TOWN_HALL                                = 'h0IU'
    constant integer WORGEN_KEEP                                     = 'h0IZ'
    constant integer WORGEN_CASTLE                                   = 'h0IV'
    constant integer WORGEN_BARRACKS                                 = 'h0J6'
    constant integer WORGEN_ALTAR                                    = 'h0J0'
    constant integer WORGEN_BLACKSMITH                               = 'h0J4'
    constant integer WORGEN_WIZARD_TOWER                             = 'h0IY' // sanctuary
    constant integer WORGEN_HOUSE                                    = 'h0J3' // farm
    constant integer WORGEN_LUMBER_MILL                              = 'h0J7'
    constant integer WORGEN_WORKSHOP                                 = 'h0JE'
    constant integer WORGEN_MANOR                                    = 'h0J8' // aviary
    constant integer WORGEN_TRADE_HOUSE                              = 'h0J5' // shop
    constant integer WORGEN_SCOUT_TOWER                              = 'h0JF'
    constant integer WORGEN_GUARD_TOWER                              = 'h0JG'
    constant integer WORGEN_ARCANE_TOWER                             = 'h0JI'
    constant integer WORGEN_CANNON_TOWER                             = 'h0JH'
    constant integer WORGEN_CATHEDRAL                                = 'h0J9'
    constant integer WORGEN_GREYMANE_WALL                            = 'h0PP'

    constant integer UPG_WORGEN_DRUID                                = 'R08U'
    constant integer UPG_WORGEN_NOCTURNAL                            = 'R08X'
    constant integer UPG_WORGEN_CURSE                                = 'R08T'
    constant integer UPG_WORGEN_BACKPACK                             = 'R08V'
    constant integer UPG_WORGEN_CATHEDRAL                            = 'R08W'
    constant integer UPG_WORGEN_GREYMANE_WALL                        = 'R0CB'
    constant integer UPG_WORGEN_ANIMAL_WAR_TRAINING                  = 'R0BX'
    constant integer UPG_WORGEN_BARRAGE                              = 'R0C8'
    constant integer UPG_WORGEN_CARGO                                = 'R0CA'
    constant integer UPG_WORGEN_DEFEND                               = 'R0C3'
    constant integer UPG_WORGEN_NIGHTSTALKER                         = 'R0C4'
    constant integer UPG_WORGEN_RAIN_OF_FIRE                         = 'R0C9'
    constant integer UPG_WORGEN_ROCKETS                              = 'R0BY'
    constant integer UPG_WORGEN_SLOW_POISON                          = 'R0BV'
    constant integer UPG_WORGEN_WORGEN_CLAWS                         = 'R0C5'
    constant integer UPG_WORGEN_ARMOR                                = 'R0C6'
    constant integer UPG_WORGEN_RANGE                                = 'R0C7'
    constant integer UPG_WORGEN_HUMAN_COURAGE                        = 'R0C2'
    constant integer UPG_WORGEN_IMPROVED_CRITICAL_STRIKE             = 'R0BU'
    constant integer UPG_WORGEN_IMPROVED_WALL                        = 'R0C0'
    constant integer UPG_WORGEN_LONG_RIFLES                          = 'R0BW'
    constant integer UPG_WORGEN_MAGIC_SENTRY                         = 'R0BZ'

    constant integer WORGEN_PEASANT                                  = 'h0IT'
    constant integer WORGEN_FOOTMAN                                  = 'h0JD'
    constant integer WORGEN_RIFLEMAN                                 = 'h0JC'
    constant integer WORGEN_KNIGHT                                   = 'h0IW'
    constant integer WORGEN_DRUID                                    = 'h0IX'
    constant integer WORGEN_BANNER_CARRIER                           = 'h0PG'
    constant integer WORGEN_BATTLE_MAGE                              = 'h0PI'
    constant integer WORGEN_GILNEAS_GUNSHIP                          = 'h0PF'
    constant integer WORGEN_MANTICORE                                = 'e01G'
    constant integer WORGEN_MINDLESS_WORGEN                          = 'o05J'
    constant integer WORGEN_NIGHTSTALKER                             = 'h0PJ'
    constant integer WORGEN_STORMCROW_KNIGHT                         = 'h0PH'

    constant integer WORGEN_CITIZEN_MALE                             = 'n0C5'
    constant integer WORGEN_CITIZEN_FEMALE                           = 'n0C6'
    constant integer WORGEN_HOUSING                                  = 'h0JA'

    // Vrykul
    constant integer VRYKUL_TIER_1                                   = 'h0IA'
    constant integer VRYKUL_TIER_2                                   = 'h0IB'
    constant integer VRYKUL_TIER_3                                   = 'h0IC'
    constant integer VRYKUL_ALTAR                                    = 'h0OF'
    constant integer VRYKUL_FISHER_HOUSE                             = 'h0IE'
    constant integer VRYKUL_LONGHOUSE                                = 'h0IJ'
    constant integer VRYKUL_PROTO_DRAKE_ROOST                        = 'n0BY'
    constant integer VRYKUL_VALKYR_TEMPLE                            = 'h0P4'
    constant integer VRYKUL_BEASTIARY                                = 'h0P5'
    constant integer VRYKUL_BLACKSMITH                               = 'h0P6'
    constant integer VRYKUL_LAMP                                     = 'h0P7' // scout tower
    constant integer VRYKUL_SHIPYARD                                 = 'h0IN'
    constant integer VRYKUL_INN                                      = 'h0PB' // shop
    constant integer VRYKUL_HALL_OF_VALOR                            = 'h0PD' // special building

    constant integer UPG_VRYKUL_BACKPACK                             = 'R0BE'
    constant integer UPG_VRYKUL_DEFEND                               = 'R0BF'
    constant integer UPG_VRYKUL_DEVOUR                               = 'R0BI'
    constant integer UPG_VRYKUL_SPIKED_SHELL                         = 'R0BG'
    constant integer UPG_VRYKUL_VALKYR_DARK                          = 'R0BL'
    constant integer UPG_VRYKUL_VALKYR_GOLDEN                        = 'R0BK'
    constant integer UPG_VRYKUL_RUNECARVER                           = 'R0BS'
    constant integer UPG_VRYKUL_LUMBER                               = 'R0BJ'
    constant integer UPG_VRYKUL_HALLS_OF_VALOR                       = 'R0BH' // special building
    constant integer UPG_VRYKUL_CREATURE_ATTACK                      = 'R0BP'
    constant integer UPG_VRYKUL_CREATURE_SKIN                        = 'R0BQ'
    constant integer UPG_VRYKUL_IRON_SWORDS                          = 'R0BN'
    constant integer UPG_VRYKUL_IRON_PLATING                         = 'R0BO'
    constant integer UPG_VRYKUL_RESISTANT_SKIN                       = 'R0BM'
    constant integer UPG_VRYKUL_GIANTS                               = 'R0BR'
    constant integer UPG_VRYKUL_ULTRAVISION                          = 'R0BT'

    constant integer VRYKUL_WARRIOR                                  = 'h0IK' // footman
    constant integer VRYKUL_SPEAR_CARRIER                            = 'h0IM' // rifleman
    constant integer VRYKUL_MAMMOTH_RIDER                            = 'h0IL' // knight
    constant integer VRYKUL_PROTO_DRAKE                              = 'n0BZ' // gryphon rider
    constant integer VRYKUL_VALKYR_GOLDEN                            = 'n0EW' // priest
    constant integer VRYKUL_VALKYR_DARK                              = 'n0EV' // sorceress
    constant integer VRYKUL_UNDEAD_VRYKUL                            = 'n0F1'
    constant integer VRYKUL_RUNECARVER                               = 'h0IP'
    constant integer VRYKUL_ARMORED_WOLF                             = 'n0EZ'
    constant integer VRYKUL_MAMMOTH                                  = 'n0F0'
    constant integer VRYKUL_GIANT_POLAR_BEAR                         = 'n0F6'
    constant integer VRYKUL_RAKKAR_SHIP                              = 'h0IO'

    constant integer VRYKUL_WORKER                                   = 'h0ID'

    constant integer VRYKUL_CITIZEN_MALE                             = 'n0F4'
    constant integer VRYKUL_CITIZEN_FEMALE                           = 'n0F5'
    constant integer VRYKUL_HOUSING                                  = 'h0PC'

    // Tuskarr
    constant integer TUSKARR_FROZEN_HALL                             = 'o05N' // tier 1
    constant integer TUSKARR_FROZEN_STRONGHOLD                       = 'o05Y' // tier 2
    constant integer TUSKARR_FROZEN_FORTRESS                         = 'o05Z' // tier 3
    constant integer TUSKARR_ALTAR_OF_ICE                            = 'o05O' // altar
    constant integer TUSKARR_BLOCK_OF_ICE                            = 'o060' // scout/watch tower base
    constant integer TUSKARR_ICE_WALL                                = 'o061' // cannon tower
    constant integer TUSKARR_SPIDER_SHRINE                           = 'o062' // guard tower
    constant integer TUSKARR_FROST_SNOWMAN                           = 'o063' // arcane tower
    constant integer TUSKARR_HUNTERS_REST                            = 'o05Q' // beastiary/workshop
    constant integer TUSKARR_ICE_CUTTERS_LODGE                       = 'o05W' // arcane sanctuary
    constant integer TUSKARR_DECORATED_CAVERN                        = 'o05V' // tauren totem
    constant integer TUSKARR_ICY_SPIRE                               = 'o05X' // lumber mill/blacksmith
    constant integer TUSKARR_IGLOO_BARRACKS                          = 'o055' // barracks
    constant integer TUSKARR_NORTHERN_VENDOR_SHOP                    = 'o05U' // shop
    constant integer TUSKARR_IGLOO                                   = 'o05P' // farm
    constant integer TUSKARR_TUSKARR_SHIPYARD                        = 'o064'
    constant integer TUSKARR_BURIAL_PLACE                            = 'n0FY' // special building

    constant integer UPG_TUSKARR_BACKPACK                            = 'R0CC'
    constant integer UPG_TUSKARR_BEAST_PROTECTION                    = 'R0CH'
    constant integer UPG_TUSKARR_CLANS                               = 'R0CL'
    constant integer UPG_TUSKARR_CLEAVING_ATTACK                     = 'R0CQ'
    constant integer UPG_TUSKARR_CRITICAL_STRIKE                     = 'R0CT'
    constant integer UPG_TUSKARR_DEVOUR                              = 'R0CM'
    constant integer UPG_TUSKARR_ELITE_ARMORED_POLAR_BEAR            = 'R0CP'
    constant integer UPG_TUSKARR_ENSNARE                             = 'R0CR'
    constant integer UPG_TUSKARR_ETHERAL_BEASTS                      = 'R0CI'
    constant integer UPG_TUSKARR_FROST_IMMUNITY                      = 'R0CE'
    constant integer UPG_TUSKARR_IMPROVED_FISHING                    = 'R0CG'
    constant integer UPG_TUSKARR_MAGIC_SENTRY                        = 'R0CJ'
    constant integer UPG_TUSKARR_SHAMAN_ADEPT_TRAINING               = 'R0CN'
    constant integer UPG_TUSKARR_TUSKARR_ARMOR                       = 'R0CF'
    constant integer UPG_TUSKARR_HARPOONS                            = 'R0CK'
    constant integer UPG_TUSKARR_HEALER_ADEPT_TRAINING               = 'R0CO'
    constant integer UPG_TUSKARR_TUSKARR_WEAPONS                     = 'R0CD'
    constant integer UPG_TUSKARR_WAR_STOMP                           = 'R0CS'
    constant integer UPG_TUSKARR_BURIAL_PLACE                        = 'R0CU' // special building

    constant integer TUSKARR_WORKER                                  = 'o05M' // worker
    constant integer TUSKARR_GIANT_SNOWY_OWL                         = 'n0FJ' // gryphon
    constant integer TUSKARR_GIANT_FROST_WOLF                        = 'n0FI'
    constant integer TUSKARR_ICETUSK_MAMMOTH                         = 'n0FK' // siege engine
    constant integer TUSKARR_POLAR_BEAR                              = 'n0FL' // sieg engine
    constant integer TUSKARR_ELITE_ARMORED_POLAR_BEAR                = 'n0FX' // elite siege engine
    constant integer TUSKARR_CHIEFTAIN                               = 'n0FF' // tauren
    constant integer TUSKARR_FIGHTER                                 = 'n0FD' // footman
    constant integer TUSKARR_SPEARMAN                                = 'o0FE' // rifleman
    constant integer TUSKARR_MAMMOTH_RIDER                           = 'o05T' // knight
    constant integer TUSKARR_HEALER                                  = 'n0FM' // priest
    constant integer TUSKARR_SHAMAN                                  = 'o05R' // sorceress
    constant integer TUSKARR_FISHING_BOAT                            = 'h0PU'

    constant integer TUSKARR_PET_SEAL                                = 'n0FH'
    constant integer TUSKARR_CITIZEN_FEMALE                          = 'n0FN'
    constant integer TUSKARR_CITIZEN_MALE                            = 'n0FG'
    constant integer TUSKARR_HOUSING                                 = 'h0PT'

    // Nerubian
    constant integer NERUBIAN_TIER_1                                 = 'u01Q'
    constant integer NERUBIAN_TIER_2                                 = 'u023'
    constant integer NERUBIAN_TIER_3                                 = 'u024'
    constant integer NERUBIAN_ALTAR                                  = 'u01U'
    constant integer NERUBIAN_ANCIENT_SHRINE                         = 'u02B' // sanctuary
    constant integer NERUBIAN_HATCHERY                               = 'u029' // mill/forge
    constant integer NERUBIAN_TOWER                                  = 'u02A' // watch tower
    constant integer NERUBIAN_TUNNEL                                 = 'u028' // sacrifical pit
    constant integer NERUBIAN_ZIGGURAT                               = 'u01S' // farm
    constant integer NERUBIAN_NEST                                   = 'u02D' // slaughterhouse
    constant integer NERUBIAN_SPAWNING_GROUND                        = 'u025' // boneyard
    constant integer NERUBIAN_SPAWNING_PIT                           = 'u01Z' // barracks
    constant integer NERUBIAN_VAULT_OF_RELICS                        = 'u026' // shop
    constant integer NERUBIAN_AZJOL_NERUB                            = 'n0EH' // special building

    constant integer UPG_NERUBIAN_ANCIENT_POWER                      = 'R0BC' // skeletal mastery
    constant integer UPG_NERUBIAN_AZJOL_NERUB                        = 'R0B5' // special building
    constant integer UPG_NERUBIAN_BACKPACK                           = 'R0B3'
    constant integer UPG_NERUBIAN_COCOON                             = 'R0B1'
    constant integer UPG_NERUBIAN_CORROSIVE_BREATH                   = 'R0BD'
    constant integer UPG_NERUBIAN_IMPROVED_ANCIENT_ARCHITECTURE      = 'R0B9'
    constant integer UPG_NERUBIAN_ARMOR                              = 'R0B7'
    constant integer UPG_NERUBIAN_WEAPONS                            = 'R0B6'
    constant integer UPG_NERUBIAN_WINGS                              = 'R0B8'
    constant integer UPG_NERUBIAN_SEER                               = 'R0BA'
    constant integer UPG_NERUBIAN_WEBSPINNER                         = 'R0BB'
    constant integer UPG_NERUBIAN_SPAWN_SPIDERLINGS                  = 'R0B2'
    constant integer UPG_NERUBIAN_SPIDER_EGG                         = 'R0B4'
    constant integer UPG_NERUBIAN_SPIDER_POISON                      = 'R0AJ'
    constant integer UPG_NERUBIAN_WEB                                = 'R0AK'

    constant integer NERUBIAN_WORKER                                 = 'u01P'
    constant integer NERUBIAN_CRYPT_DRONE                            = 'u021'
    constant integer NERUBIAN_CRYPT_FIEND                            = 'u020'
    constant integer NERUBIAN_FLYING_BOMBARDER                       = 'u02C'
    constant integer NERUBIAN_QUEEN                                  = 'n0EB'
    constant integer NERUBIAN_SEER                                   = 'n0EF'
    constant integer NERUBIAN_SPEAR_THROWER                          = 'n0EI'
    constant integer NERUBIAN_SPIDER_LORD                            = 'n0EG'
    constant integer NERUBIAN_WARRIOR                                = 'n0E8' // footman
    constant integer NERUBIAN_WEBSPINNER                             = 'n0EJ'

    constant integer NERUBIAN_CITIZEN_MALE                           = 'n0E9'
    constant integer NERUBIAN_CITIZEN_FEMALE                         = 'n0EA'
    constant integer NERUBIAN_HOUSING                                = 'h0OX'

    // Ogre
    constant integer OGRE_TIER_1                                     = 'o06C'
    constant integer OGRE_TIER_2                                     = 'o073'
    constant integer OGRE_TIER_3                                     = 'o074'
    constant integer OGRE_ALTAR                                      = 'o07B'
    constant integer OGRE_MAGI_LODGE                                 = 'o076' // sanctuary
    constant integer OGRE_FORGE                                      = 'o079' // mill/forge
    constant integer OGRE_BOULDER_TOWER                              = 'n0HR' // watch tower
    constant integer OGRE_ADVANCED_BOULDER_TOWER                     = 'n0HS' // arcane tower
    constant integer OGRE_TENT                                       = 'o06S' // farm
    constant integer OGRE_BEASTIARY                                  = 'o078' // slaughterhouse
    constant integer OGRE_ARENA                                      = 'o075' // boneyard
    constant integer OGRE_CAVE                                       = 'o06R' // barracks
    constant integer OGRE_DRAENOR_MERCHANT                           = 'o07A' // shop
    constant integer OGRE_STONEMAUL_CAMP                             = 'o07D' // special building

    constant integer UPG_OGRE_AMBUSH                                 = 'R0EA'
    constant integer UPG_OGRE_BACKPACK                               = 'R0D4'
    constant integer UPG_OGRE_BREATH_OF_FIRE                         = 'R0EE'
    constant integer UPG_OGRE_DEMOLISH                               = 'R0EI'
    constant integer UPG_OGRE_ENSNARE                                = 'R0E6'
    constant integer UPG_OGRE_LIGHTNING_ATTACK                       = 'R0EJ'
    constant integer UPG_OGRE_NECROMANCER                            = 'R0EF'
    constant integer UPG_OGRE_ARMOR                                  = 'R0E5'
    constant integer UPG_OGRE_MELEE                                  = 'R0E4'
    constant integer UPG_OGRE_MAGI                                   = 'R0EB'
    constant integer UPG_OGRE_RANGED                                 = 'R0ED'
    constant integer UPG_OGRE_STRENGTH                               = 'R0E9'
    constant integer UPG_OGRE_WARLOCK                                = 'R0EC'
    constant integer UPG_OGRE_PULVERIZE                              = 'R0E7'
    constant integer UPG_OGRE_REINCARNATION                          = 'R0EH'
    constant integer UPG_OGRE_RESISTANT_SKIN                         = 'R0E8'
    constant integer UPG_OGRE_ROAR                                   = 'R0EL'
    constant integer UPG_OGRE_SUMMON_BEAR                            = 'R0EK'
    constant integer UPG_OGRE_TAUNT                                  = 'R0EG'
    constant integer UPG_OGRE_WAR_STOMP                              = 'R0EO'
    constant integer UPG_OGRE_STONEMAUL_CAMP                         = 'R0EN'

    constant integer OGRE_OGRE_SLAVE                                 = 'o06B' // worker
    constant integer OGRE_OGRE_WARRIOR                               = 'n0GN' // footman
    constant integer OGRE_OGRE_STONE_THROWER                         = 'n0GM' // rifleman
    constant integer OGRE_OGRE_HUNTER                                = 'n0HQ' // raider/rifleman 2
    constant integer OGRE_BRONZE_DRAKE                               = 'n0HP' // wind rider
    constant integer OGRE_ZEPPELIN                                   = 'n0HX' // zeppelin
    constant integer OGRE_CLEFTHOOF                                  = 'o077' // clefthoof
    constant integer OGRE_OGRE_DRUMMER                               = 'n0GL' // knight
    constant integer OGRE_OGRE_FIRE_BREATHER                         = 'n0HV' // knight 2
    constant integer OGRE_OGRE_MAGI                                  = 'n0HN' // sorceress
    constant integer OGRE_OGRE_WARLOCK                               = 'n0HO' // priest
    constant integer OGRE_OGRE_NECROMANCER                           = 'n0HW' // spell breaker
    constant integer OGRE_OGRE_LORD                                  = 'n0HM' // tauren
    constant integer OGRE_MOKNATHAL                                  = 'n07E' // tauren 2

    constant integer OGRE_KORGALL                                    = 'n071' // special unit
    constant integer OGRE_STONEMAUL_OGRE                             = 'n0C3' // special unit
    constant integer OGRE_STONEMAUL_MAGI                             = 'n08K' // special unit

    constant integer OGRE_CITIZEN_MALE                               = 'n0GF'
    constant integer OGRE_CITIZEN_FEMALE                             = 'n0GG'
    constant integer OGRE_HOUSING                                    = 'h0QC'

    constant integer OGRE_SHIPYARD                                   = 'o07C'

    // Modern Warfare
    constant integer MODERNWARFARE_TIER_1                            = 'h0DJ' // tier 1
    constant integer MODERNWARFARE_TIER_2                            = 'h0FR' // tier 2
    constant integer MODERNWARFARE_TIER_3                            = 'h0FS' // tier 3
    constant integer MODERNWARFARE_RADIO_TOWER                       = 'h0E2' // scout tower
    constant integer MODERNWARFARE_FLAME_TOWER                       = 'h0FE' // guard tower
    constant integer MODERNWARFARE_MINIGUN_TOWER                     = 'h0FN' // cannon tower
    constant integer MODERNWARFARE_MISSILE_TOWER                     = 'h0EG' // arcane tower
    constant integer MODERNWARFARE_BUNKER                            = 'o03K' // farm
    constant integer MODERNWARFARE_HELIPORT                          = 'h0E4' // arcane
    constant integer MODERNWARFARE_ALTAR                             = 'h0E8' // altar
    constant integer MODERNWARFARE_SHOP                              = 'h0FG' // shop
    constant integer MODERNWARFARE_BARRACKS                          = 'h0E3' // barracks
    constant integer MODERNWARFARE_FACTORY                           = 'h0DX' // blacksmith and lumber mill
    constant integer MODERNWARFARE_NUCLEAR_SILO                      = 'h0F1' // lumber mill
    constant integer MODERNWARFARE_VEHICLE_FACTORY                   = 'h0DL' // workshop
    constant integer MODERNWARFARE_AIRBASE                           = 'h0E1' // aviary
    constant integer MODERNWARFARE_UN_BUILDING                       = 'h0E6' // special building

    constant integer UPG_MODERNWARFARE_ENGINE                        = 'R07R'
    constant integer UPG_MODERNWARFARE_MASONRY                       = 'R07S'
    constant integer UPG_MODERNWARFARE_MACHINE_GUNS                  = 'R07K'
    constant integer UPG_MODERNWARFARE_HELMETS                       = 'R07E'
    constant integer UPG_MODERNWARFARE_VEHICLE_GUNS                  = 'R07X'
    constant integer UPG_MODERNWARFARE_METAL_PLATING                 = 'R07Q'
    constant integer UPG_MODERNWARFARE_CAMOUFLAGE                    = 'R07L'
    constant integer UPG_MODERNWARFARE_CLUSTER_ROCKETS               = 'R07U'
    constant integer UPG_MODERNWARFARE_BACKPACK                      = 'R07Z'
    constant integer UPG_MODERNWARFARE_FAST_RELOAD                   = 'R07D'
    constant integer UPG_MODERNWARFARE_FLARES                        = 'R07T'
    constant integer UPG_MODERNWARFARE_FLASHBANGS                    = 'R07O'
    constant integer UPG_MODERNWARFARE_GRENADES                      = 'R07N'
    constant integer UPG_MODERNWARFARE_HEADSHOT                      = 'R07P'
    constant integer UPG_MODERNWARFARE_LOAD                          = 'R07V'
    constant integer UPG_MODERNWARFARE_RADAR                         = 'R07W'
    constant integer UPG_MODERNWARFARE_RADIO                         = 'R07M'
    constant integer UPG_MODERNWARFARE_REPAIR_AURA                   = 'R07Y'
    constant integer UPG_MODERNWARFARE_UN_BUILDING                   = 'R07F' // special building

    constant integer MODERNWARFARE_WORKER                            = 'h0DK' // worker
    constant integer MODERNWARFARE_BULLDOZER                         = 'n09H' // shredder
    constant integer MODERNWARFARE_RANGER                            = 'n0AG'
    constant integer MODERNWARFARE_MARINE                            = 'n0AH'
    constant integer MODERNWARFARE_SNIPER                            = 'n0AJ'
    constant integer MODERNWARFARE_MEDIC                             = 'h0FF'
    constant integer MODERNWARFARE_HUMVEE                            = 'h0ED'
    constant integer MODERNWARFARE_MEDIC_CAR                         = 'h0E7'
    constant integer MODERNWARFARE_ABRAMS                            = 'h0DN'
    constant integer MODERNWARFARE_ARTILLERY                         = 'h0EB'
    constant integer MODERNWARFARE_CARGO_HELI                        = 'h0EE'
    constant integer MODERNWARFARE_COBRA_HELI                        = 'h0EH'
    constant integer MODERNWARFARE_APACHE                            = 'h0E5'
    constant integer MODERNWARFARE_SUPER_FLANKER                     = 'h0E9'
    constant integer MODERNWARFARE_STEALTH_BOMBER                    = 'h0EI'
    constant integer MODERNWARFARE_SATELITE                          = 'h0FD'
    constant integer MODERNWARFARE_SPY                               = 'z000'

    constant integer MODERNWARFARE_CITIZEN_MALE                      = 'n0AF'
    constant integer MODERNWARFARE_CITIZEN_FEMALE                    = 'n09M'
    constant integer MODERNWARFARE_HOUSING                           = 'h0DY'

    // Ancient Greece
    constant integer ANCIENTGREECE_TIER_1                            = 'h0LH' // tier 1-3

    // Roman Empire
    constant integer ROMANEMPIRE_TIER_1                              = 'h05R' // tier 1-3
    constant integer ROMANEMPIRE_TENT                                = 'h072' // farm
    constant integer ROMANEMPIRE_VALETUDINARIUM                      = 'h08R' // altar
    constant integer ROMANEMPIRE_BARRACKS                            = 'h08S' // barracks
    constant integer ROMANEMPIRE_COLISEUM                            = 'h05U' // blacksmith
    constant integer ROMANEMPIRE_VILLA                               = 'h05Y' // lumber mill
    constant integer ROMANEMPIRE_TEMPLE                              = 'h05Z' // arcane sanctum
    constant integer ROMANEMPIRE_WORKSHOP                            = 'h08W' // workshop
    constant integer ROMANEMPIRE_GUARD_TOWER                         = 'h060' // guard tower
    constant integer ROMANEMPIRE_CIRCUS_MAXIMUMS                     = 'h05T' // gryphon aviary
    constant integer ROMANEMPIRE_TRIUMPHAL_ARCH                      = 'h0CL' // special building
    constant integer ROMANEMPIRE_MARKETPLACE                         = 'h0GB' // shop

    constant integer UPG_ROMANEMPIRE_DEFEND                          = 'R081'
    constant integer UPG_ROMANEMPIRE_TRIUMPHAL_ARCH                  = 'R076'
    constant integer UPG_ROMANEMPIRE_RIDE_DOWN                       = 'R082'
    constant integer UPG_ROMANEMPIRE_AQUEDUCT                        = 'R08C'
    constant integer UPG_ROMANEMPIRE_PILUM                           = 'R08F'
    constant integer UPG_ROMANEMPIRE_BACKPACK                        = 'R08G'
    constant integer UPG_ROMANEMPIRE_MASONRY                         = 'R08H'
    constant integer UPG_ROMANEMPIRE_MELEE                           = 'R08D'
    constant integer UPG_ROMANEMPIRE_ARMOR                           = 'R08E'

    constant integer ROMANEMPIRE_LEGIONARY                           = 'h05S' // worker
    constant integer ROMANEMPIRE_CENTURION                           = 'h08U' // footman
    constant integer ROMANEMPIRE_ARCHER                              = 'h08T' // rifleman
    constant integer ROMANEMPIRE_PRAETORIAN                          = 'h0CJ'
    constant integer ROMANEMPIRE_EQUES                               = 'h08V' // knight
    constant integer ROMANEMPIRE_CHARIOT                             = 'h0GA' // tauren
    constant integer ROMANEMPIRE_LION_MALE                           = 'h05W'
    constant integer ROMANEMPIRE_LION_FEMALE                         = 'h05X'
    constant integer ROMANEMPIRE_GLADIATOR                           = 'h05V'
    constant integer ROMANEMPIRE_BALLISTA                            = 'e019'
    constant integer ROMANEMPIRE_CATAPULT                            = 'o036'
    constant integer ROMANEMPIRE_PRIEST                              = 'h0H5'
    constant integer ROMANEMPIRE_SENATOR                             = 'h0H6'

    constant integer ROMANEMPIRE_CITIZEN_MALE                        = 'n09Y'
    constant integer ROMANEMPIRE_CITIZEN_FEMALE                      = 'n0AS'
    constant integer ROMANEMPIRE_HOUSING                             = 'h0G5'

    // Free People of Middle Earth
    constant integer FREEPEOPLE_TIER_1                               = 'h0CT' // tier 1-3
    constant integer FREEPEOPLE_GONDOR_HOUSE                         = 'h0DA' // farm
    constant integer FREEPEOPLE_GONDOR_BARRACKS                      = 'h0CU' // barracks
    constant integer FREEPEOPLE_ROHAN_STABLES                        = 'h0D3' // beastiary
    constant integer FREEPEOPLE_ROHAN_SCOUT_TOWER                    = 'h0CZ' // scout tower
    constant integer FREEPEOPLE_GONDORIAN_GUARD_TOWER                = 'h0D0' // guard tower
    constant integer FREEPEOPLE_ALTAR                                = 'h0F7' // altar
    constant integer FREEPEOPLE_DWARVEN_FORGE                        = 'h0D4' // blacksmith/lumber mill
    constant integer FREEPEOPLE_ELVEN_OUTPOST                        = 'h0D1' // arcane sanctum
    constant integer FREEPEOPLE_ENCHANTED_TREE                       = 'h0D2' // tauren totem
    constant integer FREEPEOPLE_MERCENARY_CAMP                       = 'h0F4' // gryphon aviary
    constant integer FREEPEOPLE_SHOP                                 = 'h0F8' // arcane vault

    constant integer FREEPEOPLE_HOBBIT                               = 'h0CX' // worker
    constant integer FREEPEOPLE_GONDORIAN_SOLDIER                    = 'h0CV' // footman
    constant integer FREEPEOPLE_GONDORIAN_ARCHER                     = 'h0A1' // rifleman
    constant integer FREEPEOPLE_RANGER                               = 'n0A2' // archer
    constant integer FREEPEOPLE_FOUNTAIN_GUARD                       = 'h0CW' // grunt
    constant integer FREEPEOPLE_ROHAN_ARCHER                         = 'n0A7' // archer
    constant integer FREEPEOPLE_RIDER_OF_ROHAN                       = 'h0D5' // knight
    constant integer FREEPEOPLE_ELVEN_CAVALRY                        = 'h0DD' // knight
    constant integer FREEPEOPLE_DWARVEN_ROYAL_GUARD                  = 'h0F6' // footman
    constant integer FREEPEOPLE_SINDAR_ARCHER                        = 'n0AC' // archer
    constant integer FREEPEOPLE_SINDAR_SPEARMAN                      = 'h0DC' // footman
    constant integer FREEPEOPLE_SINDAR_SWORDSMAN                     = 'h0DB' // footman
    constant integer FREEPEOPLE_EAGLE                                = 'n0A8' // gryphon
    constant integer FREEPEOPLE_ENT                                  = 'e017' // tauren

    constant integer FREEPEOPLE_CITIZEN_MALE                         = 'n0A5'
    constant integer FREEPEOPLE_CITIZEN_FEMALE                       = 'n0A6'
    constant integer FREEPEOPLE_HOUSING                              = 'n0F3'

    // Sauron's Forces
    constant integer SAURONSFORCES_TIER_1                            = 'o03L' // tier 1
    constant integer SAURONSFORCES_TIER_2                            = 'o03N' // tier 2
    constant integer SAURONSFORCES_TIER_3                            = 'o03M' // tier 3
    constant integer SAURONSFORCES_ALTAR                             = 'o047' // altar
    constant integer SAURONSFORCES_ORC_MOUND                         = 'o03W' // barracks
    constant integer SAURONSFORCES_HARADRIM_BARRACKS                 = 'o03S' // barracks
    constant integer SAURONSFORCES_SLAUGHTERHOUSE                    = 'o03V' // burrow
    constant integer SAURONSFORCES_WAR_MILL                          = 'o048' // war mill
    constant integer SAURONSFORCES_TENT_OF_RHUN                      = 'o03Y' // beastiary
    constant integer SAURONSFORCES_TROLL_DEN                         = 'o03P' // tauren totem
    constant integer SAURONSFORCES_HARADRIM_WATCH_TOWER              = 'o046' // watch tower
    constant integer SAURONSFORCES_SHOP                              = 'h0GV' // shop
    constant integer SAURONSFORCES_BARAD_DUR                         = 'h0FW' // special building
    constant integer SAURONSFORCES_ORTHANC                           = 'h0GQ' // special building

    constant integer UPG_SAURONSFORCE_BARAD_DUR                      = 'R080'
    constant integer UPG_SAURONSFORCE_ORTHANC                        = 'R083'

    constant integer SAURONSFORCES_ORC_WORKER                        = 'o03O' // worker
    constant integer SAURONSFORCES_ORC_WARRIOR                       = 'o03U' // grunt
    constant integer SAURONSFORCES_ORC_ARCHER                        = 'o03X' // head hunter
    constant integer SAURONSFORCES_MUMAK                             = 'n0AP' // kodo beast/tauren
    constant integer SAURONSFORCES_RHUN_WARRIOR                      = 'n0AP' // grunt
    constant integer SAURONSFORCES_RHUN_BANNERCARRIER                = 'o03Z' // shaman
    constant integer SAURONSFORCES_RHUN_ARCHER                       = 'n0AQ' // head hunter
    constant integer SAURONSFORCES_TROLL_DRUMMER                     = 'o03R' // kodo beast
    constant integer SAURONSFORCES_WAR_TROLL                         = 'o03Q' // tauren
    constant integer SAURONSFORCES_WARG_RIDER                        = 'o040' // raider
    constant integer SAURONSFORCES_HARADRIM_RIDER                    = 'h0FX' // raider
    constant integer SAURONSFORCES_FELLBEAST                         = 'o049' // wyvern

    constant integer SAURONSFORCES_CITIZEN_MALE                      = 'n0AO'
    constant integer SAURONSFORCES_CITIZEN_FEMALE                    = 'n0BR'
    constant integer SAURONSFORCES_HOUSING                           = 'h0GW'

    // CIS
    constant integer CIS_DROID_CONTROL_SHIP                          = 'h0H9' // tier 1-3 base unit
    constant integer CIS_DROID_CONTROL_SHIP_PRODUCING                = 'h07B' // tier 1-3
    constant integer CIS_DROID_CONTROL_SHIP_FLYING                   = 'h07A' // tier 1-3
    constant integer CIS_DROID_FACTORY                               = 'h07V' // barracks
    constant integer CIS_HEAVY_DROID_VEHICLE_FACTORY                 = 'h07U' // workshop
    constant integer CIS_HEAVY_SHIP_FACTORY                          = 'h07Y' // aviary
    constant integer CIS_SITH_TEMPLE                                 = 'h07R' // arcane sanctum
    constant integer CIS_TECHNO_UNION_SHIP                           = 'h07O' // farm
    constant integer CIS_ALTAR                                       = 'h0H0' // altar
    constant integer CIS_DEATH_STAR                                  = 'h07T' // special building

    constant integer UPG_CIS_BACKPACK                                = 'R08K'
    constant integer UPG_CIS_BLASTERS                                = 'R084'
    constant integer UPG_CIS_IRON_PLATING                            = 'R085'
    constant integer UPG_CIS_SITH                                    = 'R08A'
    constant integer UPG_CIS_SHIELD                                  = 'R08I'
    constant integer UPG_CIS_BATTLE_FORMATION                        = 'R08J'
    constant integer UPG_CIS_DEATH_STAR                              = 'R05C'

    constant integer CIS_WORKER                                      = 'h079'
    constant integer CIS_BATTLE_DROID                                = 'h077'
    constant integer CIS_SUPER_BATTLE_DROID                          = 'h07L'
    constant integer CIS_DROIDEKA                                    = 'h07F'
    constant integer CIS_AAT                                         = 'h07P'
    constant integer CIS_MTT                                         = 'h07H'
    constant integer CIS_DROID_STARFIGHTER                           = 'h07N'
    constant integer CIS_DROID_GUNSHIP                               = 'h07W'
    constant integer CIS_DROID_TRIFIGHTER                            = 'h07X'
    constant integer CIS_DWARF_SPIDER_DROID                          = 'h07M'
    constant integer CIS_HALLFIRE_DROID                              = 'h07J'
    constant integer CIS_HOMING_SPIDER_DROID                         = 'h07S'
    constant integer CIS_MUNIFICIENT_CLASS_FRIGATE                   = 'h07Z'
    constant integer CIS_PROVIDENCE_CLASS_DESTROYER                  = 'h07K'
    constant integer CIS_SITH                                        = 'h07Q'

    constant integer CIS_CITIZEN_MALE                                = 'n0A0'
    constant integer CIS_CITIZEN_FEMALE                              = 'n0BQ'
    constant integer CIS_HOUSING                                     = 'h0H3'


    // Galactic Republic
    constant integer GALACTIC_REPUBLIC_ACCLAMATOR                    = 'h08M' // tier 1-3
    constant integer GALACTIC_REPUBLIC_ACCLAMATOR_PRODUCING          = 'h083' // tier 1-3
    constant integer GALACTIC_REPUBLIC_BARRACKS                      = 'h088' // barracks
    constant integer GALACTIC_REPUBLIC_JEDI_TEMPLE                   = 'h089' // arcane sanctum
    constant integer GALACTIC_REPUBLIC_NABOO_TRAINING_CENTER         = 'h085' // tauren totem
    constant integer GALACTIC_REPUBLIC_SPACEPORT                     = 'h08C' // aviary
    constant integer GALACTIC_REPUBLIC_VEHICLE_FACTORY               = 'h08F' // workshop
    constant integer GALACTIC_REPUBLIC_TURBOLAZER                    = 'o020' // watch tower/farm
    constant integer GALACTIC_REPUBLIC_ALTAR                         = 'h0GZ' // altar
    constant integer GALACTIC_REPUBLIC_CORUSCANT                     = 'h08K' // special building

    constant integer UPG_GALACTIC_REPUBLIC_BLASTERS                  = 'R087'
    constant integer UPG_GALACTIC_REPUBLIC_IRON_PLATING              = 'R086'
    constant integer UPG_GALACTIC_REPUBLIC_JEDI                      = 'R089'
    constant integer UPG_GALACTIC_REPUBLIC_JEDI_INTERCEPTORS         = 'R088'
    constant integer UPG_GALACTIC_REPUBLIC_HYPERSPACE                = 'R05F'
    constant integer UPG_GALACTIC_REPUBLIC_ROCKETS                   = 'R05E'
    constant integer UPG_GALACTIC_REPUBLIC_TORPEDOES                 = 'R08B'
    constant integer UPG_GALACTIC_REPUBLIC_CORUSCANT                 = 'R05D'

    constant integer GALACTIC_REPUBLIC_WORKER                        = 'h084'
    constant integer GALACTIC_REPUBLIC_ARC170                        = 'h08O'
    constant integer GALACTIC_REPUBLIC_ATAP                          = 'h08H'
    constant integer GALACTIC_REPUBLIC_ATRT                          = 'h0BU'
    constant integer GALACTIC_REPUBLIC_ATTE                          = 'h08E'
    constant integer GALACTIC_REPUBLIC_ARC_TROOPER                   = 'h08N'
    constant integer GALACTIC_REPUBLIC_CLONE_TROOPER                 = 'h087'
    constant integer GALACTIC_REPUBLIC_CLONE_TURBO_TANK              = 'h08G'
    constant integer GALACTIC_REPUBLIC_CONSULAR_CLASS_CRUISER        = 'h08I'
    constant integer GALACTIC_REPUBLIC_JEDI                          = 'h08A'
    constant integer GALACTIC_REPUBLIC_KAMINOAN                      = 'h08L'
    constant integer GALACTIC_REPUBLIC_NABOO_STAR_FIGHTER            = 'h086'
    constant integer GALACTIC_REPUBLIC_GUNSHIP                       = 'h08B'
    constant integer GALACTIC_REPUBLIC_VWING                         = 'h08J'
    constant integer GALACTIC_REPUBLIC_JEDI_STARFIGHTER              = 'h0GX'
    constant integer GALACTIC_REPUBLIC_JEDI_INTERCEPTOR              = 'h0GY'

    constant integer GALACTIC_REPUBLIC_CITIZEN_MALE                  = 'n07J'
    constant integer GALACTIC_REPUBLIC_CITIZEN_FEMALE                = 'n0BP'
    constant integer GALACTIC_REPUBLIC_HOUSING                       = 'h0H2'

    // Galactic Empire
    constant integer GALACTIC_EMPIRE_STAR_DESTROYER_PRODUCING        = 'h0L2'
    constant integer GALACTIC_EMPIRE_BARRACKS                        = 'h0L3'
    constant integer GALACTIC_EMPIRE_SPACEPORT                       = 'h0L8'
    constant integer GALACTIC_EMPIRE_TURBOLAZER                      = 'o056'
    constant integer GALACTIC_EMPIRE_VEHICLE_FACTORY                 = 'h0L7'

    constant integer GALACTIC_EMPIRE_ASTROMECH_DROID                 = 'h0L1' // worker

    // Germans WWII
    constant integer GERMANS_WWII_HEADQUARTERS                       = 'h0HB' // tier 1-3
    constant integer GERMANS_WWII_BARRACKS                           = 'h0HD' // barracks
    constant integer GERMANS_WWII_BUNKER                             = 'o04D' // farm
    constant integer GERMANS_WWII_HOSPITAL_TENT                      = 'h0KU' // altar
    constant integer GERMANS_WWII_OFFICERS_ROOM                      = 'h0HO' // arcane sanctum
    constant integer GERMANS_WWII_PRISON                             = 'u01J' // tauren totem
    constant integer GERMANS_WWII_VEHICLE_FACTORY                    = 'h0HJ' // beastiary
    constant integer GERMANS_WWII_WORKSHOP                           = 'h0HN' // workshop
    constant integer GERMANS_WWII_WEAPONS_STORAGE                    = 'h0HL' // lumber mill/forge
    constant integer GERMANS_WWII_AIRBASE                            = 'h0HM' // aviary
    constant integer GERMANS_WWII_SHOP                               = 'h0I1' // shop
    constant integer GERMANS_WWII_BERGHOF                            = 'h0N0' // special building

    constant integer UPG_GERMANS_WWII_BACKPACK                       = 'R08L'
    constant integer UPG_GERMANS_WWII_AUTOBAHN                       = 'R08S'
    constant integer UPG_GERMANS_WWII_BOMBS                          = 'R08O'
    constant integer UPG_GERMANS_WWII_BURNING_OIL                    = 'R08M'
    constant integer UPG_GERMANS_WWII_CREW                           = 'R08P'
    constant integer UPG_GERMANS_WWII_ENSNARE                        = 'R08Q'
    constant integer UPG_GERMANS_WWII_FRAGMENTATION_SHARDS           = 'R08R'
    constant integer UPG_GERMANS_WWII_HEADSHOT                       = 'R08N'
    constant integer UPG_GERMANS_WWII_BERGHOF                        = 'R0AA'

    constant integer GERMANS_WWII_PIONEER                            = 'h0HC' // worker

    constant integer GERMANS_WWII_CITIZEN_MALE                       = 'n0DV'
    constant integer GERMANS_WWII_CITIZEN_FEMALE                     = 'n0DW'
    constant integer GERMANS_WWII_HOUSING                            = 'h0MZ'

    // All Races

    constant integer SHREDDER                                        = 'ngir'
    constant integer AI_LABORATORY                                   = 'h01T'

    constant integer MARKETPLACE                                     = 'nmrk'
    constant integer THIEVES_GUILD                                   = 'n09D'
    constant integer DRAGON_ROOST                                    = 'n09L'
    constant integer ANTIMAGIC_WARD                                  = 'o01Z'

    constant integer UPG_TEMPLE_OF_DEMIGODS_BLUEPRINTS               = 'R00B'
    constant integer UPG_STORM_PROTECTION                            = 'R029'
    constant integer UPG_IMPROVED_MASONRY                            = 'R00W'
    constant integer UPG_EVOLUTION                                   = 'R00U'
    constant integer UPG_CHEAP_EVOLUTION                             = 'R01V'
    constant integer UPG_IMPROVED_POWER_GENERATOR                    = 'R01T'
    constant integer UPG_IMPROVED_MOUNT                              = 'R024'
    constant integer UPG_IMPROVED_NAVY                               = 'R035'
    constant integer UPG_DRAGON_ROOST                                = 'R06M'

    constant integer MAX_WOWR_RESEARCH_LEVEL                         = 75
    constant integer MAX_WOWR_HERO_LEVEL                             = 75
    
    constant integer HIDEOUT                                         = 'h00J'
    constant integer FORTIFIED_HIDEOUT                               = 'h00K'
    constant integer GUARDIANS_CITADEL                               = 'h00L'

    constant integer PORTAL                                          = 'h014'
    constant integer POWER_GENERATOR                                 = 'n025'
    constant integer RESEARCH_TENT                                   = 'n042'

    constant integer GRYPHON_MOUNT                                   = 'h004'
    constant integer WYVERN_MOUNT                                    = 'o003'
    constant integer FROST_WYRM_MOUNT                                = 'u004'
    constant integer CHIMAERA_MOUNT                                  = 'e005'
    constant integer NETHER_DRAKE_MOUNT                              = 'n007'
    constant integer DRAGONHAWK_MOUNT                                = 'h04L'

    constant integer FOUNTAIN_OF_LIFE                                = 'h007'
    constant integer NEUTRAL_CITIZEN                                 = 'n02Y'

    constant integer DARK_RANGER_NEUTRAL                             = 'Nbrn'
    constant integer DARK_RANGER_SILENCE                             = 'ANsi'
    constant integer DARK_RANGER_DARK_PORTAL                         = 'A01T'
    constant integer DARK_RANGER_LIFE_DRAIN                          = 'ANdr'
    constant integer DARK_RANGER_UNHOLY_SPIRITS                      = 'A01S'
    constant integer DARK_RANGER_CHARM                               = 'ANch'
    constant integer DARK_RANGER_BLACK_ARROW                         = 'ANba'

    constant integer DEATH_KNIGHT_SHADOW_WORD_DEATH                  = 'A01Q'

    constant integer PIT_LORD_NEUTRAL                                = 'Nplh'
    constant integer RAIN_OF_FIRE                                    = 'ANrf'
    constant integer HOWL_OF_TERROR                                  = 'ANht'
    constant integer CLEAVING_ATTACK                                 = 'ANca'
    constant integer DEMON_MASTER                                    = 'A01R'

    constant integer DREAD_LORD_RAIN_OF_CHAOS                        = 'A07V'

    constant integer EREDAR_WARLOCK_NEUTRAL                          = 'U00M'
    constant integer EREDAR_WARLOCK_FIRE_BOLT                        = 'ANfb'
    constant integer EREDAR_WARLOCK_MANA_SHIELD                      = 'ANms'
    constant integer EREDAR_WARLOCK_BASH                             = 'A061'
    constant integer EREDAR_FINGER_OF_DEATH                          = 'A060'

    constant integer FURBOLG_URSA_WARRIOR_HERO                       = 'E00E'
    constant integer FURBOLG_REJUVENATION                            = 'A06X'
    constant integer FURBOLG_FAERIE_FIRE                             = 'A13B'
    constant integer FURBOLG_COMMAND_AURA                            = 'A06Z'
    constant integer FURBOLG_CORRUPTION                              = 'A070'

    constant integer MOUNTAIN_GIANT_HERO                             = 'E00G'
    constant integer MOUNTAIN_GIANT_BOULDER                          = 'A0A6'
    constant integer MOUNTAIN_GIANT_HARDENED_SKIN                    = 'A099'
    constant integer MOUNTAIN_GIANT_EAT_TREE                         = 'A09B'
    constant integer MOUNTAIN_GIANT_DEMOLISH                         = 'A0A7'

    constant integer AKAMA                                           = 'N01K'
    constant integer REINCARNATION_AKAMA                             = 'A08K'
    constant integer SPIRIT_WOLF_AKAMA                               = 'A08I'
    constant integer SHADOW_TOUCH_AKAMA                              = 'A08G'

    constant integer FORKED_LIGHTNING                                = 'ANfl'
    constant integer FROST_ARROWS                                    = 'ANfa'
    constant integer MANA_SHIELD                                     = 'ANms'
    constant integer TORNADO                                         = 'ANto'

    constant integer BEASTMASTER                                     = 'Nbst'

    constant integer STAMPEDE                                        = 'ANst'
    constant integer SUMMON_BEAR                                     = 'ANsg'
    constant integer SUMMON_QUILBEAST                                = 'ANsq'
    constant integer SUMMON_HAWK                                     = 'ANsw'

    constant integer ALCHEMIST                                       = 'Nalc'

    constant integer TRANSMUTE                                       = 'ANtm'
    constant integer HEALING_SPRAY                                   = 'ANhs'
    constant integer ACID_BOMB                                       = 'ANab'
    constant integer CHEMICAL_RAGE                                   = 'ANcr'

    constant integer TINKER                                          = 'Ntin'

    constant integer ROBO_GOBLIN                                     = 'ANrg'
    constant integer CLUSTER_ROCKETS                                 = 'ANcs'
    constant integer ENGINEERING                                     = 'ANeg'
    constant integer POCKET_FACTORY                                  = 'ANsy'

    constant integer BREWMASTER                                      = 'Npbm'

    constant integer STORM_EARTH_AND_FIRE                            = 'ANef'
    constant integer BREATH_OF_FIRE                                  = 'ANbf'
    constant integer DRUNKEN_HAZE                                    = 'ANdh'
    constant integer DRUNKEN_BRAWLER                                 = 'ANdb'

    constant integer FIRELORD                                        = 'Nfir'

    constant integer VOLCANO                                         = 'ANvc'
    constant integer INCINERATE                                      = 'ANic'
    constant integer SOUL_BURN                                       = 'ANso'
    constant integer SUMMON_LAVA_SPAWN                               = 'ANlm'

    // High Elf
    constant integer RANGER                                          = 'H03Y'
    constant integer COLD_ARROWS                                     = 'AHca'

    // Gnome
    constant integer GNOME_ENGINEER_HERO                             = 'N0CS'
    constant integer HARVEST                                         = 'A0PX'
    constant integer FLAMETHROWER                                    = 'A0Z6'

    // Dalaran
    constant integer WIZARD                                          = 'H00W'
    constant integer SIPHON_MANA_WIZARD                              = 'A0DQ'
    constant integer MANA_SHIELD_WIZARD                              = 'A0DR'
    constant integer SORCERESS_HERO                                  = 'H0B2'
    constant integer MASS_POLYMORPH                                  = 'A0QS'
    constant integer MASS_INVISIBILITY                               = 'A0QD'
    constant integer MASS_SLOW                                       = 'A0QF'

    // Kul Tiras
    constant integer HYDROMANCER                                     = 'H06F'
    constant integer SUMMON_SEA_ELEMENTAL                            = 'A08Z'
    constant integer CYCLONE                                         = 'A0JC'
    constant integer MONSOON                                         = 'A024'

    // Tuskarr
    constant integer HERO_TUSKARR_CHIEFTAIN                          = 'N0FC' // hero
    constant integer MASS_ENSNARE                                    = 'A1HV'

    // Nerubian
    constant integer NERUBIAN_QUEEN_HERO                             = 'U027'
    constant integer MASS_WEB                                        = 'A1CC'
    constant integer SUMMON_SPIDER_EGG                               = 'A1CF'
    constant integer SPIN_WEB                                        = 'A1D4'
    constant integer NERUBIAN_ARMY                                   = 'A1D5'

    // Ogre
    constant integer OGRE_LORD                                       = 'N0D1'
    constant integer MASS_BLOODLUST                                  = 'A173'

    // Modern Warfare
    constant integer US_GENERAL                                      = 'H0F2'
    constant integer REPAIR_AURA                                     = 'A0WC'
    constant integer MECHANICAL_REPAIR                               = 'A0IF'

    // Roman Empire
    constant integer MILITARY_TRIBUNE                                = 'H0CK'
    constant integer ROMAN_LEGION                                    = 'A0U6'

    // Free People of Middle Earth
    constant integer GANDALF                                         = 'H0DF'
    constant integer MITHRANDIR                                      = 'A03H'

    // Sauron's Forces
    constant integer SARUMAN                                         = 'H0GU'
    constant integer FIREBOLT                                        = 'ANfb'
    constant integer SUMMON_URUK_HAI                                 = 'A106'
    constant integer POWERFUL_STAFF                                  = 'A104'
    constant integer THUNDERSTORM                                    = 'A0YY'

    // CIS
    constant integer GENERAL_GRIEVOUS                                = 'H0CO'
    constant integer COMBAT_MASTER                                   = 'A0UM'
    constant integer GENERAL_GRIEVOUS_BLADESTORM                     = 'A0UK'
    constant integer FOUR_LIGHT_SABERS                               = 'A0UL'

    constant integer COUNT_DOOKU                                     = 'H081'
    constant integer THROW_LIGHT_SABER                               = 'A0L6'
    constant integer FORCE_POWERS                                    = 'A0KT'
    constant integer LIGHT_SABER_COMBAT                              = 'A0KS'
    constant integer FORCE_MASTER                                    = 'A0L7'

    // Galactic Republic
    constant integer YODA                                            = 'H07D'

    // The Alliance
    constant integer LADY_VASHJ_BONUS_HERO                           = 'H02B'
    constant integer KAEL_BONUS_HERO                                 = 'H02C'
    constant integer ILLIDAN_BONUS_HERO                              = 'E00A'

    // Freelancer
    constant integer CREEP_DARK_WIZARD                               = 'nwzd'
    constant integer CREEP_UNBROKEN_DARK_WEAVER                      = 'nubw'
    constant integer CREEP_DOOM_GUARD                                = 'nbal'
    constant integer CREEP_WRAITH                                    = 'ngh2'
    constant integer CREEP_SPIDER_CRAB                               = 'nsc2'
    constant integer CREEP_HARPY                                     = 'nhrh'

    constant integer FREELANCER_LABORATORY                           = 'h01V'
    constant integer FREELANCER_SHOP                                 = 'h01S'
    constant integer FREELANCER_MERCENARY_CAMP                       = 'h01U'

    // AI commands
    constant integer COMMAND_ATTACK_PLAYERS_ON                       = 1
    constant integer COMMAND_ATTACK_PLAYERS_OFF                      = 2
    constant integer COMMAND_GIVE_GOLD                               = 3
    constant integer COMMAND_GIVE_LUMBER                             = 4
    constant integer COMMAND_SHIPS_ON                                = 5
    constant integer COMMAND_SHIPS_OFF                               = 6
    constant integer COMMAND_EXPANSIONS                              = 7
    constant integer COMMAND_INFO                                    = 8
    constant integer COMMAND_ATTACK_TARGET_ON                        = 9
    constant integer COMMAND_ATTACK_TARGET_OFF                       = 10
    constant integer COMMAND_ATTACK_TARGET_X                         = 11
    constant integer COMMAND_ATTACK_TARGET_Y                         = 12

    // data
    integer array heroTypes
    integer heroTypesCounter = 0

    // AI command options
    boolean attackEnemyPlayers = true
    boolean buildShips = false
    integer expansions = 0
    boolean attackTargetLocation = false
    integer attackTargetLocationX = 0
    integer attackTargetLocationY = 0
endglobals

//============================================================================
function PlayerEx takes integer slot returns player
    return Player(slot-1)
endfunction

//============================================================================
function Trace takes string message returns nothing
    if trace_on then
        call DisplayText(GetAiPlayer(),message)
    endif
endfunction

//============================================================================
function TraceI takes string message, integer val returns nothing
    if trace_on then
        call DisplayTextI(GetAiPlayer(),message,val)
    endif
endfunction

//============================================================================
function TraceII takes string message, integer v1, integer v2 returns nothing
    if trace_on then
        call DisplayTextII(GetAiPlayer(),message,v1,v2)
    endif
endfunction

//============================================================================
function TraceIII takes string message, integer v1, integer v2, integer v3 returns nothing
    if trace_on then
        call DisplayTextIII(GetAiPlayer(),message,v1,v2,v3)
    endif
endfunction

//============================================================================
function InitAI takes nothing returns nothing
    set ai_player = Player(GetAiPlayer())
    set sleep_seconds = 0
    call StopGathering()
endfunction

//============================================================================
function StandardAI takes code heroes, code peons, code attacks returns nothing

    local boolean isNewbie = (MeleeDifficulty() == MELEE_NEWBIE)

    call InitAI()

    call SetMeleeAI()

    call SetDefendPlayer(true)
    call SetGroupsFlee(not isNewbie)
    call SetHeroesBuyItems(not isNewbie)
    call SetHeroesFlee(true)
    call SetHeroesTakeItems(true)
    call SetIgnoreInjured(true)
    call SetPeonsRepair(true)
    call SetSmartArtillery(not isNewbie)
    call SetTargetHeroes(not isNewbie)
    call SetUnitsFlee(not isNewbie)
    call SetWatchMegaTargets(true)

    call CreateCaptains()

    call SetHeroLevels(heroes)

    call Sleep(0.1)
    call StartThread(peons)
    call StartThread(attacks)
endfunction

//============================================================================
//  Utility Functions
//============================================================================
function Min takes integer A, integer B returns integer
    if A < B then
        return A
    else
        return B
    endif
endfunction

function Max takes integer A, integer B returns integer
    if A > B then
        return A
    else
        return B
    endif
endfunction

function SetZepNextWave takes nothing returns nothing
    set zep_next_wave = true
endfunction

function SuicideSleep takes integer seconds returns nothing
    set sleep_seconds = sleep_seconds - seconds
    loop
        exitwhen seconds <= 0
        exitwhen allow_signal_abort and CommandsWaiting() != 0

        if seconds >= 5 then
            call Sleep(5)
            set seconds = seconds - 5
        else
            call Sleep(seconds)
            set seconds = 0
        endif
    endloop
endfunction

//============================================================================
function WaitForSignal takes nothing returns integer
    local integer cmd
    local boolean display = false //xxx
    loop
        exitwhen CommandsWaiting() != 0

        //xxx
        call Trace("waiting for a signal to begin AI script...\n")
        set display = true
        call Sleep(2)
        exitwhen CommandsWaiting() != 0
        call Sleep(2)
        exitwhen CommandsWaiting() != 0
        call Sleep(2)
        exitwhen CommandsWaiting() != 0
        call Sleep(2)
        exitwhen CommandsWaiting() != 0
        call Sleep(2)
        //xxx

    endloop

    //xxx
    if display then
        call Trace("signal received, beginning AI script\n")
    endif
    //xxx

    set cmd = GetLastCommand()
    call PopLastCommand()
    return cmd
endfunction

//============================================================================
function SetWoodPeons takes integer count returns nothing
    set campaign_wood_peons = count
endfunction

//============================================================================
function SetGoldPeons takes integer count returns nothing
    set campaign_gold_peons = count
endfunction

//============================================================================
function SetHarvestLumber takes boolean harvest returns nothing
    if harvest then
        set campaign_wood_peons = 3
    else
        set campaign_wood_peons = 0
    endif
endfunction

//============================================================================
function SetFormGroupTimeouts takes boolean state returns nothing
    set form_group_timeouts = state
endfunction

//============================================================================
function DoCampaignFarms takes boolean state returns nothing
    set do_campaign_farms = state
endfunction

//============================================================================
function GetMinorCreep takes nothing returns unit
    return GetCreepCamp(0,9,false)
endfunction

//============================================================================
function GetMajorCreep takes nothing returns unit
    return GetCreepCamp(10,100,allow_air_creeps)
endfunction

//============================================================================
function GetGold takes nothing returns integer
    return GetPlayerState(ai_player,PLAYER_STATE_RESOURCE_GOLD)
endfunction

//============================================================================
function GetWood takes nothing returns integer
    return GetPlayerState(ai_player,PLAYER_STATE_RESOURCE_LUMBER)
endfunction

//============================================================================
function InitBuildArray takes nothing returns nothing
    set build_length = 0
endfunction

//============================================================================
function InitAssaultGroup takes nothing returns nothing
    set harass_length = 0
endfunction

//============================================================================
function InitDefenseGroup takes nothing returns nothing
    set defense_length = 0
endfunction

//============================================================================
function InitMeleeGroup takes nothing returns nothing
    call InitAssaultGroup()
    call RemoveInjuries()
    call RemoveSiege()
endfunction

//============================================================================
function PrepFullSuicide takes nothing returns nothing
    call InitAssaultGroup()
    call InitDefenseGroup()
    set campaign_gold_peons = 0
    set campaign_wood_peons = 0
endfunction

//============================================================================
function SetReplacements takes integer easy, integer med, integer hard returns nothing
    if difficulty == EASY then
        call SetReplacementCount(easy)
    elseif difficulty == NORMAL then
        call SetReplacementCount(med)
    else
        call SetReplacementCount(hard)
    endif
endfunction

//============================================================================
function StartTownBuilder takes code func returns nothing
    call StartThread(func)
endfunction

//============================================================================
function SetBuildAll takes integer t, integer qty, integer unitid, integer town returns nothing
    if qty > 0 then
        set build_qty[build_length] = qty
        set build_type[build_length] = t
        set build_item[build_length] = unitid
        set build_town[build_length] = town
        set build_length = build_length + 1
    endif
endfunction

//============================================================================
function SetBuildUnit takes integer qty, integer unitid returns nothing
    call SetBuildAll(BUILD_UNIT,qty,unitid,-1)
endfunction

//============================================================================
function SetBuildNext takes integer qty, integer unitid returns nothing
    local integer has = GetUnitCount(unitid)
    if has >= qty then
        return
    endif
    call SetBuildAll(BUILD_UNIT,GetUnitCountDone(unitid)+1,unitid,-1)
endfunction

//============================================================================
function SetBuildUnitEx takes integer easy, integer med, integer hard, integer unitid returns nothing
    if difficulty == EASY then
        call SetBuildAll(BUILD_UNIT,easy,unitid,-1)
    elseif difficulty == NORMAL then
        call SetBuildAll(BUILD_UNIT,med,unitid,-1)
    else
        call SetBuildAll(BUILD_UNIT,hard,unitid,-1)
    endif
endfunction

//============================================================================
function SecondaryTown takes integer town, integer qty, integer unitid returns nothing
    call SetBuildAll(BUILD_UNIT,qty,unitid,town)
endfunction

//============================================================================
function SecTown takes integer town, integer qty, integer unitid returns nothing
    call SetBuildAll(BUILD_UNIT,qty,unitid,town)
endfunction

//============================================================================
function SetBuildUpgr takes integer qty, integer unitid returns nothing
    if MeleeDifficulty() != MELEE_NEWBIE or qty == 1 then
        call SetBuildAll(BUILD_UPGRADE,qty,unitid,-1)
    endif
endfunction

//============================================================================
function SetBuildUpgrEx takes integer easy, integer med, integer hard, integer unitid returns nothing
    if difficulty == EASY then
        call SetBuildAll(BUILD_UPGRADE,easy,unitid,-1)
    elseif difficulty == NORMAL then
        call SetBuildAll(BUILD_UPGRADE,med,unitid,-1)
    else
        call SetBuildAll(BUILD_UPGRADE,hard,unitid,-1)
    endif
endfunction

//============================================================================
function SetBuildExpa takes integer qty, integer unitid returns nothing
    call SetBuildAll(BUILD_EXPAND,qty,unitid,-1)
endfunction

//============================================================================
function StartUpgrade takes integer level, integer upgid returns boolean
    local integer gold_cost
    local integer wood_cost

    if GetUpgradeLevel(upgid) >= level then
        return true
    endif

    set gold_cost = GetUpgradeGoldCost(upgid)
    if total_gold < gold_cost then
        return false
    endif

    set wood_cost = GetUpgradeWoodCost(upgid)
    if total_wood < wood_cost then
        return false
    endif

    return SetUpgrade(upgid)
endfunction

//============================================================================
function BuildFactory takes integer unitid returns nothing
    if GetGold() > 1000 and GetWood() > 500 then
        call SetBuildUnit( 2, unitid )
    else
        call SetBuildUnit( 1, unitid )
    endif
endfunction

//============================================================================
function HallsCompleted takes integer unitid returns boolean
    return GetUnitCount(unitid) == GetUnitCountDone(unitid)
endfunction

//============================================================================
function GuardSecondary takes integer townid, integer qty, integer unitid returns nothing
    if TownHasHall(townid) and TownHasMine(townid) then
        call SecondaryTown( townid, qty, unitid )
    endif
endfunction

//============================================================================
function GetUnitCountEx takes integer unitid, boolean only_done, integer townid returns integer
    if townid == -1 then
        if only_done then
            return GetUnitCountDone(unitid)
        else
            return GetUnitCount(unitid)
        endif
    else
        return GetTownUnitCount(unitid,townid,only_done)
    endif
endfunction

//============================================================================
function TownCountEx takes integer unitid, boolean only_done, integer townid returns integer

    local integer have_qty = GetUnitCountEx(unitid,only_done,townid)

    if unitid == TOWN_HALL then
        set have_qty = have_qty + GetUnitCountEx(KEEP,false,townid) + GetUnitCountEx(CASTLE,false,townid)
    elseif unitid == KEEP then
        set have_qty = have_qty  + GetUnitCountEx(CASTLE,false,townid)

    elseif unitid == WATCH_TOWER then
        set have_qty = have_qty + GetUnitCountEx(GUARD_TOWER,false,townid) + GetUnitCountEx(CANNON_TOWER,false,townid) + GetUnitCountEx(ARCANE_TOWER,false,townid)

    elseif unitid == PEASANT then
        set have_qty = have_qty + GetUnitCountEx(MILITIA,false,townid)

    elseif unitid == GREAT_HALL then
        set have_qty = have_qty + GetUnitCountEx(STRONGHOLD,false,townid) + GetUnitCountEx(FORTRESS,false,townid)
    elseif unitid == STRONGHOLD then
        set have_qty = have_qty + GetUnitCountEx(FORTRESS,false,townid)

    elseif unitid == HEAD_HUNTER then
        set have_qty = have_qty + GetUnitCountEx(BERSERKER,false,townid)

    elseif unitid == SPIRIT_WALKER then
        set have_qty = have_qty + GetUnitCountEx(SPIRIT_WALKER_M,false,townid)
    elseif unitid == SPIRIT_WALKER_M then
        set have_qty = have_qty + GetUnitCountEx(SPIRIT_WALKER,only_done,townid)

    elseif unitid == NECROPOLIS_1 then
        set have_qty = have_qty + GetUnitCountEx(NECROPOLIS_2,false,townid) + GetUnitCountEx(NECROPOLIS_3,false,townid)
    elseif unitid == NECROPOLIS_2 then
        set have_qty = have_qty + GetUnitCountEx(NECROPOLIS_3,false,townid)

    elseif unitid == ZIGGURAT_1 then
        set have_qty = have_qty + GetUnitCountEx(ZIGGURAT_2,false,townid) + GetUnitCountEx(ZIGGURAT_FROST,false,townid)

    elseif unitid == GARGOYLE then
        set have_qty = have_qty + GetUnitCountEx(GARGOYLE_MORPH,false,townid)

    elseif unitid == TREE_LIFE then
        set have_qty = have_qty + GetUnitCountEx(TREE_AGES,false,townid) + GetUnitCountEx(TREE_ETERNITY,false,townid)
    elseif unitid == TREE_AGES then
        set have_qty = have_qty + GetUnitCountEx(TREE_ETERNITY,false,townid)

    elseif unitid == DRUID_TALON then
        set have_qty = have_qty + GetUnitCountEx(DRUID_TALON_M,false,townid)
    elseif unitid == DRUID_TALON_M then
        set have_qty = have_qty + GetUnitCountEx(DRUID_TALON,only_done,townid)

    elseif unitid == DRUID_CLAW then
        set have_qty = have_qty + GetUnitCountEx(DRUID_CLAW_M,false,townid)
    elseif unitid == DRUID_CLAW_M then
        set have_qty = have_qty + GetUnitCountEx(DRUID_CLAW,only_done,townid)

    elseif unitid == ILLIDAN then
        set have_qty = have_qty + GetUnitCountEx(ILLIDAN_DEMON,false,townid)
        
    // World of Warcraft Reforged
    elseif unitid == BLOOD_ELF_TOWN_HALL then
        set have_qty = have_qty + GetUnitCountEx(BLOOD_ELF_KEEP,false,townid) + GetUnitCountEx(BLOOD_ELF_CASTLE,false,townid)
    elseif unitid == BLOOD_ELF_KEEP then
        set have_qty = have_qty  + GetUnitCountEx(BLOOD_ELF_CASTLE,false,townid)
    elseif unitid == BLOOD_ELF_SCOUT_TOWER then
        set have_qty = have_qty  + GetUnitCountEx(ELF_GUARD_TOWER,false,townid) + GetUnitCountEx(ARCANE_TOWER,false,townid)

    elseif unitid == NAGA_TEMPLE_1 then
        set have_qty = have_qty + GetUnitCountEx(NAGA_TEMPLE,false,townid) + GetUnitCountEx(NAGA_TEMPLE_3,false,townid)
    elseif unitid == NAGA_TEMPLE then
        set have_qty = have_qty  + GetUnitCountEx(NAGA_TEMPLE_3,false,townid)

    elseif unitid == DEMON_GATE_1 then
        set have_qty = have_qty + GetUnitCountEx(DEMON_GATE_2,false,townid) + GetUnitCountEx(DEMON_GATE_3,false,townid)
    elseif unitid == DEMON_GATE_2 then
        set have_qty = have_qty  + GetUnitCountEx(DEMON_GATE_3,false,townid)
    elseif unitid == DEMON_FORTIFIED_INFERNAL_MACHINE then
        set have_qty = have_qty  + GetUnitCountEx(DEMON_FORTIFIED_INFERNAL_JUGGERNAUT,false,townid)

    elseif unitid == GOBLIN_TIER_1 then
        set have_qty = have_qty + GetUnitCountEx(GOBLIN_TIER_2,false,townid) + GetUnitCountEx(GOBLIN_TIER_3,false,townid)
    elseif unitid == GOBLIN_TIER_2 then
        set have_qty = have_qty  + GetUnitCountEx(GOBLIN_TIER_3,false,townid)

    elseif unitid == DWARF_TIER_1 then
        set have_qty = have_qty + GetUnitCountEx(DWARF_TIER_2,false,townid) + GetUnitCountEx(DWARF_TIER_3,false,townid)
    elseif unitid == DWARF_TIER_2 then
        set have_qty = have_qty  + GetUnitCountEx(DWARF_TIER_3,false,townid)

    elseif unitid == HIGH_ELF_TIER_1 then
        set have_qty = have_qty + GetUnitCountEx(HIGH_ELF_TIER_2,false,townid) + GetUnitCountEx(HIGH_ELF_TIER_3,false,townid)
    elseif unitid == HIGH_ELF_TIER_2 then
        set have_qty = have_qty  + GetUnitCountEx(HIGH_ELF_TIER_3,false,townid)

    elseif unitid == HIGH_ELF_OUTPOST then
        set have_qty = have_qty  + GetUnitCountEx(HIGH_ELF_GUARD_TOWER,false,townid)

    // High Elf
    elseif unitid == GNOME_TIER_1 then
        set have_qty = have_qty + GetUnitCountEx(GNOME_TIER_2,false,townid) + GetUnitCountEx(GNOME_TIER_3,false,townid)
    elseif unitid == GNOME_TIER_2 then
        set have_qty = have_qty  + GetUnitCountEx(GNOME_TIER_3,false,townid)

    elseif unitid == DALARAN_TIER_1 then
        set have_qty = have_qty + GetUnitCountEx(DALARAN_TIER_2,false,townid) + GetUnitCountEx(DALARAN_TIER_3,false,townid)
    elseif unitid == DALARAN_TIER_2 then
        set have_qty = have_qty  + GetUnitCountEx(DALARAN_TIER_3,false,townid)
    elseif unitid == DALARAN_GUARD_TOWER_1 then
        set have_qty = have_qty  + GetUnitCountEx(DALARAN_GUARD_TOWER_2,false,townid)

    elseif unitid == KULTIRAS_TIER_1 then
        set have_qty = have_qty + GetUnitCountEx(KULTIRAS_TIER_2,false,townid) + GetUnitCountEx(KULTIRAS_TIER_3,false,townid)
    elseif unitid == KULTIRAS_TIER_2 then
        set have_qty = have_qty  + GetUnitCountEx(KULTIRAS_TIER_3,false,townid)
    elseif unitid == KULTIRAS_WATCH_TOWER then
        set have_qty = have_qty  + GetUnitCountEx(KULTIRAS_GUARD_TOWER,false,townid) + GetUnitCountEx(KULTIRAS_CANNON_TOWER,false,townid) + GetUnitCountEx(KULTIRAS_ARCANE_TOWER,false,townid)

    elseif unitid == LORDAERON_TIER_1 then
        set have_qty = have_qty + GetUnitCountEx(LORDAERON_TIER_2,false,townid) + GetUnitCountEx(LORDAERON_TIER_3,false,townid)
    elseif unitid == LORDAERON_TIER_2 then
        set have_qty = have_qty  + GetUnitCountEx(LORDAERON_TIER_3,false,townid)
    elseif unitid == LORDAERON_SCOUT_TOWER then
        set have_qty = have_qty  + GetUnitCountEx(LORDAERON_GUARD_TOWER,false,townid) + GetUnitCountEx(LORDAERON_CANNON_TOWER,false,townid) + GetUnitCountEx(LORDAERON_ARCANE_TOWER,false,townid)

    elseif unitid == PANDAREN_TIER_1 then
        set have_qty = have_qty + GetUnitCountEx(PANDAREN_TIER_2,false,townid) + GetUnitCountEx(PANDAREN_TIER_3,false,townid)
    elseif unitid == PANDAREN_TIER_2 then
        set have_qty = have_qty  + GetUnitCountEx(PANDAREN_TIER_3,false,townid)
    elseif unitid == PANDAREN_LANTERN then
        set have_qty = have_qty  + GetUnitCountEx(PANDAREN_ARCANE_LANTERN,false,townid)

    elseif unitid == TROLL_TIER_1 then
        set have_qty = have_qty + GetUnitCountEx(TROLL_TIER_2,false,townid) + GetUnitCountEx(TROLL_TIER_3,false,townid)
    elseif unitid == TROLL_TIER_2 then
        set have_qty = have_qty  + GetUnitCountEx(TROLL_TIER_3,false,townid)

    elseif unitid == TAUREN_TIER_1 then
        set have_qty = have_qty + GetUnitCountEx(TAUREN_TIER_2,false,townid) + GetUnitCountEx(TAUREN_TIER_3,false,townid)
    elseif unitid == TAUREN_TIER_2 then
        set have_qty = have_qty  + GetUnitCountEx(TAUREN_TIER_3,false,townid)

    elseif unitid == WORGEN_TOWN_HALL then
        set have_qty = have_qty + GetUnitCountEx(WORGEN_KEEP,false,townid) + GetUnitCountEx(WORGEN_CASTLE,false,townid)
    elseif unitid == WORGEN_KEEP then
        set have_qty = have_qty  + GetUnitCountEx(WORGEN_CASTLE,false,townid)
    elseif unitid == WORGEN_SCOUT_TOWER then
        set have_qty = have_qty  + GetUnitCountEx(WORGEN_GUARD_TOWER,false,townid) + GetUnitCountEx(WORGEN_CANNON_TOWER,false,townid) + GetUnitCountEx(WORGEN_ARCANE_TOWER,false,townid)

    elseif unitid == VRYKUL_TIER_1 then
        set have_qty = have_qty + GetUnitCountEx(VRYKUL_TIER_2,false,townid) + GetUnitCountEx(VRYKUL_TIER_3,false,townid)
    elseif unitid == VRYKUL_TIER_2 then
        set have_qty = have_qty  + GetUnitCountEx(VRYKUL_TIER_3,false,townid)

    elseif unitid == TUSKARR_FROZEN_HALL then
        set have_qty = have_qty + GetUnitCountEx(TUSKARR_FROZEN_STRONGHOLD,false,townid) + GetUnitCountEx(TUSKARR_FROZEN_FORTRESS,false,townid)
    elseif unitid == TUSKARR_FROZEN_STRONGHOLD then
        set have_qty = have_qty  + GetUnitCountEx(TUSKARR_FROZEN_FORTRESS,false,townid)
    elseif unitid == TUSKARR_BLOCK_OF_ICE then
        set have_qty = have_qty  + GetUnitCountEx(TUSKARR_ICE_WALL,false,townid) + GetUnitCountEx(TUSKARR_SPIDER_SHRINE,false,townid) + GetUnitCountEx(TUSKARR_FROST_SNOWMAN,false,townid)

    elseif unitid == NERUBIAN_TIER_1 then
        set have_qty = have_qty + GetUnitCountEx(NERUBIAN_TIER_2,false,townid) + GetUnitCountEx(NERUBIAN_TIER_3,false,townid)
    elseif unitid == NERUBIAN_TIER_2 then
        set have_qty = have_qty  + GetUnitCountEx(NERUBIAN_TIER_3,false,townid)

    elseif unitid == OGRE_TIER_1 then
        set have_qty = have_qty + GetUnitCountEx(OGRE_TIER_2,false,townid) + GetUnitCountEx(OGRE_TIER_3,false,townid)
    elseif unitid == OGRE_TIER_2 then
        set have_qty = have_qty  + GetUnitCountEx(OGRE_TIER_3,false,townid)
     elseif unitid == OGRE_BOULDER_TOWER then
        set have_qty = have_qty  + GetUnitCountEx(OGRE_ADVANCED_BOULDER_TOWER,false,townid)

    elseif unitid == MODERNWARFARE_TIER_1 then
        set have_qty = have_qty + GetUnitCountEx(MODERNWARFARE_TIER_2,false,townid) + GetUnitCountEx(MODERNWARFARE_TIER_3,false,townid)
    elseif unitid == MODERNWARFARE_TIER_2 then
        set have_qty = have_qty  + GetUnitCountEx(MODERNWARFARE_TIER_3,false,townid)
    elseif unitid == MODERNWARFARE_RADIO_TOWER then
        set have_qty = have_qty  + GetUnitCountEx(MODERNWARFARE_FLAME_TOWER,false,townid) + GetUnitCountEx(MODERNWARFARE_MINIGUN_TOWER,false,townid) + GetUnitCountEx(MODERNWARFARE_MISSILE_TOWER,false,townid)

    elseif unitid == FREEPEOPLE_ROHAN_SCOUT_TOWER then
        set have_qty = have_qty + GetUnitCountEx(FREEPEOPLE_GONDORIAN_GUARD_TOWER,false,townid)

    elseif unitid == CIS_DROID_CONTROL_SHIP then
        set have_qty = have_qty + GetUnitCountEx(CIS_DROID_CONTROL_SHIP_PRODUCING,false,townid) + GetUnitCountEx(CIS_DROID_CONTROL_SHIP_FLYING,false,townid)
    elseif unitid == CIS_DROID_CONTROL_SHIP_PRODUCING then
        set have_qty = have_qty + GetUnitCountEx(CIS_DROID_CONTROL_SHIP,false,townid) + GetUnitCountEx(CIS_DROID_CONTROL_SHIP_FLYING,false,townid)
    elseif unitid == CIS_DROID_CONTROL_SHIP_FLYING then
        set have_qty = have_qty  + GetUnitCountEx(CIS_DROID_CONTROL_SHIP,false,townid) + GetUnitCountEx(CIS_DROID_CONTROL_SHIP_PRODUCING,false,townid)

    elseif unitid == DRAENEI_BOULDER_TOWER then
        set have_qty = have_qty  + GetUnitCountEx(DRAENEI_ADVANCED_BOULDER_TOWER,false,townid)
    
    elseif unitid == HIDEOUT then
        set have_qty = have_qty  + GetUnitCountEx(FORTIFIED_HIDEOUT,false,townid) + GetUnitCountEx(GUARDIANS_CITADEL,false,townid)
    elseif unitid == FORTIFIED_HIDEOUT then
        set have_qty = have_qty  + GetUnitCountEx(GUARDIANS_CITADEL,false,townid)
        
    endif
    return have_qty
endfunction

//============================================================================
function TownCountDone takes integer base returns integer
    return TownCountEx(base,true,-1)
endfunction

//============================================================================
function TownCount takes integer base returns integer
    return TownCountEx(base,false,-1)
endfunction

//============================================================================
function BasicExpansion takes boolean build_it, integer unitid returns nothing
    if build_it and HallsCompleted(unitid) then
        call SetBuildExpa( TownCount(unitid)+1, unitid )
    endif
endfunction

//============================================================================
function UpgradeAll takes integer baseid, integer newid returns nothing
    call SetBuildUnit( TownCountDone(baseid), newid )
endfunction

//============================================================================
function TownCountTown takes integer base, integer townid returns integer
    return TownCountEx(base,false,townid)
endfunction

//============================================================================
//  FoodPool
//============================================================================
function FoodPool takes integer food, boolean weak, integer id1, integer use1, boolean strong, integer id2, integer use2 returns nothing
    if strong then
        call SetBuildUnit( (food - use1 * TownCount(id1)) / use2, id2 )
    elseif weak then
        call SetBuildUnit( (food - use2 * TownCount(id2)) / use1, id1 )
    endif
endfunction

//============================================================================
//  MeleeTownHall
//============================================================================
function MeleeTownHall takes integer townid, integer unitid returns nothing
    if TownHasMine(townid) and not TownHasHall(townid) then
        call SecondaryTown ( townid, 1, unitid )
    endif
endfunction

//============================================================================
function WaitForUnits takes integer unitid, integer qty returns nothing
    loop
        exitwhen TownCountDone(unitid) == qty
        call Sleep(2)
    endloop
endfunction

//============================================================================
function StartUnit takes integer ask_qty, integer unitid, integer town returns boolean
    local integer have_qty
    local integer need_qty
    local integer afford_gold
    local integer afford_wood
    local integer afford_qty
    local integer gold_cost
    local integer wood_cost

    //------------------------------------------------------------------------
    // if we have all we're asking for then make nothing
    //
    if town == -1 then
        set have_qty = TownCount(unitid)
    else
        set have_qty = TownCountTown(unitid,town)
    endif

    if have_qty >= ask_qty then
        return true
    endif
    set need_qty = ask_qty - have_qty

    //------------------------------------------------------------------------
    // limit the qty we're requesting to the amount of resources available
    //
    set gold_cost = GetUnitGoldCost(unitid)
    set wood_cost = GetUnitWoodCost(unitid)

    if gold_cost == 0 then
        set afford_gold = need_qty
    else
        set afford_gold = total_gold / gold_cost
    endif
    if afford_gold < need_qty then
        set afford_qty = afford_gold
    else
        set afford_qty = need_qty
    endif

    if wood_cost == 0 then
        set afford_wood = need_qty
    else
        set afford_wood = total_wood / wood_cost
    endif
    if afford_wood < afford_qty then
        set afford_qty = afford_wood
    endif

    // if we're waiting on gold/wood; pause build orders
    if afford_qty < 1 then
        return false
    endif

    //------------------------------------------------------------------------
    // whether we make right now what we're requesting or not, assume we will
    // and deduct the cost of the units from our fake gold total right away
    //
    set total_gold = total_gold - gold_cost * need_qty
    set total_wood = total_wood - wood_cost * need_qty

    if total_gold < 0 then
        set total_gold = 0
    endif
    if total_wood < 0 then
        set total_wood = 0
    endif

    //------------------------------------------------------------------------
    // give the AI a chance to make the units (it may not be able to right now
    // but that doesn't stop us from trying other units after this as long
    // as we have enough money to make this AND the needed, unbuilt ones)
    //
    return SetProduce(afford_qty,unitid,town)
endfunction

//============================================================================
function WaitForTown takes integer towns, integer townid returns nothing
    local integer i = 0
    loop
        call Sleep(10)
        exitwhen TownCount(townid) >= towns
        set i = i + 1
        exitwhen i == 12
    endloop
endfunction

//============================================================================
function StartExpansion takes integer qty, integer hall returns boolean
    local integer count
    local integer town
    local unit    peon
    local integer gold_cost

    set count = TownCount(hall)
    if count >= qty then
        return true
    endif

    set town = GetNextExpansion()
    if town == -1 then
        return true
    endif

    set take_exp = true

    set gold_cost = GetUnitGoldCost(hall)
    if gold_cost > total_gold then
        return false
    endif
    set total_gold = total_gold - gold_cost

    if GetExpansionFoe() != null then
        return true
    endif

    set peon = GetExpansionPeon()
    if peon != null then
        return SetExpansion(peon,hall)
    endif

    return true
endfunction

//============================================================================
function OneBuildLoop takes nothing returns nothing
    local integer index = 0
    local integer qty
    local integer id
    local integer tp

    set total_gold = GetGold() - gold_buffer
    set total_wood = GetWood()

    loop
        exitwhen index == build_length

        set qty = build_qty [index]
        set id  = build_item[index]
        set tp  = build_type[index]

        //--------------------------------------------------------------------
        if tp == BUILD_UNIT then
            if not StartUnit(qty,id,build_town[index]) then
                return
            endif

        //--------------------------------------------------------------------
        elseif tp == BUILD_UPGRADE then
            call StartUpgrade(qty,id)

        //--------------------------------------------------------------------
        else // tp == BUILD_EXPAND
            if not StartExpansion(qty,id) then
                return
            endif
        endif

        set index = index + 1
    endloop
endfunction

//============================================================================
function StaggerSleep takes real base, real spread returns nothing
    call Sleep(base + spread * I2R(GetAiPlayer()) / I2R(GetPlayers()))
endfunction

//============================================================================
function BuildLoop takes nothing returns nothing
    call OneBuildLoop()
    call StaggerSleep(1,2)
    loop
        call OneBuildLoop()
        call Sleep(2)
    endloop
endfunction

//============================================================================
function StartBuildLoop takes nothing returns nothing
    call StartThread(function BuildLoop)
endfunction

//============================================================================
function SetInitialWave takes integer seconds returns nothing
    set sleep_seconds = seconds
endfunction

//============================================================================
function AddSleepSeconds takes integer seconds returns nothing
    set sleep_seconds = sleep_seconds + seconds
endfunction

//============================================================================
function SleepForever takes nothing returns nothing
    call Trace("going to sleep forever\n") //xxx
    loop
        call Sleep(100)
    endloop
endfunction

//============================================================================
function PlayGame takes nothing returns nothing
    call StartBuildLoop()
    call SleepForever()
endfunction

//============================================================================
function ConvertNeeds takes integer unitid returns nothing
    if GetUnitCount(unitid) < 1 then
        call StartUnit(1,unitid,-1)
    endif
endfunction

//============================================================================
function Conversions takes integer desire, integer unitid returns nothing

    if GetUnitCount(unitid) >= desire then
        return
    endif

    if unitid == HIPPO_RIDER then
        call ConvertNeeds(ARCHER)
        call ConvertNeeds(HIPPO)
        call MergeUnits(desire,ARCHER,HIPPO,HIPPO_RIDER)

    elseif unitid == BLK_SPHINX then
        call ConvertNeeds(OBS_STATUE)
        call ConvertUnits(desire,OBS_STATUE)
    endif
endfunction

//============================================================================
function SetAssaultGroup takes integer qty, integer max, integer unitid returns nothing
    call Conversions(max,unitid)

    if qty <= 0 and TownCountDone(unitid) == 0 then
        return
    endif
    set harass_qty[harass_length] = qty
    set harass_max[harass_length] = max
    set harass_units[harass_length] = unitid
    set harass_length = harass_length + 1
endfunction

//============================================================================
function Interleave3 takes integer e1, integer m1, integer h1, integer u1, integer e2, integer m2, integer h2, integer u2, integer e3, integer m3, integer h3, integer u3 returns nothing
    local integer i1 = 1
    local integer i2 = 1
    local integer i3 = 1
    local integer q1
    local integer q2
    local integer q3

    if difficulty == EASY then
        set q1 = e1
        set q2 = e2
        set q3 = e3
    elseif difficulty == NORMAL then
        set q1 = m1
        set q2 = m2
        set q3 = m3
    else // difficulty == HARD
        set q1 = h1
        set q2 = h2
        set q3 = h3
    endif

    loop
        exitwhen q1<=0 and q2<=0 and q3<=0

        if q1 > 0 then
            call SetAssaultGroup(i1,i1,u1)
            set q1 = q1 - 1
            set i1 = i1 + 1
        endif

        if q2 > 0 then
            call SetAssaultGroup(i2,i2,u2)
            set q2 = q2 - 1
            set i2 = i2 + 1
        endif

        if q3 > 0 then
            call SetAssaultGroup(i3,i3,u3)
            set q3 = q3 - 1
            set i3 = i3 + 1
        endif
    endloop
endfunction

//============================================================================
function SetMeleeGroup takes integer unitid returns nothing
    if unitid == hero_id then
        call SetAssaultGroup(1,9,unitid)
    else
        call SetAssaultGroup((TownCountDone(unitid)*3)/4,20,unitid)
    endif
endfunction

//============================================================================
function CampaignDefender takes integer level, integer qty, integer unitid returns nothing
    if qty > 0 and difficulty >= level then
        set defense_qty[defense_length] = qty
        set defense_units[defense_length] = unitid
        set defense_length = defense_length + 1
        call Conversions(qty,unitid)
        call SetBuildUnit(qty,unitid)
    endif
endfunction

//============================================================================
function CampaignDefenderEx takes integer easy, integer med, integer hard, integer unitid returns nothing
    if difficulty == EASY then
        call CampaignDefender(EASY,easy,unitid)
    elseif difficulty == NORMAL then
        call CampaignDefender(NORMAL,med,unitid)
    else
        call CampaignDefender(HARD,hard,unitid)
    endif
endfunction

//============================================================================
function CampaignAttacker takes integer level, integer qty, integer unitid returns nothing
    if qty > 0 and difficulty >= level then
        call SetAssaultGroup(qty,qty,unitid)
    endif
endfunction

//============================================================================
function CampaignAttackerEx takes integer easy, integer med, integer hard, integer unitid returns nothing
    if difficulty == EASY then
        call CampaignAttacker(EASY,easy,unitid)
    elseif difficulty == NORMAL then
        call CampaignAttacker(NORMAL,med,unitid)
    else
        call CampaignAttacker(HARD,hard,unitid)
    endif
endfunction

//============================================================================
function FormGroup takes integer seconds, boolean testReady returns nothing
    local integer index
    local integer count
    local integer unitid
    local integer desire
    local integer readyPercent

    // normally test for CaptainReadiness() of 50%
    if testReady == true then
        set readyPercent = 50
        call Trace("forming group, requiring healthy guys\n") //xxx
    else
        set readyPercent = 0
        call Trace("forming group, unit health not important\n") //xxx
    endif

    call Trace("trying to gather forces\n") //xxx

    loop
        call SuicideSleep(seconds)
        call InitAssault()

        set index = 0
        loop
            exitwhen index == harass_length

            set unitid = harass_units[index]
            set desire = harass_max[index]
            set count  = TownCountDone(unitid)

            call Conversions(desire,unitid)

            if count >= desire then
                call AddAssault(desire,unitid)
            else
                set desire = harass_qty[index]

                if count < desire then
                    call AddAssault(desire,unitid)
                else
                    call AddAssault(count,unitid)
                endif
            endif

            set index = index + 1
        endloop

        //xxx
        if form_group_timeouts and (sleep_seconds < -60) then
            call Trace("exit form group -- timeout\n")
        elseif CaptainInCombat(true) then
            call Trace("exit form group -- can't form while already in combat\n")
        elseif CaptainIsFull() and CaptainReadiness() >= readyPercent then
            call Trace("exit form group -- ready\n")
        endif
        //xxx

        // time out and send group anyway if time has already expired
        exitwhen form_group_timeouts and (sleep_seconds < -60)
        exitwhen CaptainInCombat(true)
        exitwhen CaptainIsFull() and CaptainReadiness() >= readyPercent
    endloop
endfunction

//============================================================================
function WavePrepare takes integer unitid returns integer
    return GetUnitBuildTime(unitid)
endfunction

//============================================================================
function PrepTime takes nothing returns integer
    local integer unitid
    local integer missing
    local integer prep
    local integer count
    local integer largest = 30
    local integer index = 0

    loop
        exitwhen index == harass_length

        set unitid  = harass_units[index]
        set missing = harass_qty[index] + IgnoredUnits(unitid) - TownCount(unitid)
        set prep    = WavePrepare(unitid) * missing

        if prep > largest then
            set largest = prep
        endif

        set index = index + 1
    endloop
    call TraceI("next wave will require around %d seconds to build and gather\n",largest) //xxx

    return largest
endfunction

//============================================================================
function PrepSuicideOnPlayer takes integer seconds returns boolean
    local integer wave_prep   = PrepTime()
    local integer save_length

    set save_length = harass_length
    set harass_length = 0

    call AddSleepSeconds(seconds)
    if sleep_seconds-wave_prep > 0 then
        call TraceI("going to sleep for %d seconds before gathering next attack wave\n",sleep_seconds-wave_prep) //xxx
        call SuicideSleep(sleep_seconds-wave_prep)
    endif

    call Trace("preparing suicide attack wave\n") //xxx

    set harass_length = save_length
    if harass_length < 1 then
        call Trace("ERROR - no units specificed, exiting early\n") //xxx
        return false
    endif

    return true
endfunction

//============================================================================
function SleepUntilAtGoal takes nothing returns nothing
    loop
        exitwhen CaptainRetreating()
        exitwhen CaptainAtGoal()        // reached goal
        exitwhen CaptainIsHome()        // failed to path and returned home
        exitwhen CaptainIsEmpty()       // all units died
        call SuicideSleep(3)
    endloop
endfunction

//============================================================================
function SleepInCombat takes nothing returns nothing
    local integer count = 0
    debug call Trace("SleepInCombat\n")
    loop
        loop
            exitwhen not CaptainInCombat(true)  // goal is cleared
            exitwhen CaptainIsEmpty()           // duh
            call SuicideSleep(1)
        endloop

        set count = count + 1
        exitwhen count >= 8

        //xxx this is what it should have been; do this for next patch?
        //call SuicideSleep(1)
    endloop
    debug call Trace("exit SleepInCombat\n")
endfunction

//============================================================================
function AttackMoveXYA takes integer x, integer y returns nothing

    if zep_next_wave then
        call LoadZepWave(x,y)
        set zep_next_wave = false
    endif

    call AttackMoveXY(x,y)
    call SleepUntilAtGoal()
    call SleepInCombat()
endfunction

//============================================================================
function SuicideOnPlayerWave takes nothing returns nothing
    call Trace("waiting for attack wave to enter combat\n") //xxx
    loop
        //xxx
        if allow_signal_abort and CommandsWaiting() != 0 then
            call Trace("ABORT -- attack wave override\n")
        endif

        if CaptainInCombat(true) then
            call Trace("done - captain has entered combat\n")
        endif

        if CaptainIsEmpty() then
            call Trace("done - all units are dead\n")
        endif

        if sleep_seconds < -300 then
            call Trace("done - timeout, took too long to reach engage the enemy\n")
        endif
        //xxx

        exitwhen allow_signal_abort and CommandsWaiting() != 0

        exitwhen CaptainInCombat(true)
        exitwhen CaptainIsEmpty()
        call SuicideSleep(10)
        exitwhen sleep_seconds < -300
    endloop

    call Trace("waiting for attack wave to die\n") //xxx
    loop
        //xxx
        if allow_signal_abort and CommandsWaiting() != 0 then
            call Trace("ABORT - attack wave override\n")
        endif

        if CaptainIsEmpty() then
            call Trace("done - all units are dead\n")
        endif

        if sleep_seconds < -300 then
            call Trace("done - timeout, took too long to reach engage the enemy\n")
        endif
        //xxx

        exitwhen allow_signal_abort and CommandsWaiting() != 0

        exitwhen CaptainIsEmpty()
        call SuicideSleep(10)
        exitwhen sleep_seconds < -300
    endloop
endfunction

//--------------------------------------------------------------------------------------------------
function CommonSuicideOnPlayer takes boolean standard, boolean bldgs, integer seconds, player p, integer x, integer y returns nothing
    local integer save_peons

    if not PrepSuicideOnPlayer(seconds) then
        return
    endif

    set save_peons = campaign_wood_peons
    set campaign_wood_peons = 0

    loop
        //xxx
        if allow_signal_abort and CommandsWaiting() != 0 then
            call Trace("ABORT -- attack wave override\n")
        endif
        //xxx

        exitwhen allow_signal_abort and CommandsWaiting() != 0

        loop
            exitwhen allow_signal_abort and CommandsWaiting() != 0

            call FormGroup(5,true)
            exitwhen sleep_seconds <= 0
            call TraceI("waiting %d seconds before suicide\n",sleep_seconds) //xxx
        endloop

        if standard then
            if bldgs then
                exitwhen SuicidePlayer(p,sleep_seconds >= -60)
            else
                exitwhen SuicidePlayerUnits(p,sleep_seconds >= -60)
            endif
        else
            call AttackMoveXYA(x,y)
        endif

        call TraceI("waiting %d seconds before timeout\n",60+sleep_seconds) //xxx
        call SuicideSleep(5)
    endloop

    set campaign_wood_peons = save_peons
    set harass_length = 0

    call SuicideOnPlayerWave()
endfunction

//--------------------------------------------------------------------------------------------------
function SuicideOnPlayer takes integer seconds, player p returns nothing
    call CommonSuicideOnPlayer(true,true,seconds,p,0,0)
endfunction

//--------------------------------------------------------------------------------------------------
function SuicideOnUnits takes integer seconds, player p returns nothing
    call CommonSuicideOnPlayer(true,false,seconds,p,0,0)
endfunction

//--------------------------------------------------------------------------------------------------
function SuicideOnPoint takes integer seconds, player p, integer x, integer y returns nothing
    call CommonSuicideOnPlayer(false,false,seconds,p,x,y)
endfunction

//============================================================================
function SuicideUntilSignal takes integer seconds, player p returns nothing
    local integer save
    local integer wave_prep = PrepTime()

    loop
        call AddSleepSeconds(seconds)
        if sleep_seconds-wave_prep > 0 then
            call SuicideSleep(sleep_seconds-wave_prep)
        endif

        set save = campaign_wood_peons
        set campaign_wood_peons = 0
        loop
            loop
                call FormGroup(5, true)
                exitwhen sleep_seconds <= 0
                exitwhen CommandsWaiting() != 0
            endloop
            exitwhen SuicidePlayer(p,sleep_seconds >= -60)
            exitwhen CommandsWaiting() != 0
            call SuicideSleep(3)
        endloop
        set campaign_wood_peons = save

        loop
            exitwhen CaptainIsEmpty()
            exitwhen CommandsWaiting() != 0
            call SuicideSleep(5)
        endloop
        exitwhen CommandsWaiting() != 0
    endloop
endfunction

//--------------------------------------------------------------------------------------------------
function SuicideOnce takes integer easy, integer med, integer hard, integer unitid returns nothing
    if difficulty == EASY then
        call SuicideUnit(easy,unitid)
    elseif difficulty == NORMAL then
        call SuicideUnit(med,unitid)
    else
        call SuicideUnit(hard,unitid)
    endif
endfunction

//--------------------------------------------------------------------------------------------------
function SuicideUnitA takes integer unitid returns nothing
    if unitid != 0 then
        call SuicideUnit(1,unitid)
    endif
    call Sleep(0.1)
endfunction

//--------------------------------------------------------------------------------------------------
function SuicideUnitB takes integer unitid, integer playerid returns nothing
    if unitid != 0 then
        call SuicideUnitEx(1,unitid,playerid)
    endif
    call Sleep(0.1)
endfunction

//--------------------------------------------------------------------------------------------------
function SuicideUnits takes integer u1, integer u2, integer u3, integer u4, integer u5, integer u6, integer u7, integer u8, integer u9, integer uA returns nothing
    call Trace("MASS SUICIDE - this script is now technically done\n") //xxx

    call PrepFullSuicide()
    loop
        call SuicideUnitA(u1)
        call SuicideUnitA(u2)
        call SuicideUnitA(u3)
        call SuicideUnitA(u4)
        call SuicideUnitA(u5)
        call SuicideUnitA(u6)
        call SuicideUnitA(u7)
        call SuicideUnitA(u8)
        call SuicideUnitA(u9)
        call SuicideUnitA(uA)
    endloop
endfunction

//--------------------------------------------------------------------------------------------------
function SuicideUnitsEx takes integer playerid, integer u1, integer u2, integer u3, integer u4, integer u5, integer u6, integer u7, integer u8, integer u9, integer uA returns nothing
    call Trace("MASS SUICIDE - this script is now technically done\n") //xxx

    call PrepFullSuicide()
    loop
        call SuicideUnitB(u1,playerid)
        call SuicideUnitB(u2,playerid)
        call SuicideUnitB(u3,playerid)
        call SuicideUnitB(u4,playerid)
        call SuicideUnitB(u5,playerid)
        call SuicideUnitB(u6,playerid)
        call SuicideUnitB(u7,playerid)
        call SuicideUnitB(u8,playerid)
        call SuicideUnitB(u9,playerid)
        call SuicideUnitB(uA,playerid)
    endloop
endfunction

//--------------------------------------------------------------------------------------------------
function SuicideOnPlayerEx takes integer easy, integer med, integer hard, player p returns nothing
    if difficulty == EASY then
        call SuicideOnPlayer(easy,p)
    elseif difficulty == NORMAL then
        call SuicideOnPlayer(med,p)
    else
        call SuicideOnPlayer(hard,p)
    endif
endfunction

//--------------------------------------------------------------------------------------------------
function SuicideOnUnitsEx takes integer easy, integer med, integer hard, player p returns nothing
    if difficulty == EASY then
        call SuicideOnUnits(easy,p)
    elseif difficulty == NORMAL then
        call SuicideOnUnits(med,p)
    else
        call SuicideOnUnits(hard,p)
    endif
endfunction

//--------------------------------------------------------------------------------------------------
function SuicideOnPointEx takes integer easy, integer med, integer hard, player p, integer x, integer y returns nothing
    if difficulty == EASY then
        call SuicideOnPoint(easy,p,x,y)
    elseif difficulty == NORMAL then
        call SuicideOnPoint(med,p,x,y)
    else
        call SuicideOnPoint(hard,p,x,y)
    endif
endfunction

//============================================================================
function ForeverSuicideOnPlayer takes integer seconds, player p returns nothing
    local integer length = harass_length
    loop
        exitwhen allow_signal_abort and CommandsWaiting() != 0
        call SuicideOnPlayer(seconds,p)
        set harass_length = length
    endloop
endfunction

//============================================================================
function CommonSleepUntilTargetDead takes unit target, boolean reform returns nothing
    loop
        exitwhen CaptainRetreating()
        exitwhen CaptainReadinessHP() <= 40

        exitwhen not UnitAlive(target)
        exitwhen UnitInvis(target) and not IsUnitDetected(target,ai_player)

        if not TownThreatened() then
            call AttackMoveKill(target)
        endif

        call SuicideSleep(3)

        if reform and sleep_seconds < -40 then
            if CaptainInCombat(true) then
                set sleep_seconds = sleep_seconds + 5
            else
                set sleep_seconds = 0
                call FormGroup(1,false)
            endif
        endif
    endloop
endfunction

//============================================================================
function SleepUntilTargetDead takes unit target returns nothing
    call CommonSleepUntilTargetDead(target,false)
endfunction

//============================================================================
function ReformUntilTargetDead takes unit target returns nothing
    debug call Trace("ReformUntilTargetDead\n")
    call CommonSleepUntilTargetDead(target,true)
endfunction

//============================================================================
function AttackMoveKillA takes unit target returns nothing
    if target == null then
        call SuicideSleep(3)
        return
    endif

    debug call Trace("AttackMoveKillA\n")
    call AttackMoveKill(target)
    call ReformUntilTargetDead(target)
    call SleepInCombat()
endfunction

//============================================================================
function MinorCreepAttack takes nothing returns nothing
    local unit target = GetMinorCreep()
    call SetAllianceTarget(target)
    call FormGroup(3, true)
    call AttackMoveKillA(target)
endfunction

//============================================================================
function MajorCreepAttack takes nothing returns nothing
    local unit target = GetMajorCreep()
    call SetAllianceTarget(target)
    call FormGroup(3,true)
    call AttackMoveKillA(target)
endfunction

//============================================================================
function CreepAttackEx takes nothing returns nothing
    local unit target = GetCreepCamp(min_creeps,max_creeps,allow_air_creeps)
    call SetAllianceTarget(target)
    call FormGroup(3,true)
    call AttackMoveKillA(target)
endfunction

//============================================================================
function AnyPlayerAttack takes nothing returns nothing
    local unit hall

    set hall = GetEnemyExpansion()
    if hall == null then
        call StartGetEnemyBase()
        loop
            exitwhen not WaitGetEnemyBase()
            call SuicideSleep(1)
        endloop
        set hall = GetEnemyBase()
    endif

    call SetAllianceTarget(hall)
    call FormGroup(3,true)
    call AttackMoveKillA(hall)
endfunction

//============================================================================
function ExpansionAttack takes nothing returns nothing
    local unit creep = GetExpansionFoe()
    local integer x

    call FormGroup(3, true)
    if creep == null then
        set x = GetExpansionX()
        if x != -1 then
            call AttackMoveXYA(x,GetExpansionY())
        endif
    else
        call AttackMoveKillA(creep)
    endif
endfunction

//============================================================================
//  AddSiege
//============================================================================
function AddSiege takes nothing returns nothing
    call SetAssaultGroup( 0, 9, SHADE       )
    call SetAssaultGroup( 0, 9, MEAT_WAGON  )
    call SetAssaultGroup( 0, 9, MORTAR      )
    call SetAssaultGroup( 0, 9, TANK        )
    call SetAssaultGroup( 0, 9, BALLISTA    )
    call SetAssaultGroup( 0, 9, CATAPULT    )
endfunction

//===========================================================================
//  GetAllyCount
//============================================================================
function GetAllyCount takes player whichPlayer returns integer
    local integer    playerIndex = 0
    local integer    count = 0
    local player     indexPlayer

    loop
        set indexPlayer = Player(playerIndex)

        if whichPlayer != indexPlayer then
            if GetPlayerAlliance(whichPlayer,indexPlayer,ALLIANCE_PASSIVE) then
                if GetPlayerAlliance(indexPlayer,whichPlayer,ALLIANCE_PASSIVE) then
                    if GetPlayerStructureCount(indexPlayer,true) > 0 then
                        set count = count + 1
                    endif
                endif
            endif
        endif

        set playerIndex = playerIndex + 1
        exitwhen playerIndex == 12
    endloop

    return count
endfunction

//============================================================================
//  SingleMeleeAttack
//============================================================================
function SingleMeleeAttack takes boolean needs_exp, boolean has_siege, boolean major_ok, boolean air_units returns nothing
    local boolean   can_siege
    local real      daytime
    local unit      hall
    local unit      mega
    local unit      creep
    local unit      common
    local integer   minimum
    local boolean   allies

    call Trace("===SingleMeleeAttack===\n") //xxx

    if TownThreatened() then
        call Trace("sleep 2, town threatened\n") //xxx
        call Sleep(2)
        return
    endif

    // purchase zeppelins
    //
    if get_zeppelin and GetGold() > 300 and GetWood() > 100 then
        call Trace("purchase zep\n") //xxx
        call PurchaseZeppelin()
        set get_zeppelin = false
        set ready_for_zeppelin = false
        return
    endif
    set ready_for_zeppelin = true

    // coordinate with allies
    //
    set allies = GetAllyCount(ai_player) > 0
    if allies and MeleeDifficulty() != MELEE_NEWBIE then
        set common = GetAllianceTarget()
        if common != null then
            call Trace("join ally force\n") //xxx
            if GetMegaTarget() != null then
                call AddSiege()
            endif
            call FormGroup(3,true)
            call AttackMoveKillA(common)
            call SetAllianceTarget(null)
            return
        endif
    endif

    // take expansions as needed
    //
    if needs_exp then
        call Trace("needs exp\n") //xxx
        set creep = GetExpansionFoe()
        if creep != null then
            call Trace("attack exp\n") //xxx
            call SetAllianceTarget(creep)
            call FormGroup(3,true)
            call AttackMoveKillA(creep)
            call Sleep(20)
            set take_exp = false
            return
        endif
    endif

    // all-out attack if the player is weak
    //
    if MeleeDifficulty() != MELEE_NEWBIE then
        set mega = GetMegaTarget()
        if mega != null then
            call Trace("MEGA TARGET!!!\n") //xxx
            call AddSiege()
            call FormGroup(3,true)
            call AttackMoveKillA(mega)
            return
        endif
    endif

    // deny player an expansion
    //
    set hall = GetEnemyExpansion()
    set daytime = GetFloatGameState(GAME_STATE_TIME_OF_DAY)
    set can_siege = has_siege and (air_units or (daytime>=4 and daytime<=12))

    if hall!=null and (can_siege or not IsTowered(hall)) then

        call Trace("test player town attack\n") //xxx

        if MeleeDifficulty() == MELEE_NEWBIE then
            set minimum = 3
        elseif allies and MeleeDifficulty() == MELEE_NORMAL then
            set minimum = 1
        else
            set minimum = 0 // HARD, INSANE, and NORMAL with no allies
        endif

        if exp_seen >= minimum then
            call Trace("do player town attack\n") //xxx
            set exp_seen = 0
            call AddSiege()
            call SetAllianceTarget(hall)
            call FormGroup(3,true)
            call AttackMoveKillA(hall)
            return
        endif

        set exp_seen = exp_seen + 1
    endif

    // attack player's main base when siege is available
    //
    if can_siege then
        call Trace("attack player's town\n") //xxx
        call AddSiege()
        call AnyPlayerAttack()
        return
    endif

    // extended, more specific method of determining creep levels
    //
    if min_creeps != -1 then
        call TraceI("custom creep attack %d\n",max_creeps) //xxx
        call CreepAttackEx()
        return
    endif

    // nothing better to do, so kill a creep camp
    //
    if major_ok then
        call Trace("major creep attack\n") //xxx
        call MajorCreepAttack()
        return
    endif

    call Trace("minor creep attack\n") //xxx
    call MinorCreepAttack()
endfunction

//============================================================================
function GetZeppelin takes nothing returns nothing
    if ready_for_zeppelin then
        set get_zeppelin = true
    endif
endfunction

//============================================================================
function FoodUsed takes nothing returns integer
    return GetPlayerState(ai_player,PLAYER_STATE_RESOURCE_FOOD_USED)
endfunction

//============================================================================
function FoodCap takes nothing returns integer
    return GetPlayerState(ai_player,PLAYER_STATE_RESOURCE_FOOD_CAP)
endfunction

//============================================================================
function FoodSpace takes nothing returns integer
    return FoodCap() - FoodUsed()
endfunction

//============================================================================
function FoodAvail takes integer base returns integer
    return GetFoodMade(racial_farm) * TownCount(racial_farm) + GetFoodMade(base) * TownCount(base)
endfunction

//============================================================================
function BuildAttackers takes nothing returns nothing
    local integer index = 0
    local integer unitid
    local integer desire
    local integer count

    loop
        exitwhen index == harass_length

        set unitid = harass_units[index]
        set desire = harass_qty[index] + IgnoredUnits(unitid)
        set count  = TownCount(unitid)

        if count != desire then
            if not StartUnit(desire,unitid,-1) then
                return
            endif
        endif

        set index = index + 1
    endloop
endfunction

//============================================================================
function BuildDefenders takes nothing returns nothing
    local integer index = 0
    local integer unitid
    local integer qty
    loop
        exitwhen index == defense_length

        set unitid = defense_units[index]
        set qty = defense_qty[index]

        call Conversions(qty,unitid)
        call AddDefenders(qty,unitid)

        set index = index + 1
    endloop
endfunction

//============================================================================
function CampaignBasicsA takes nothing returns nothing
    local integer food_each = GetFoodMade(racial_farm)
    local integer on_wood

    call ClearHarvestAI()

    if CaptainInCombat(false) then
        set on_wood = 0
    else
        set on_wood = campaign_wood_peons
    endif

    call HarvestGold(0,campaign_gold_peons)
    call HarvestWood(0,on_wood)

    if harvest_town1 then
        call HarvestGold(1,campaign_gold_peons)
        call HarvestWood(1,on_wood)
    endif

    if harvest_town2 then
        call HarvestGold(2,campaign_gold_peons)
        call HarvestWood(2,on_wood)
    endif

    if harvest_town3 then
        call HarvestGold(3,campaign_gold_peons)
        call HarvestWood(3,on_wood)
    endif

    if do_campaign_farms and FoodUsed()+food_each-1 > food_each*(TownCount(racial_farm)+1) then
        call StartUnit(TownCount(racial_farm)+1,racial_farm,-1)
    endif

    if build_campaign_attackers then
        call BuildAttackers()
    endif

    if not CaptainInCombat(false) then
        call BuildDefenders()
    endif

    call FillGuardPosts()
    call ReturnGuardPosts()
endfunction

//============================================================================
function CampaignBasics takes nothing returns nothing
    call Sleep(1)
    call CampaignBasicsA()
    call StaggerSleep(1,5)
    loop
        call CampaignBasicsA()
        call Sleep(campaign_basics_speed)
    endloop
endfunction

//============================================================================
function CampaignAI takes integer farms, code heroes returns nothing
    if GetGameDifficulty() == MAP_DIFFICULTY_EASY then
        set difficulty = EASY

        call SetTargetHeroes(false)
        call SetUnitsFlee(false)

    elseif GetGameDifficulty() == MAP_DIFFICULTY_NORMAL then
        set difficulty = NORMAL

        call SetTargetHeroes(false)
        call SetUnitsFlee(false)

    elseif GetGameDifficulty() == MAP_DIFFICULTY_HARD then
        set difficulty = HARD

        call SetPeonsRepair(true)
    else
        set difficulty = INSANE
    endif

    call InitAI()
    call InitBuildArray()
    call InitAssaultGroup()
    call CreateCaptains()

    call SetNewHeroes(false)
    if heroes != null then
        call SetHeroLevels(heroes)
    endif

    call SetHeroesFlee(false)
    call SetGroupsFlee(false)
    call SetSlowChopping(true)
    call GroupTimedLife(false)
    call SetCampaignAI()
    call Sleep(0.1)

    set racial_farm = farms
    call StartThread(function CampaignBasics)
    call StartBuildLoop()
endfunction

//============================================================================
function UnsummonAll takes nothing returns nothing
    local unit bldg
    loop
        set bldg = GetBuilding(ai_player)
        exitwhen bldg==null
        call Unsummon(bldg)
        call Sleep(2)
    endloop
endfunction

//============================================================================
//  SkillArrays
//============================================================================
function SkillArrays takes nothing returns integer
    local integer level = GetHeroLevelAI()

    if level > max_hero_level then
        set max_hero_level = level
    endif

    if GetHeroId() == hero_id then
        return skills1[level]
    elseif GetHeroId() == hero_id2 then
        return skills2[level]
    else
        return skills3[level]
    endif
endfunction

//--------------------------------------------------------------------------------------------------
//  SetSkillArray
//--------------------------------------------------------------------------------------------------
function SetSkillArray takes integer index, integer id returns nothing
    local integer i = 1

    if index == 1 then
        if hero_id != id then
            return
        endif
        loop
            set skills1[i] = skill[i]
            exitwhen i == 10
            set i = i + 1
        endloop
    elseif index == 2 then
        if hero_id2 != id then
            return
        endif
        loop
            set skills2[i] = skill[i]
            exitwhen i == 10
            set i = i + 1
        endloop
    else
        if hero_id3 != id then
            return
        endif
        loop
            set skills3[i] = skill[i]
            exitwhen i == 10
            set i = i + 1
        endloop
    endif
endfunction

//============================================================================
//  AwaitMeleeHeroes
//============================================================================
function AwaitMeleeHeroes takes nothing returns nothing
    if GetUnitCountDone(hero_id2) > 0 then
        set two_heroes = true
    endif
    loop
        exitwhen GetUnitCountDone(hero_id)>0 and (take_exp or (not two_heroes or GetUnitCountDone(hero_id2)>0))
        call Sleep(1)
    endloop
endfunction

//============================================================================
//  PickMeleeHero
//============================================================================
function PickMeleeHero takes race raceid returns integer
    local integer first
    local integer second
    local integer third
    local integer last
    local integer array heroes

    //------------------------------------------------------------------------
    if raceid == RACE_HUMAN then
    //------------------------------------------------------------------------
        set heroes[1] = ARCHMAGE
        set heroes[2] = MTN_KING
        set heroes[3] = PALADIN
        set heroes[4] = BLOOD_MAGE

    //------------------------------------------------------------------------
    elseif raceid == RACE_ORC then
    //------------------------------------------------------------------------
        set heroes[1] = BLADE_MASTER
        set heroes[2] = FAR_SEER
        set heroes[3] = TAUREN_CHIEF
        set heroes[4] = SHADOW_HUNTER

    //------------------------------------------------------------------------
    elseif raceid == RACE_NIGHTELF then
    //------------------------------------------------------------------------
        set heroes[1] = DEMON_HUNTER
        set heroes[2] = KEEPER
        set heroes[3] = MOON_BABE
        set heroes[4] = WARDEN

    //------------------------------------------------------------------------
    elseif raceid == RACE_UNDEAD then
    //------------------------------------------------------------------------
        set heroes[1] = DEATH_KNIGHT
        set heroes[2] = DREAD_LORD
        set heroes[3] = LICH
        set heroes[4] = CRYPT_LORD
    else
        set hero_id = 0
    endif

    if VersionCompatible(VERSION_FROZEN_THRONE) then
        set last = 4
    else
        set last = 3
    endif

    set first  = GetRandomInt(1,last)
    set second = GetRandomInt(1,last-1)
    set third  = GetRandomInt(1,last-2)

    set hero_id        = heroes[first]
    set heroes[first]  = heroes[last]
    set hero_id2       = heroes[second]
    set heroes[second] = heroes[last-1]
    set hero_id3       = heroes[third]

    return hero_id
endfunction

// World of Warcraft Reforged

//===========================================================================
// Calculate the modulus/remainder of (dividend) divided by (divisor).
// Examples:  18 mod 5 = 3.  15 mod 5 = 0.  -8 mod 5 = 2.
//
function ModuloInteger takes integer dividend, integer divisor returns integer
    local integer modulus = dividend - (dividend / divisor) * divisor

    // If the dividend was negative, the above modulus calculation will
    // be negative, but within (-divisor..0).  We can add (divisor) to
    // shift this result into the desired range of (0..divisor).
    if (modulus < 0) then
        set modulus = modulus + divisor
    endif

    return modulus
endfunction

function ChooseHeroSkill takes nothing returns integer
    local integer curHero = GetHeroId()
    local integer level = GetHeroLevelAI()
    local integer mod = ModuloInteger(level, 4)
    local boolean skillUlti = ModuloInteger(level, 6) == 0

    // Human
    if (curHero == PALADIN) then
        if (skillUlti) then
            return RESURRECTION
        elseif (mod == 0) then
            return HOLY_BOLT
        elseif (mod == 1) then
            return DIVINE_SHIELD
        elseif (mod == 2) then
            return DEVOTION_AURA
        endif
    elseif (curHero == ARCHMAGE) then
        if (skillUlti) then
            return MASS_TELEPORT
        elseif (mod == 0) then
            return BLIZZARD
        elseif (mod == 1) then
            return BRILLIANCE_AURA
        elseif (mod == 2) then
            return WATER_ELEMENTAL
        endif
    elseif (curHero == MTN_KING) then
        if (skillUlti) then
            return AVATAR
        elseif (mod == 0) then
            return THUNDER_CLAP
        elseif (mod == 1) then
            return THUNDER_BOLT
        elseif (mod == 2) then
            return BASH
        endif
    elseif (curHero == BLOOD_MAGE) then
        if (skillUlti) then
            return SUMMON_PHOENIX
        elseif (mod == 0) then
            return FLAME_STRIKE
        elseif (mod == 1) then
            return BANISH
        elseif (mod == 2) then
            return SIPHON_MANA
        endif
    // Orc
    elseif (curHero == BLADE_MASTER) then
        if (skillUlti) then
            return BLADE_STORM
        elseif (mod == 0) then
            return CRITICAL_STRIKE
        elseif (mod == 1) then
            return MIRROR_IMAGE
        elseif (mod == 2) then
            return WIND_WALK
        endif
    elseif (curHero == FAR_SEER) then
        if (skillUlti) then
            return EARTHQUAKE
        elseif (mod == 0) then
            return CHAIN_LIGHTNING
        elseif (mod == 1) then
            return FAR_SIGHT
        elseif (mod == 2) then
            return SPIRIT_WOLF
        endif
    elseif (curHero == TAUREN_CHIEF) then
        if (skillUlti) then
            return REINCARNATION
        elseif (mod == 0) then
            return ENDURANE_AURA
        elseif (mod == 1) then
            return SHOCKWAVE
        elseif (mod == 2) then
            return WAR_STOMP
        endif
    elseif (curHero == SHADOW_HUNTER) then
        if (skillUlti) then
            return VOODOO
        elseif (mod == 0) then
            return HEALING_WAVE
        elseif (mod == 1) then
            return HEX
        elseif (mod == 2) then
            return SERPENT_WARD
        endif
    // Night Elf
     elseif (curHero == DEMON_HUNTER) then
        if (skillUlti) then
            return METAMORPHOSIS
        elseif (mod == 0) then
            return EVASION
        elseif (mod == 1) then
            return MANA_BURN
        elseif (mod == 2) then
            return IMMOLATION
        endif
    elseif (curHero == KEEPER) then
        if (skillUlti) then
            return TRANQUILITY
        elseif (mod == 0) then
            return THORNS_AURA
        elseif (mod == 1) then
            return FORCE_NATURE
        elseif (mod == 2) then
            return ENT_ROOTS
        endif
    elseif (curHero == MOON_CHICK) then
        if (skillUlti) then
            return STARFALL
        elseif (mod == 0) then
            return SCOUT
        elseif (mod == 1) then
            return TRUESHOT
        elseif (mod == 2) then
            return SEARING_ARROWS
        endif
    elseif (curHero == WARDEN) then
        if (skillUlti) then
            return VENGEANCE
        elseif (mod == 0) then
            return SHADOW_TOUCH
        elseif (mod == 1) then
            return FAN_KNIVES
        elseif (mod == 2) then
            return BLINK
        endif
    elseif (curHero == MOUNTAIN_GIANT_HERO) then
        if (skillUlti) then
            return MOUNTAIN_GIANT_DEMOLISH
        elseif (mod == 0) then
            return MOUNTAIN_GIANT_BOULDER
        elseif (mod == 1) then
            return MOUNTAIN_GIANT_HARDENED_SKIN
        elseif (mod == 2) then
            return MOUNTAIN_GIANT_EAT_TREE
        endif
    // Undead
    elseif (curHero == DEATH_KNIGHT) then
        if (skillUlti) then
            return ANIM_DEAD
        elseif (mod == 0) then
            return DEATH_COIL
        elseif (mod == 1) then
            return DEATH_PACT
        elseif (mod == 2) then
            return UNHOLY_AURA
        endif
    elseif (curHero == DARK_RANGER_NEUTRAL) then
        if (skillUlti) then
            return DARK_RANGER_CHARM
        elseif (mod == 0) then
            return DARK_RANGER_SILENCE
        elseif (mod == 1) then
            return DARK_RANGER_BLACK_ARROW
        elseif (mod == 2) then
            return DARK_RANGER_LIFE_DRAIN
        endif
    elseif (curHero == LICH) then
        if (skillUlti) then
            return DEATH_DECAY
        elseif (mod == 0) then
            return DARK_RITUAL
        elseif (mod == 1) then
            return FROST_ARMOR
        elseif (mod == 2) then
            return FROST_NOVA
        endif
    elseif (curHero == CRYPT_LORD) then
        if (skillUlti) then
            return LOCUST_SWARM
        elseif (mod == 0) then
            return CARRION_SCARAB
        elseif (mod == 1) then
            return IMPALE
        elseif (mod == 2) then
            return THORNY_SHIELD
        endif
    // Furbolg
    elseif (curHero == FURBOLG_URSA_WARRIOR_HERO) then
        if (skillUlti) then
            return FURBOLG_CORRUPTION
        elseif (mod == 0) then
            return FURBOLG_COMMAND_AURA
        elseif (mod == 1) then
            return FURBOLG_FAERIE_FIRE
        elseif (mod == 2) then
            return FURBOLG_REJUVENATION
        endif
    // Demon
    elseif (curHero == PIT_LORD_NEUTRAL) then
        if (skillUlti) then
            return DEMON_MASTER
        elseif (mod == 0) then
            return CLEAVING_ATTACK
        elseif (mod == 1) then
            return HOWL_OF_TERROR
        elseif (mod == 2) then
            return RAIN_OF_FIRE
        endif
    elseif (curHero == DREAD_LORD) then
        if (skillUlti) then
            return DREAD_LORD_RAIN_OF_CHAOS
        elseif (mod == 0) then
            return SLEEP
        elseif (mod == 1) then
            return VAMP_AURA
        elseif (mod == 2) then
            return CARRION_SWARM
        endif
    elseif (curHero == EREDAR_WARLOCK_NEUTRAL) then
        if (skillUlti) then
            return EREDAR_FINGER_OF_DEATH
        elseif (mod == 0) then
            return EREDAR_WARLOCK_FIRE_BOLT
        elseif (mod == 1) then
            return EREDAR_WARLOCK_MANA_SHIELD
        elseif (mod == 2) then
            return EREDAR_WARLOCK_BASH
        endif
    // Draenei
    elseif (curHero == AKAMA) then
        if (skillUlti) then
            return REINCARNATION_AKAMA
        elseif (mod == 0) then
            return SPIRIT_WOLF_AKAMA
        elseif (mod == 1) then
            return CHAIN_LIGHTNING
        elseif (mod == 2) then
            return SHADOW_TOUCH_AKAMA
        endif
    // Naga
    elseif (curHero == NAGA_SORCERESS) then
        if (skillUlti) then
            return TORNADO
        elseif (mod == 0) then
            return FORKED_LIGHTNING
        elseif (mod == 1) then
            return FROST_ARROWS
        elseif (mod == 2) then
            return MANA_SHIELD
        endif
    // Neutral Heroes
    elseif (curHero == BEASTMASTER) then
        if (skillUlti) then
            return STAMPEDE
        elseif (mod == 0) then
            return SUMMON_BEAR
        elseif (mod == 1) then
            return SUMMON_QUILBEAST
        elseif (mod == 2) then
            return SUMMON_HAWK
        endif
    elseif (curHero == ALCHEMIST) then
        if (skillUlti) then
            return TRANSMUTE
        elseif (mod == 0) then
            return HEALING_SPRAY
        elseif (mod == 1) then
            return ACID_BOMB
        elseif (mod == 2) then
            return CHEMICAL_RAGE
        endif
    elseif (curHero == TINKER) then
        if (skillUlti) then
            return ROBO_GOBLIN
        elseif (mod == 0) then
            return CLUSTER_ROCKETS
        elseif (mod == 1) then
            return ENGINEERING
        elseif (mod == 2) then
            return POCKET_FACTORY
        endif
    elseif (curHero == BREWMASTER) then
        if (skillUlti) then
            return STORM_EARTH_AND_FIRE
        elseif (mod == 0) then
            return BREATH_OF_FIRE
        elseif (mod == 1) then
            return DRUNKEN_HAZE
        elseif (mod == 2) then
            return DRUNKEN_BRAWLER
        endif
    elseif (curHero == FIRELORD) then
        if (skillUlti) then
            return VOLCANO
        elseif (mod == 0) then
            return INCINERATE
        elseif (mod == 1) then
            return SOUL_BURN
        elseif (mod == 2) then
            return SUMMON_LAVA_SPAWN
        endif
    // High Elf
    elseif (curHero == RANGER) then
        if (skillUlti) then
            return STARFALL
        elseif (mod == 0) then
            return SCOUT
        elseif (mod == 1) then
            return COLD_ARROWS
        elseif (mod == 2) then
            return TRUESHOT
        endif
    // Gnome
    elseif (curHero == GNOME_ENGINEER_HERO) then
        if (skillUlti) then
            return MECHANICAL_REPAIR
        elseif (mod == 0) then
            return HARVEST
        elseif (mod == 1) then
            return FLAMETHROWER
        elseif (mod == 2) then
            return REPAIR_AURA
        endif
    // Dalaran
    elseif (curHero == WIZARD) then
        if (skillUlti) then
            return MASS_TELEPORT
        elseif (mod == 0) then
            return SIPHON_MANA_WIZARD
        elseif (mod == 1) then
            return MANA_SHIELD_WIZARD
        elseif (mod == 2) then
            return BRILLIANCE_AURA
        endif
    elseif (curHero == SORCERESS_HERO) then
        if (skillUlti) then
            return MASS_POLYMORPH
        elseif (mod == 0) then
            return MASS_INVISIBILITY
        elseif (mod == 1) then
            return MASS_SLOW
        elseif (mod == 2) then
            return BRILLIANCE_AURA
        endif
    // Kul Tiras
    elseif (curHero == HYDROMANCER) then
        if (skillUlti) then
            return MONSOON
        elseif (mod == 0) then
            return FORKED_LIGHTNING
        elseif (mod == 1) then
            return SUMMON_SEA_ELEMENTAL
        elseif (mod == 2) then
            return CYCLONE
        endif
    // Tuskarr
    elseif (curHero == HERO_TUSKARR_CHIEFTAIN) then
        if (skillUlti) then
            return AVATAR
        elseif (mod == 0) then
            return MASS_ENSNARE
        elseif (mod == 1) then
            return WAR_STOMP
        elseif (mod == 2) then
            return FURBOLG_COMMAND_AURA
        endif
    // Nerubian
    elseif (curHero == NERUBIAN_QUEEN_HERO) then
        if (skillUlti) then
            return NERUBIAN_ARMY
        elseif (mod == 0) then
            return MASS_WEB
        elseif (mod == 1) then
            return SUMMON_SPIDER_EGG
        elseif (mod == 2) then
            return SPIN_WEB
        endif
    // Ogre
    elseif (curHero == OGRE_LORD) then
        if (skillUlti) then
            return REINCARNATION
        elseif (mod == 0) then
            return SHOCKWAVE
        elseif (mod == 1) then
            return MASS_BLOODLUST
        elseif (mod == 2) then
            return DEVOTION_AURA
        endif
    // Modern Warfare
    elseif (curHero == US_GENERAL) then
        if (skillUlti) then
            return MECHANICAL_REPAIR
        elseif (mod == 0) then
            return REPAIR_AURA
        elseif (mod == 1) then
            return DIVINE_SHIELD
        elseif (mod == 2) then
            return FURBOLG_COMMAND_AURA
        endif
    // Roman Empire
    elseif (curHero == MILITARY_TRIBUNE) then
        if (skillUlti) then
            return ROMAN_LEGION
        elseif (mod == 0) then
            return HOLY_BOLT
        elseif (mod == 1) then
            return DIVINE_SHIELD
        elseif (mod == 2) then
            return FURBOLG_COMMAND_AURA
        endif
    // Free People of Middle Earth
    elseif (curHero == GANDALF) then
        if (skillUlti) then
            return MITHRANDIR
        elseif (mod == 0) then
            return FLAME_STRIKE
        elseif (mod == 1) then
            return BANISH
        elseif (mod == 2) then
            return SIPHON_MANA
        endif
    // Sauron's Forces
    elseif (curHero == SARUMAN) then
        if (skillUlti) then
            return THUNDERSTORM
        elseif (mod == 0) then
            return FIREBOLT
        elseif (mod == 1) then
            return SUMMON_URUK_HAI
        elseif (mod == 2) then
            return POWERFUL_STAFF
        endif
    // CIS
    elseif (curHero == GENERAL_GRIEVOUS) then
        if (skillUlti) then
            return FOUR_LIGHT_SABERS
        elseif (mod == 0) then
            return COMBAT_MASTER
        elseif (mod == 1) then
            return GENERAL_GRIEVOUS_BLADESTORM
        elseif (mod == 2) then
            return LIGHT_SABER_COMBAT
        endif
    elseif (curHero == COUNT_DOOKU) then
        if (skillUlti) then
            return FORCE_MASTER
        elseif (mod == 0) then
            return THROW_LIGHT_SABER
        elseif (mod == 1) then
            return FORCE_POWERS
        elseif (mod == 2) then
            return LIGHT_SABER_COMBAT
        endif
    // Galactic Republic
    elseif (curHero == YODA) then
        if (skillUlti) then
            return FORCE_MASTER
        elseif (mod == 0) then
            return THROW_LIGHT_SABER
        elseif (mod == 1) then
            return FORCE_POWERS
        elseif (mod == 2) then
            return LIGHT_SABER_COMBAT
        endif
    // The Alliance
    elseif (curHero == LADY_VASHJ_BONUS_HERO) then
        if (skillUlti) then
            return TORNADO
        elseif (mod == 0) then
            return FORKED_LIGHTNING
        elseif (mod == 1) then
            return FROST_ARROWS
        elseif (mod == 2) then
            return MANA_SHIELD
        endif
    elseif (curHero == KAEL_BONUS_HERO) then
        if (skillUlti) then
            return SUMMON_PHOENIX
        elseif (mod == 0) then
            return BANISH
        elseif (mod == 1) then
            return FLAME_STRIKE
        elseif (mod == 2) then
            return SIPHON_MANA
        endif
    elseif (curHero == ILLIDAN_BONUS_HERO) then
        if (skillUlti) then
            return METAMORPHOSIS
        elseif (mod == 0) then
            return EVASION
        elseif (mod == 1) then
            return MANA_BURN
        elseif (mod == 2) then
            return IMMOLATION
        endif
    endif

    return 'Aamk'
endfunction

function AddHeroTypes takes integer unitTypeId returns integer
    set heroTypes[heroTypesCounter] = unitTypeId
    set heroTypesCounter = heroTypesCounter + 1
    return heroTypesCounter
endfunction

function InitHeroTypes takes nothing returns nothing
    // Human
    call AddHeroTypes(PALADIN)
    call AddHeroTypes(ARCHMAGE)
    call AddHeroTypes(MTN_KING)
    call AddHeroTypes(BLOOD_MAGE)
    // Orc
    call AddHeroTypes(BLADE_MASTER)
    call AddHeroTypes(FAR_SEER)
    call AddHeroTypes(TAUREN_CHIEF)
    call AddHeroTypes(SHADOW_HUNTER)
    // Night Elf
    call AddHeroTypes(DEMON_HUNTER)
    call AddHeroTypes(KEEPER)
    call AddHeroTypes(MOON_CHICK)
    call AddHeroTypes(WARDEN)
    call AddHeroTypes(MOUNTAIN_GIANT_HERO)
    // Undead
    call AddHeroTypes(DEATH_KNIGHT)
    call AddHeroTypes(DARK_RANGER_NEUTRAL)
    call AddHeroTypes(LICH)
    call AddHeroTypes(CRYPT_LORD)
    // Demon
    call AddHeroTypes(PIT_LORD_NEUTRAL)
    call AddHeroTypes(EREDAR_WARLOCK_NEUTRAL)
    call AddHeroTypes(DREAD_LORD)
    // Furbolg
    call AddHeroTypes(FURBOLG_URSA_WARRIOR_HERO)
    // Draenei
    call AddHeroTypes(AKAMA)
    // Naga
    call AddHeroTypes(NAGA_SORCERESS)
    // Neutral Heroes
    call AddHeroTypes(BEASTMASTER)
    call AddHeroTypes(ALCHEMIST)
    call AddHeroTypes(TINKER)
    call AddHeroTypes(BREWMASTER)
    call AddHeroTypes(FIRELORD)
    call AddHeroTypes(BREWMASTER)
    // High Elf
    call AddHeroTypes(RANGER)
    // Gnome
    call AddHeroTypes(GNOME_ENGINEER_HERO)
    // Dalaran
    call AddHeroTypes(WIZARD)
    call AddHeroTypes(SORCERESS_HERO)
    // Kul Tiras
    call AddHeroTypes(HYDROMANCER)
    // Tuskarr
    call AddHeroTypes(HERO_TUSKARR_CHIEFTAIN)
    // Nerubian
    call AddHeroTypes(NERUBIAN_QUEEN_HERO)
    // Ogre
    call AddHeroTypes(OGRE_LORD)
    // Modern Warfare
    call AddHeroTypes(US_GENERAL)
    // Roman Empire
    call AddHeroTypes(MILITARY_TRIBUNE)
    // Free People of Middle Earth
    call AddHeroTypes(GANDALF)
    // Sauron's Forces
    call AddHeroTypes(SARUMAN)
    // CIS
    call AddHeroTypes(GENERAL_GRIEVOUS)
    call AddHeroTypes(COUNT_DOOKU)
    // Galactic Republic
    call AddHeroTypes(YODA)
endfunction

function InitHero takes nothing returns nothing
    call InitHeroTypes()
endfunction

function CountHousings takes nothing returns integer
    local integer count = 0

    set count = count + GetUnitCount(HUMAN_HOUSING)
    set count = count + GetUnitCount(ORC_HOUSING)
    set count = count + GetUnitCount(UNDEAD_HOUSING)
    set count = count + GetUnitCount(ELF_HOUSING)
    set count = count + GetUnitCount(BLOOD_ELF_HOUSING)
    set count = count + GetUnitCount(NAGA_HOUSING)
    set count = count + GetUnitCount(DEMON_HOUSING)
    set count = count + GetUnitCount(DRAENEI_HOUSING)
    set count = count + GetUnitCount(FURBOLG_HOUSING)
    set count = count + GetUnitCount(GOBLIN_HOUSING)
    set count = count + GetUnitCount(DWARF_HOUSING)
    set count = count + GetUnitCount(HIGH_ELF_HOUSING)
    set count = count + GetUnitCount(GNOME_HOUSING)
    set count = count + GetUnitCount(TROLL_HOUSING)
    set count = count + GetUnitCount(TAUREN_HOUSING)
    set count = count + GetUnitCount(PANDAREN_HOUSING)
    set count = count + GetUnitCount(DALARAN_HOUSING)
    set count = count + GetUnitCount(KULTIRAS_HOUSING)
    set count = count + GetUnitCount(LORDAERON_HOUSING)
    set count = count + GetUnitCount(WORGEN_HOUSING)
    set count = count + GetUnitCount(VRYKUL_HOUSING)
    set count = count + GetUnitCount(TUSKARR_HOUSING)
    set count = count + GetUnitCount(NERUBIAN_HOUSING)
    set count = count + GetUnitCount(GERMANS_WWII_HOUSING)
    set count = count + GetUnitCount(FREEPEOPLE_HOUSING)
    set count = count + GetUnitCount(SAURONSFORCES_HOUSING)
    set count = count + GetUnitCount(GALACTIC_REPUBLIC_HOUSING)
    set count = count + GetUnitCount(CIS_HOUSING)

    return count
endfunction

function AttackWithMounts takes nothing returns nothing
    if (GetUnitCount(GRYPHON_MOUNT) > 0) then
        call CampaignAttacker( 0, GetUnitCount(GRYPHON_MOUNT), GRYPHON_MOUNT )
    endif
    if (GetUnitCount(WYVERN_MOUNT) > 0) then
        call CampaignAttacker( 0, GetUnitCount(WYVERN_MOUNT), WYVERN_MOUNT )
    endif
    if (GetUnitCount(FROST_WYRM_MOUNT) > 0) then
        call CampaignAttacker( 0, GetUnitCount(FROST_WYRM_MOUNT), FROST_WYRM_MOUNT )
    endif
    if (GetUnitCount(CHIMAERA_MOUNT) > 0) then
        call CampaignAttacker( 0, GetUnitCount(CHIMAERA_MOUNT), CHIMAERA_MOUNT )
    endif
    if (GetUnitCount(NETHER_DRAKE_MOUNT) > 0) then
        call CampaignAttacker( 0, GetUnitCount(NETHER_DRAKE_MOUNT), NETHER_DRAKE_MOUNT )
    endif
    if (GetUnitCount(DRAGONHAWK_MOUNT) > 0) then
        call CampaignAttacker( 0, GetUnitCount(DRAGONHAWK_MOUNT), DRAGONHAWK_MOUNT )
    endif
endfunction

function AttackWithHeroes takes nothing returns nothing
    local integer i = 0
    loop
        exitwhen (i >= heroTypesCounter)
        if (GetUnitCountDone(heroTypes[i]) > 0) then
            call CampaignAttacker( 0, GetUnitCountDone(heroTypes[i]), heroTypes[i] )
        endif
        set i = i + 1
    endloop
endfunction

function AddStandardUnitsToAttackWave takes nothing returns nothing
    call PurchaseZeppelin()
    call AttackWithMounts()
    call AttackWithHeroes()
endfunction

//===========================================================================
// Basic attack functionality
//===========================================================================
function AttackTarget takes unit target, boolean addAlliance returns nothing
    if (target == null) then
        return
    endif
    if (addAlliance) then
        call SetAllianceTarget( target )
    endif
    call FormGroup( 3, true )
    call AttackMoveKillA( target )
    if (not addAlliance) then
        call SetAllianceTarget( null )
    endif
endfunction

//===========================================================================
// Initiates an attack based on target priorities
//===========================================================================
function LaunchAttack takes nothing returns nothing
    local unit target = null
    local boolean setAlly = true

    // Don't launch any attack while town is threatened
    if (TownThreatened()) then
        call Sleep( 2 )
        return
    endif
    
    if (attackTargetLocation) then
        call AttackMoveXYA(attackTargetLocationX, attackTargetLocationY)
    elseif (attackEnemyPlayers) then
        // Target Priority #1
        if (target == null) then
            set target = GetAllianceTarget()
            if (target != null) then
                set setAlly = false
            endif
        endif

        // Target Priority #2
        if (target == null) then
            set target = GetExpansionFoe()
            if (target != null) then
                set take_exp = false
            endif
        endif

        // Target Priority #3
        if (target == null) then
            set target = GetMegaTarget()
        endif

        // Target Priority #4
        if (target == null) then
            set target = GetEnemyExpansion()
        endif

        // Target Priority #5
        if (target == null) then
            set target = GetEnemyExpansion()
            if (target == null) then
                call StartGetEnemyBase(  )
                loop
                    exitwhen (not WaitGetEnemyBase())
                    call SuicideSleep( 1 )
                endloop
                set target = GetEnemyBase()
            endif
        endif
    endif

    // Target Priority #6
    if (target == null) then
        set target = GetCreepCamp( 0, 9, false )
    endif

    // Target Priority #7
    if (target == null) then
        set target = GetCreepCamp( 10, 100, true )
    endif

    // Attack the target and increment attack wave
    if (target != null) then
        call AttackTarget( target, setAlly )
    else
        // If no target was found, sleep a bit before trying again
        call Sleep( 20 )
    endif
endfunction

// recipient: changes the type of chat channel prefix shown. It has no effect on the message's visibility.
// 0: "All" chat prefix
// 1: "Allies"
// 2: "Observers"
// 3+: "Private"

function NotifySpecificPlayer takes integer playerIndex, string message returns nothing
    call BlzDisplayChatMessage(Player(GetAiPlayer()), 3 + playerIndex, message)
    call DisplayText(GetAiPlayer(), message)
endfunction

function NotifyOtherPlayers takes string message returns nothing
    call BlzDisplayChatMessage(Player(GetAiPlayer()), 0, message)
    call DisplayText(GetAiPlayer(), message)
endfunction

function GetPlayerInfoText takes nothing returns string
    local string msg = "I "
    
    if (attackEnemyPlayers) then
        set msg = msg + "attack enemy players"
    else
        set msg = msg + "do not attack enemy players"
    endif
    
    set msg = msg + ", "
    
    if (buildShips) then
        set msg = msg + "build ships"
    else
        set msg = msg + "do not build ships"
    endif
    
    set msg = msg + " and "
    
    set msg = msg + "will have "

    if (expansions > 0) then
        set msg = msg + I2S(expansions)
    else
        set msg = msg + "no"
    endif

    set msg = msg + " expansions"
    
    if (attackTargetLocation) then
        set msg = msg + " and "
    
        set msg = msg + "attack a specific location"
    endif
    
    set msg = msg + "."
    
    return msg
endfunction

function UpdateWorkers takes nothing returns nothing
    local integer c = 0
    loop
        call SetGoldPeons(5 + CountHousings() * 3)
        call SetWoodPeons(5)
        loop
            exitwhen (CommandsWaiting() <= 0)
            set c = GetLastCommand()
            if (c == COMMAND_ATTACK_PLAYERS_ON) then
                set attackEnemyPlayers = true
                call NotifyOtherPlayers("I will attack enemy players from now on!")
            elseif (c == COMMAND_ATTACK_PLAYERS_OFF) then
                set attackEnemyPlayers = false
                call NotifyOtherPlayers("I won't attack enemy players anymore!")
            elseif (c == COMMAND_GIVE_GOLD) then
                call SetPlayerState(Player(GetLastData()), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(GetLastData()), PLAYER_STATE_RESOURCE_GOLD) + GetPlayerState(Player(GetAiPlayer()), PLAYER_STATE_RESOURCE_GOLD))
                call SetPlayerState(Player(GetAiPlayer()), PLAYER_STATE_RESOURCE_GOLD, 0)
                call NotifySpecificPlayer(GetLastData(), "Here, take my gold!")
            elseif (c == COMMAND_GIVE_LUMBER) then
                call SetPlayerState(Player(GetLastData()), PLAYER_STATE_RESOURCE_LUMBER, GetPlayerState(Player(GetLastData()), PLAYER_STATE_RESOURCE_LUMBER) + GetPlayerState(Player(GetAiPlayer()), PLAYER_STATE_RESOURCE_LUMBER))
                call SetPlayerState(Player(GetAiPlayer()), PLAYER_STATE_RESOURCE_LUMBER, 0)
                call NotifySpecificPlayer(GetLastData(), "Here, take my lumber!")
            elseif (c == COMMAND_SHIPS_ON) then
                set buildShips = true
                call NotifyOtherPlayers("I will start building ships!")
            elseif (c == COMMAND_SHIPS_OFF) then
                set buildShips = false
                call NotifyOtherPlayers("I will stop building ships!")
            elseif (c == COMMAND_EXPANSIONS) then
                set expansions = GetLastData()
                call NotifyOtherPlayers("I will build " + I2S(expansions) + " expansions!")
                call TraceI("Expansions: %d", expansions)
            elseif (c == COMMAND_INFO) then
                call NotifySpecificPlayer(GetLastData(), GetPlayerInfoText())
            elseif (c == COMMAND_ATTACK_TARGET_ON) then
                set attackTargetLocation = true
                call NotifyOtherPlayers("I will attack your specified target location!")
            elseif (c == COMMAND_ATTACK_TARGET_OFF) then
                set attackTargetLocation = false
                call NotifyOtherPlayers("I will stop attacking your specified target location and attack regular targets now!")
            elseif (c == COMMAND_ATTACK_TARGET_X) then
                set attackTargetLocationX = GetLastData()
                call NotifyOtherPlayers("I will use a location with coordiante X " + I2S(attackTargetLocationX) + " when attacking a location.")
            elseif (c == COMMAND_ATTACK_TARGET_Y) then
                set attackTargetLocationY = GetLastData()
                call NotifyOtherPlayers("I will use a location with coordiante Y " + I2S(attackTargetLocationY) + " when attacking a location.")
            else
                call NotifyOtherPlayers("I received an unknown AI command: " + I2S(c))
            endif
            call PopLastCommand()
            call Sleep(5)
        endloop
        call Sleep(10)
    endloop
endfunction

function ConfigureAI takes nothing returns nothing
    call SetTargetHeroes( true )
    call SetUnitsFlee( true )
    call SetHeroesFlee( true )
    call SetPeonsRepair( true )
    call SetHeroesBuyItems( true )
    call SetHeroesTakeItems( true )
    call SetSlowChopping( false )
    call SetWatchMegaTargets( true )
    call SetIgnoreInjured( true )
    call SetGroupsFlee( true )
    call SetCaptainChanges ( false )
    call SetSmartArtillery ( true )
    call GroupTimedLife ( true )
    call SetAmphibious()
    call SetRandomPaths( true )
    call SetDefendPlayer( true )
    
    set attackEnemyPlayers = MeleeDifficulty() == MELEE_INSANE
    set buildShips = false
endfunction

function BuildingStrategyStandardTier1 takes nothing returns nothing
    call SetBuildUnit( 1, AI_LABORATORY )
    call SetBuildUnit( 2, SHREDDER )
endfunction

function ResearchHighLevelTier3Researches takes nothing returns nothing
    local integer evolutionLevel = 0
    loop
        set evolutionLevel = GetUpgradeLevel(UPG_EVOLUTION)

        exitwhen (evolutionLevel >= MAX_WOWR_RESEARCH_LEVEL)

        set evolutionLevel = evolutionLevel + 1

        call SetBuildUpgr( evolutionLevel, UPG_EVOLUTION )
        call SetBuildUpgr( evolutionLevel / 10, UPG_IMPROVED_POWER_GENERATOR )
        call SetBuildUpgr( evolutionLevel / 10, UPG_IMPROVED_MOUNT )

        call Sleep(M1)
    endloop

    call SetBuildUpgr( MAX_WOWR_RESEARCH_LEVEL, UPG_EVOLUTION )
    call SetBuildUpgr( MAX_WOWR_RESEARCH_LEVEL, UPG_IMPROVED_POWER_GENERATOR )
    call SetBuildUpgr( MAX_WOWR_RESEARCH_LEVEL, UPG_IMPROVED_MOUNT )
    //call SetBuildUpgr( MAX_WOWR_RESEARCH_LEVEL, UPG_IMPROVED_NAVY )
endfunction

function BuildingStrategyStandardTier3 takes nothing returns nothing
    call SetBuildUnit( 1, POWER_GENERATOR )
    call SetBuildUnit( 1, ANTIMAGIC_WARD )
    call SetBuildUnit( 1, RESEARCH_TENT )
    call SetBuildUnit( 1, MARKETPLACE )
    call SetBuildUnit( 1, THIEVES_GUILD )
    call SetBuildUpgr( 1, UPG_TEMPLE_OF_DEMIGODS_BLUEPRINTS )
    call SetBuildUpgr( 1, UPG_STORM_PROTECTION)
    call SetBuildUpgr( 1, UPG_DRAGON_ROOST )
    call SetBuildUnit( 1, DRAGON_ROOST )
    call StartThread(function ResearchHighLevelTier3Researches)
endfunction

function BuildingStrategyStandardTier3Freelancer takes nothing returns nothing
    //call SetBuildUnit( 1, POWER_GENERATOR )
    //call SetBuildUnit( 1, ANTIMAGIC_WARD )
    call SetBuildUnit( 1, RESEARCH_TENT )
    //call SetBuildUnit( 1, MARKETPLACE )
    //call SetBuildUnit( 1, THIEVES_GUILD )
    call SetBuildUpgr( 1, UPG_TEMPLE_OF_DEMIGODS_BLUEPRINTS )
    call SetBuildUpgr( 1, UPG_STORM_PROTECTION)
    call SetBuildUpgr( 1, UPG_DRAGON_ROOST )
    call SetBuildUnit( 1, DRAGON_ROOST )
    call StartThread(function ResearchHighLevelTier3Researches)
endfunction

function Expansions takes code func returns nothing
    call StartThread(func)
endfunction

function Ships takes code func returns nothing
    call StartThread(func)
endfunction
